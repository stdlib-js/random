{
  "version": 3,
  "sources": ["../array/tools/binary/lib/validate.js", "../array/tools/binary/lib/main.js", "../array/tools/binary/lib/index.js", "../array/tools/nullary/lib/validate.js", "../array/tools/nullary/lib/main.js", "../array/tools/nullary/lib/index.js", "../array/tools/binary-factory/lib/main.js", "../array/tools/binary-factory/lib/index.js", "../base/mt19937/lib/rand_uint32.js", "../base/mt19937/lib/factory.js", "../base/mt19937/lib/main.js", "../base/mt19937/lib/index.js", "../base/arcsine/lib/validate.js", "../base/arcsine/lib/arcsine.js", "../base/arcsine/lib/factory.js", "../base/arcsine/lib/main.js", "../base/arcsine/lib/index.js", "../array/arcsine/lib/factory.js", "../array/arcsine/lib/main.js", "../array/arcsine/lib/index.js", "../array/tools/unary/lib/validate.js", "../array/tools/unary/lib/main.js", "../array/tools/unary/lib/index.js", "../array/tools/unary-factory/lib/main.js", "../array/tools/unary-factory/lib/index.js", "../base/bernoulli/lib/factory.js", "../base/bernoulli/lib/main.js", "../base/bernoulli/lib/index.js", "../array/bernoulli/lib/factory.js", "../array/bernoulli/lib/main.js", "../array/bernoulli/lib/index.js", "../base/improved-ziggurat/lib/coords_array.js", "../base/improved-ziggurat/lib/ratio_array.js", "../base/improved-ziggurat/lib/sample_tail.js", "../base/improved-ziggurat/lib/improved_ziggurat.js", "../base/improved-ziggurat/lib/factory.js", "../base/improved-ziggurat/lib/main.js", "../base/improved-ziggurat/lib/index.js", "../base/beta/lib/validate.js", "../base/beta/lib/standard_gamma.js", "../base/beta/lib/sample1.js", "../base/beta/lib/sample2.js", "../base/beta/lib/sample3.js", "../base/beta/lib/beta.js", "../base/beta/lib/factory.js", "../base/beta/lib/main.js", "../base/beta/lib/index.js", "../array/beta/lib/factory.js", "../array/beta/lib/main.js", "../array/beta/lib/index.js", "../base/gamma/lib/validate.js", "../base/gamma/lib/gamma.js", "../base/gamma/lib/factory.js", "../base/gamma/lib/main.js", "../base/gamma/lib/index.js", "../base/betaprime/lib/validate.js", "../base/betaprime/lib/betaprime.js", "../base/betaprime/lib/factory.js", "../base/betaprime/lib/main.js", "../base/betaprime/lib/index.js", "../array/betaprime/lib/factory.js", "../array/betaprime/lib/main.js", "../array/betaprime/lib/index.js", "../base/binomial/lib/validate.js", "../base/binomial/lib/sample1.js", "../base/binomial/lib/correction.js", "../base/binomial/lib/sample2.js", "../base/binomial/lib/binomial.js", "../base/binomial/lib/factory.js", "../base/binomial/lib/main.js", "../base/binomial/lib/index.js", "../array/binomial/lib/factory.js", "../array/binomial/lib/main.js", "../array/binomial/lib/index.js", "../base/cauchy/lib/validate.js", "../base/cauchy/lib/cauchy.js", "../base/cauchy/lib/factory.js", "../base/cauchy/lib/main.js", "../base/cauchy/lib/index.js", "../array/cauchy/lib/factory.js", "../array/cauchy/lib/main.js", "../array/cauchy/lib/index.js", "../base/chisquare/lib/factory.js", "../base/chisquare/lib/main.js", "../base/chisquare/lib/index.js", "../base/chi/lib/factory.js", "../base/chi/lib/main.js", "../base/chi/lib/index.js", "../array/chi/lib/factory.js", "../array/chi/lib/main.js", "../array/chi/lib/index.js", "../array/chisquare/lib/factory.js", "../array/chisquare/lib/main.js", "../array/chisquare/lib/index.js", "../base/cosine/lib/validate.js", "../base/cosine/lib/cosine.js", "../base/cosine/lib/factory.js", "../base/cosine/lib/main.js", "../base/cosine/lib/index.js", "../array/cosine/lib/factory.js", "../array/cosine/lib/main.js", "../array/cosine/lib/index.js", "../base/discrete-uniform/lib/validate.js", "../base/discrete-uniform/lib/discrete_uniform.js", "../base/discrete-uniform/lib/factory.js", "../base/discrete-uniform/lib/main.js", "../base/discrete-uniform/lib/index.js", "../array/discrete-uniform/lib/factory.js", "../array/discrete-uniform/lib/main.js", "../array/discrete-uniform/lib/index.js", "../base/erlang/lib/validate.js", "../base/erlang/lib/erlang.js", "../base/erlang/lib/factory.js", "../base/erlang/lib/main.js", "../base/erlang/lib/index.js", "../array/erlang/lib/factory.js", "../array/erlang/lib/main.js", "../array/erlang/lib/index.js", "../base/exponential/lib/exponential.js", "../base/exponential/lib/factory.js", "../base/exponential/lib/main.js", "../base/exponential/lib/index.js", "../array/exponential/lib/factory.js", "../array/exponential/lib/main.js", "../array/exponential/lib/index.js", "../base/f/lib/validate.js", "../base/f/lib/f.js", "../base/f/lib/factory.js", "../base/f/lib/main.js", "../base/f/lib/index.js", "../array/f/lib/factory.js", "../array/f/lib/main.js", "../array/f/lib/index.js", "../array/tools/ternary/lib/validate.js", "../array/tools/ternary/lib/main.js", "../array/tools/ternary/lib/index.js", "../array/tools/ternary-factory/lib/main.js", "../array/tools/ternary-factory/lib/index.js", "../base/frechet/lib/validate.js", "../base/frechet/lib/frechet.js", "../base/frechet/lib/factory.js", "../base/frechet/lib/main.js", "../base/frechet/lib/index.js", "../array/frechet/lib/factory.js", "../array/frechet/lib/main.js", "../array/frechet/lib/index.js", "../array/gamma/lib/factory.js", "../array/gamma/lib/main.js", "../array/gamma/lib/index.js", "../base/geometric/lib/geometric.js", "../base/geometric/lib/factory.js", "../base/geometric/lib/main.js", "../base/geometric/lib/index.js", "../array/geometric/lib/factory.js", "../array/geometric/lib/main.js", "../array/geometric/lib/index.js", "../base/gumbel/lib/validate.js", "../base/gumbel/lib/gumbel.js", "../base/gumbel/lib/factory.js", "../base/gumbel/lib/main.js", "../base/gumbel/lib/index.js", "../array/gumbel/lib/factory.js", "../array/gumbel/lib/main.js", "../array/gumbel/lib/index.js", "../base/hypergeometric/lib/validate.js", "../base/hypergeometric/lib/hin.js", "../base/hypergeometric/lib/hypergeometric.js", "../base/hypergeometric/lib/factory.js", "../base/hypergeometric/lib/main.js", "../base/hypergeometric/lib/index.js", "../array/hypergeometric/lib/factory.js", "../array/hypergeometric/lib/main.js", "../array/hypergeometric/lib/index.js", "../base/invgamma/lib/validate.js", "../base/invgamma/lib/factory.js", "../base/invgamma/lib/main.js", "../base/invgamma/lib/index.js", "../array/invgamma/lib/factory.js", "../array/invgamma/lib/main.js", "../array/invgamma/lib/index.js", "../base/kumaraswamy/lib/validate.js", "../base/kumaraswamy/lib/kumaraswamy.js", "../base/kumaraswamy/lib/factory.js", "../base/kumaraswamy/lib/main.js", "../base/kumaraswamy/lib/index.js", "../array/kumaraswamy/lib/factory.js", "../array/kumaraswamy/lib/main.js", "../array/kumaraswamy/lib/index.js", "../base/laplace/lib/validate.js", "../base/laplace/lib/laplace.js", "../base/laplace/lib/factory.js", "../base/laplace/lib/main.js", "../base/laplace/lib/index.js", "../array/laplace/lib/factory.js", "../array/laplace/lib/main.js", "../array/laplace/lib/index.js", "../base/levy/lib/validate.js", "../base/levy/lib/levy.js", "../base/levy/lib/factory.js", "../base/levy/lib/main.js", "../base/levy/lib/index.js", "../array/levy/lib/factory.js", "../array/levy/lib/main.js", "../array/levy/lib/index.js", "../base/logistic/lib/validate.js", "../base/logistic/lib/logistic.js", "../base/logistic/lib/factory.js", "../base/logistic/lib/main.js", "../base/logistic/lib/index.js", "../array/logistic/lib/factory.js", "../array/logistic/lib/main.js", "../array/logistic/lib/index.js", "../base/lognormal/lib/validate.js", "../base/lognormal/lib/lognormal.js", "../base/lognormal/lib/factory.js", "../base/lognormal/lib/main.js", "../base/lognormal/lib/index.js", "../array/lognormal/lib/factory.js", "../array/lognormal/lib/main.js", "../array/lognormal/lib/index.js", "../base/minstd/lib/rand_int32.js", "../base/minstd/lib/factory.js", "../base/minstd/lib/main.js", "../base/minstd/lib/index.js", "../array/minstd/lib/defaults.json", "../array/minstd/lib/validate.js", "../array/minstd/lib/factory.js", "../array/minstd/lib/main.js", "../array/minstd/lib/index.js", "../base/minstd-shuffle/lib/create_table.js", "../base/minstd-shuffle/lib/rand_int32.js", "../base/minstd-shuffle/lib/factory.js", "../base/minstd-shuffle/lib/main.js", "../base/minstd-shuffle/lib/index.js", "../array/minstd-shuffle/lib/defaults.json", "../array/minstd-shuffle/lib/validate.js", "../array/minstd-shuffle/lib/factory.js", "../array/minstd-shuffle/lib/main.js", "../array/minstd-shuffle/lib/index.js", "../array/mt19937/lib/defaults.json", "../array/mt19937/lib/validate.js", "../array/mt19937/lib/factory.js", "../array/mt19937/lib/main.js", "../array/mt19937/lib/index.js", "../base/poisson/lib/knuth.js", "../base/poisson/lib/rejection.js", "../base/poisson/lib/poisson.js", "../base/poisson/lib/factory.js", "../base/poisson/lib/main.js", "../base/poisson/lib/index.js", "../base/negative-binomial/lib/validate.js", "../base/negative-binomial/lib/factory.js", "../base/negative-binomial/lib/main.js", "../base/negative-binomial/lib/index.js", "../array/negative-binomial/lib/factory.js", "../array/negative-binomial/lib/main.js", "../array/negative-binomial/lib/index.js", "../base/normal/lib/validate.js", "../base/normal/lib/normal.js", "../base/normal/lib/factory.js", "../base/normal/lib/main.js", "../base/normal/lib/index.js", "../array/normal/lib/factory.js", "../array/normal/lib/main.js", "../array/normal/lib/index.js", "../base/pareto-type1/lib/validate.js", "../base/pareto-type1/lib/pareto.js", "../base/pareto-type1/lib/factory.js", "../base/pareto-type1/lib/main.js", "../base/pareto-type1/lib/index.js", "../array/pareto-type1/lib/factory.js", "../array/pareto-type1/lib/main.js", "../array/pareto-type1/lib/index.js", "../array/poisson/lib/factory.js", "../array/poisson/lib/main.js", "../array/poisson/lib/index.js", "../base/randu/lib/defaults.json", "../base/randu/lib/prngs.js", "../base/randu/lib/factory.js", "../base/randu/lib/main.js", "../base/randu/lib/index.js", "../array/randu/lib/defaults.json", "../array/randu/lib/validate.js", "../array/randu/lib/factory.js", "../array/randu/lib/main.js", "../array/randu/lib/index.js", "../base/rayleigh/lib/rayleigh.js", "../base/rayleigh/lib/factory.js", "../base/rayleigh/lib/main.js", "../base/rayleigh/lib/index.js", "../array/rayleigh/lib/factory.js", "../array/rayleigh/lib/main.js", "../array/rayleigh/lib/index.js", "../base/t/lib/factory.js", "../base/t/lib/main.js", "../base/t/lib/index.js", "../array/t/lib/factory.js", "../array/t/lib/main.js", "../array/t/lib/index.js", "../base/triangular/lib/validate.js", "../base/triangular/lib/triangular.js", "../base/triangular/lib/factory.js", "../base/triangular/lib/main.js", "../base/triangular/lib/index.js", "../array/triangular/lib/factory.js", "../array/triangular/lib/main.js", "../array/triangular/lib/index.js", "../base/uniform/lib/validate.js", "../base/uniform/lib/uniform.js", "../base/uniform/lib/factory.js", "../base/uniform/lib/main.js", "../base/uniform/lib/index.js", "../array/uniform/lib/factory.js", "../array/uniform/lib/main.js", "../array/uniform/lib/index.js", "../base/weibull/lib/validate.js", "../base/weibull/lib/weibull.js", "../base/weibull/lib/factory.js", "../base/weibull/lib/main.js", "../base/weibull/lib/index.js", "../array/weibull/lib/factory.js", "../array/weibull/lib/main.js", "../array/weibull/lib/index.js", "../array/lib/index.js", "../base/box-muller/lib/randn.js", "../base/box-muller/lib/min.js", "../base/box-muller/lib/max.js", "../base/box-muller/lib/factory.js", "../base/box-muller/lib/main.js", "../base/box-muller/lib/index.js", "../base/randi/lib/defaults.json", "../base/randi/lib/prngs.js", "../base/randi/lib/factory.js", "../base/randi/lib/main.js", "../base/randi/lib/index.js", "../base/randn/lib/defaults.json", "../base/randn/lib/prngs.js", "../base/randn/lib/factory.js", "../base/randn/lib/main.js", "../base/randn/lib/index.js", "../base/reviver/lib/prngs.js", "../base/reviver/lib/main.js", "../base/reviver/lib/index.js", "../base/lib/index.js", "../iter/arcsine/lib/main.js", "../iter/arcsine/lib/index.js", "../iter/bernoulli/lib/main.js", "../iter/bernoulli/lib/index.js", "../iter/beta/lib/main.js", "../iter/beta/lib/index.js", "../iter/betaprime/lib/main.js", "../iter/betaprime/lib/index.js", "../iter/binomial/lib/main.js", "../iter/binomial/lib/index.js", "../iter/box-muller/lib/main.js", "../iter/box-muller/lib/index.js", "../iter/cauchy/lib/main.js", "../iter/cauchy/lib/index.js", "../iter/chi/lib/main.js", "../iter/chi/lib/index.js", "../iter/chisquare/lib/main.js", "../iter/chisquare/lib/index.js", "../iter/cosine/lib/main.js", "../iter/cosine/lib/index.js", "../iter/discrete-uniform/lib/main.js", "../iter/discrete-uniform/lib/index.js", "../iter/erlang/lib/main.js", "../iter/erlang/lib/index.js", "../iter/exponential/lib/main.js", "../iter/exponential/lib/index.js", "../iter/f/lib/main.js", "../iter/f/lib/index.js", "../iter/frechet/lib/main.js", "../iter/frechet/lib/index.js", "../iter/gamma/lib/main.js", "../iter/gamma/lib/index.js", "../iter/geometric/lib/main.js", "../iter/geometric/lib/index.js", "../iter/gumbel/lib/main.js", "../iter/gumbel/lib/index.js", "../iter/hypergeometric/lib/main.js", "../iter/hypergeometric/lib/index.js", "../iter/improved-ziggurat/lib/main.js", "../iter/improved-ziggurat/lib/index.js", "../iter/invgamma/lib/main.js", "../iter/invgamma/lib/index.js", "../iter/kumaraswamy/lib/main.js", "../iter/kumaraswamy/lib/index.js", "../iter/laplace/lib/main.js", "../iter/laplace/lib/index.js", "../iter/levy/lib/main.js", "../iter/levy/lib/index.js", "../iter/logistic/lib/main.js", "../iter/logistic/lib/index.js", "../iter/lognormal/lib/main.js", "../iter/lognormal/lib/index.js", "../iter/minstd/lib/main.js", "../iter/minstd/lib/index.js", "../iter/minstd-shuffle/lib/main.js", "../iter/minstd-shuffle/lib/index.js", "../iter/mt19937/lib/main.js", "../iter/mt19937/lib/index.js", "../iter/negative-binomial/lib/main.js", "../iter/negative-binomial/lib/index.js", "../iter/normal/lib/main.js", "../iter/normal/lib/index.js", "../iter/pareto-type1/lib/main.js", "../iter/pareto-type1/lib/index.js", "../iter/poisson/lib/main.js", "../iter/poisson/lib/index.js", "../iter/randi/lib/main.js", "../iter/randi/lib/index.js", "../iter/randn/lib/main.js", "../iter/randn/lib/index.js", "../iter/randu/lib/main.js", "../iter/randu/lib/index.js", "../iter/rayleigh/lib/main.js", "../iter/rayleigh/lib/index.js", "../iter/t/lib/main.js", "../iter/t/lib/index.js", "../iter/triangular/lib/main.js", "../iter/triangular/lib/index.js", "../iter/uniform/lib/main.js", "../iter/uniform/lib/index.js", "../iter/weibull/lib/main.js", "../iter/weibull/lib/index.js", "../iter/lib/index.js", "../sample/lib/discrete_uniform.js", "../sample/lib/renormalizing.js", "../sample/lib/fisher_yates.js", "../sample/lib/vose.js", "../sample/lib/defaults.json", "../sample/lib/validate.js", "../sample/lib/factory.js", "../sample/lib/main.js", "../sample/lib/index.js", "../shuffle/lib/defaults.json", "../shuffle/lib/validate.js", "../shuffle/lib/factory.js", "../shuffle/lib/main.js", "../shuffle/lib/index.js", "../streams/arcsine/lib/defaults.json", "../streams/arcsine/lib/validate.js", "../streams/arcsine/lib/debug.js", "../streams/arcsine/lib/main.js", "../streams/arcsine/lib/object_mode.js", "../streams/arcsine/lib/factory.js", "../streams/arcsine/lib/index.js", "../streams/bernoulli/lib/defaults.json", "../streams/bernoulli/lib/validate.js", "../streams/bernoulli/lib/debug.js", "../streams/bernoulli/lib/main.js", "../streams/bernoulli/lib/object_mode.js", "../streams/bernoulli/lib/factory.js", "../streams/bernoulli/lib/index.js", "../streams/beta/lib/defaults.json", "../streams/beta/lib/validate.js", "../streams/beta/lib/debug.js", "../streams/beta/lib/main.js", "../streams/beta/lib/object_mode.js", "../streams/beta/lib/factory.js", "../streams/beta/lib/index.js", "../streams/betaprime/lib/defaults.json", "../streams/betaprime/lib/validate.js", "../streams/betaprime/lib/debug.js", "../streams/betaprime/lib/main.js", "../streams/betaprime/lib/object_mode.js", "../streams/betaprime/lib/factory.js", "../streams/betaprime/lib/index.js", "../streams/binomial/lib/defaults.json", "../streams/binomial/lib/validate.js", "../streams/binomial/lib/debug.js", "../streams/binomial/lib/main.js", "../streams/binomial/lib/object_mode.js", "../streams/binomial/lib/factory.js", "../streams/binomial/lib/index.js", "../streams/box-muller/lib/defaults.json", "../streams/box-muller/lib/validate.js", "../streams/box-muller/lib/debug.js", "../streams/box-muller/lib/main.js", "../streams/box-muller/lib/object_mode.js", "../streams/box-muller/lib/factory.js", "../streams/box-muller/lib/index.js", "../streams/cauchy/lib/defaults.json", "../streams/cauchy/lib/validate.js", "../streams/cauchy/lib/debug.js", "../streams/cauchy/lib/main.js", "../streams/cauchy/lib/object_mode.js", "../streams/cauchy/lib/factory.js", "../streams/cauchy/lib/index.js", "../streams/chi/lib/defaults.json", "../streams/chi/lib/validate.js", "../streams/chi/lib/debug.js", "../streams/chi/lib/main.js", "../streams/chi/lib/object_mode.js", "../streams/chi/lib/factory.js", "../streams/chi/lib/index.js", "../streams/chisquare/lib/defaults.json", "../streams/chisquare/lib/validate.js", "../streams/chisquare/lib/debug.js", "../streams/chisquare/lib/main.js", "../streams/chisquare/lib/object_mode.js", "../streams/chisquare/lib/factory.js", "../streams/chisquare/lib/index.js", "../streams/cosine/lib/defaults.json", "../streams/cosine/lib/validate.js", "../streams/cosine/lib/debug.js", "../streams/cosine/lib/main.js", "../streams/cosine/lib/object_mode.js", "../streams/cosine/lib/factory.js", "../streams/cosine/lib/index.js", "../streams/discrete-uniform/lib/defaults.json", "../streams/discrete-uniform/lib/validate.js", "../streams/discrete-uniform/lib/debug.js", "../streams/discrete-uniform/lib/main.js", "../streams/discrete-uniform/lib/object_mode.js", "../streams/discrete-uniform/lib/factory.js", "../streams/discrete-uniform/lib/index.js", "../streams/erlang/lib/defaults.json", "../streams/erlang/lib/validate.js", "../streams/erlang/lib/debug.js", "../streams/erlang/lib/main.js", "../streams/erlang/lib/object_mode.js", "../streams/erlang/lib/factory.js", "../streams/erlang/lib/index.js", "../streams/exponential/lib/defaults.json", "../streams/exponential/lib/validate.js", "../streams/exponential/lib/debug.js", "../streams/exponential/lib/main.js", "../streams/exponential/lib/object_mode.js", "../streams/exponential/lib/factory.js", "../streams/exponential/lib/index.js", "../streams/f/lib/defaults.json", "../streams/f/lib/validate.js", "../streams/f/lib/debug.js", "../streams/f/lib/main.js", "../streams/f/lib/object_mode.js", "../streams/f/lib/factory.js", "../streams/f/lib/index.js", "../streams/frechet/lib/defaults.json", "../streams/frechet/lib/validate.js", "../streams/frechet/lib/debug.js", "../streams/frechet/lib/main.js", "../streams/frechet/lib/object_mode.js", "../streams/frechet/lib/factory.js", "../streams/frechet/lib/index.js", "../streams/gamma/lib/defaults.json", "../streams/gamma/lib/validate.js", "../streams/gamma/lib/debug.js", "../streams/gamma/lib/main.js", "../streams/gamma/lib/object_mode.js", "../streams/gamma/lib/factory.js", "../streams/gamma/lib/index.js", "../streams/geometric/lib/defaults.json", "../streams/geometric/lib/validate.js", "../streams/geometric/lib/debug.js", "../streams/geometric/lib/main.js", "../streams/geometric/lib/object_mode.js", "../streams/geometric/lib/factory.js", "../streams/geometric/lib/index.js", "../streams/gumbel/lib/defaults.json", "../streams/gumbel/lib/validate.js", "../streams/gumbel/lib/debug.js", "../streams/gumbel/lib/main.js", "../streams/gumbel/lib/object_mode.js", "../streams/gumbel/lib/factory.js", "../streams/gumbel/lib/index.js", "../streams/hypergeometric/lib/defaults.json", "../streams/hypergeometric/lib/validate.js", "../streams/hypergeometric/lib/debug.js", "../streams/hypergeometric/lib/main.js", "../streams/hypergeometric/lib/object_mode.js", "../streams/hypergeometric/lib/factory.js", "../streams/hypergeometric/lib/index.js", "../streams/improved-ziggurat/lib/defaults.json", "../streams/improved-ziggurat/lib/validate.js", "../streams/improved-ziggurat/lib/debug.js", "../streams/improved-ziggurat/lib/main.js", "../streams/improved-ziggurat/lib/object_mode.js", "../streams/improved-ziggurat/lib/factory.js", "../streams/improved-ziggurat/lib/index.js", "../streams/invgamma/lib/defaults.json", "../streams/invgamma/lib/validate.js", "../streams/invgamma/lib/debug.js", "../streams/invgamma/lib/main.js", "../streams/invgamma/lib/object_mode.js", "../streams/invgamma/lib/factory.js", "../streams/invgamma/lib/index.js", "../streams/kumaraswamy/lib/defaults.json", "../streams/kumaraswamy/lib/validate.js", "../streams/kumaraswamy/lib/debug.js", "../streams/kumaraswamy/lib/main.js", "../streams/kumaraswamy/lib/object_mode.js", "../streams/kumaraswamy/lib/factory.js", "../streams/kumaraswamy/lib/index.js", "../streams/laplace/lib/defaults.json", "../streams/laplace/lib/validate.js", "../streams/laplace/lib/debug.js", "../streams/laplace/lib/main.js", "../streams/laplace/lib/object_mode.js", "../streams/laplace/lib/factory.js", "../streams/laplace/lib/index.js", "../streams/levy/lib/defaults.json", "../streams/levy/lib/validate.js", "../streams/levy/lib/debug.js", "../streams/levy/lib/main.js", "../streams/levy/lib/object_mode.js", "../streams/levy/lib/factory.js", "../streams/levy/lib/index.js", "../streams/logistic/lib/defaults.json", "../streams/logistic/lib/validate.js", "../streams/logistic/lib/debug.js", "../streams/logistic/lib/main.js", "../streams/logistic/lib/object_mode.js", "../streams/logistic/lib/factory.js", "../streams/logistic/lib/index.js", "../streams/lognormal/lib/defaults.json", "../streams/lognormal/lib/validate.js", "../streams/lognormal/lib/debug.js", "../streams/lognormal/lib/main.js", "../streams/lognormal/lib/object_mode.js", "../streams/lognormal/lib/factory.js", "../streams/lognormal/lib/index.js", "../streams/minstd/lib/defaults.json", "../streams/minstd/lib/validate.js", "../streams/minstd/lib/debug.js", "../streams/minstd/lib/main.js", "../streams/minstd/lib/object_mode.js", "../streams/minstd/lib/factory.js", "../streams/minstd/lib/index.js", "../streams/minstd-shuffle/lib/defaults.json", "../streams/minstd-shuffle/lib/validate.js", "../streams/minstd-shuffle/lib/debug.js", "../streams/minstd-shuffle/lib/main.js", "../streams/minstd-shuffle/lib/object_mode.js", "../streams/minstd-shuffle/lib/factory.js", "../streams/minstd-shuffle/lib/index.js", "../streams/mt19937/lib/defaults.json", "../streams/mt19937/lib/validate.js", "../streams/mt19937/lib/debug.js", "../streams/mt19937/lib/main.js", "../streams/mt19937/lib/object_mode.js", "../streams/mt19937/lib/factory.js", "../streams/mt19937/lib/index.js", "../streams/negative-binomial/lib/defaults.json", "../streams/negative-binomial/lib/validate.js", "../streams/negative-binomial/lib/debug.js", "../streams/negative-binomial/lib/main.js", "../streams/negative-binomial/lib/object_mode.js", "../streams/negative-binomial/lib/factory.js", "../streams/negative-binomial/lib/index.js", "../streams/normal/lib/defaults.json", "../streams/normal/lib/validate.js", "../streams/normal/lib/debug.js", "../streams/normal/lib/main.js", "../streams/normal/lib/object_mode.js", "../streams/normal/lib/factory.js", "../streams/normal/lib/index.js", "../streams/pareto-type1/lib/defaults.json", "../streams/pareto-type1/lib/validate.js", "../streams/pareto-type1/lib/debug.js", "../streams/pareto-type1/lib/main.js", "../streams/pareto-type1/lib/object_mode.js", "../streams/pareto-type1/lib/factory.js", "../streams/pareto-type1/lib/index.js", "../streams/poisson/lib/defaults.json", "../streams/poisson/lib/validate.js", "../streams/poisson/lib/debug.js", "../streams/poisson/lib/main.js", "../streams/poisson/lib/object_mode.js", "../streams/poisson/lib/factory.js", "../streams/poisson/lib/index.js", "../streams/randi/lib/defaults.json", "../streams/randi/lib/validate.js", "../streams/randi/lib/debug.js", "../streams/randi/lib/main.js", "../streams/randi/lib/object_mode.js", "../streams/randi/lib/factory.js", "../streams/randi/lib/index.js", "../streams/randn/lib/defaults.json", "../streams/randn/lib/validate.js", "../streams/randn/lib/debug.js", "../streams/randn/lib/main.js", "../streams/randn/lib/object_mode.js", "../streams/randn/lib/factory.js", "../streams/randn/lib/index.js", "../streams/randu/lib/defaults.json", "../streams/randu/lib/validate.js", "../streams/randu/lib/debug.js", "../streams/randu/lib/main.js", "../streams/randu/lib/object_mode.js", "../streams/randu/lib/factory.js", "../streams/randu/lib/index.js", "../streams/rayleigh/lib/defaults.json", "../streams/rayleigh/lib/validate.js", "../streams/rayleigh/lib/debug.js", "../streams/rayleigh/lib/main.js", "../streams/rayleigh/lib/object_mode.js", "../streams/rayleigh/lib/factory.js", "../streams/rayleigh/lib/index.js", "../streams/t/lib/defaults.json", "../streams/t/lib/validate.js", "../streams/t/lib/debug.js", "../streams/t/lib/main.js", "../streams/t/lib/object_mode.js", "../streams/t/lib/factory.js", "../streams/t/lib/index.js", "../streams/triangular/lib/defaults.json", "../streams/triangular/lib/validate.js", "../streams/triangular/lib/debug.js", "../streams/triangular/lib/main.js", "../streams/triangular/lib/object_mode.js", "../streams/triangular/lib/factory.js", "../streams/triangular/lib/index.js", "../streams/uniform/lib/defaults.json", "../streams/uniform/lib/validate.js", "../streams/uniform/lib/debug.js", "../streams/uniform/lib/main.js", "../streams/uniform/lib/object_mode.js", "../streams/uniform/lib/factory.js", "../streams/uniform/lib/index.js", "../streams/weibull/lib/defaults.json", "../streams/weibull/lib/validate.js", "../streams/weibull/lib/debug.js", "../streams/weibull/lib/main.js", "../streams/weibull/lib/object_mode.js", "../streams/weibull/lib/factory.js", "../streams/weibull/lib/index.js", "../streams/lib/index.js", "../strided/arcsine/lib/prng.js", "../strided/arcsine/lib/main.js", "../strided/arcsine/lib/ndarray.js", "../strided/arcsine/lib/index.js", "../strided/tools/unary-factory/lib/main.js", "../strided/tools/unary-factory/lib/index.js", "../strided/bernoulli/lib/factory.js", "../strided/bernoulli/lib/main.js", "../strided/bernoulli/lib/index.js", "../strided/beta/lib/prng.js", "../strided/beta/lib/main.js", "../strided/beta/lib/ndarray.js", "../strided/beta/lib/index.js", "../strided/betaprime/lib/prng.js", "../strided/betaprime/lib/main.js", "../strided/betaprime/lib/ndarray.js", "../strided/betaprime/lib/index.js", "../strided/chi/lib/factory.js", "../strided/chi/lib/main.js", "../strided/chi/lib/index.js", "../strided/chisquare/lib/factory.js", "../strided/chisquare/lib/main.js", "../strided/chisquare/lib/index.js", "../strided/cosine/lib/prng.js", "../strided/cosine/lib/main.js", "../strided/cosine/lib/ndarray.js", "../strided/cosine/lib/index.js", "../strided/discrete-uniform/lib/prng.js", "../strided/discrete-uniform/lib/main.js", "../strided/discrete-uniform/lib/ndarray.js", "../strided/discrete-uniform/lib/index.js", "../strided/exponential/lib/factory.js", "../strided/exponential/lib/main.js", "../strided/exponential/lib/index.js", "../strided/gamma/lib/prng.js", "../strided/gamma/lib/main.js", "../strided/gamma/lib/ndarray.js", "../strided/gamma/lib/index.js", "../strided/geometric/lib/factory.js", "../strided/geometric/lib/main.js", "../strided/geometric/lib/index.js", "../strided/invgamma/lib/prng.js", "../strided/invgamma/lib/main.js", "../strided/invgamma/lib/ndarray.js", "../strided/invgamma/lib/index.js", "../strided/lognormal/lib/prng.js", "../strided/lognormal/lib/main.js", "../strided/lognormal/lib/ndarray.js", "../strided/lognormal/lib/index.js", "../strided/minstd/lib/main.js", "../strided/minstd/lib/ndarray.js", "../strided/minstd/lib/normalized.js", "../strided/minstd/lib/normalized.ndarray.js", "../strided/minstd/lib/index.js", "../strided/minstd-shuffle/lib/main.js", "../strided/minstd-shuffle/lib/ndarray.js", "../strided/minstd-shuffle/lib/normalized.js", "../strided/minstd-shuffle/lib/normalized.ndarray.js", "../strided/minstd-shuffle/lib/index.js", "../strided/mt19937/lib/main.js", "../strided/mt19937/lib/ndarray.js", "../strided/mt19937/lib/normalized.js", "../strided/mt19937/lib/normalized.ndarray.js", "../strided/mt19937/lib/index.js", "../strided/normal/lib/prng.js", "../strided/normal/lib/main.js", "../strided/normal/lib/ndarray.js", "../strided/normal/lib/index.js", "../strided/randu/lib/main.js", "../strided/randu/lib/ndarray.js", "../strided/randu/lib/index.js", "../strided/uniform/lib/prng.js", "../strided/uniform/lib/main.js", "../strided/uniform/lib/ndarray.js", "../strided/uniform/lib/index.js", "../strided/weibull/lib/prng.js", "../strided/weibull/lib/main.js", "../strided/weibull/lib/ndarray.js", "../strided/weibull/lib/index.js", "../strided/lib/index.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar contains = require( '@stdlib/array/base/assert/contains' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {string} [options.dtype] - output array data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, dtypes, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', dtypes.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar contains = require( '@stdlib/array/base/assert/contains' );\nvar filledBy = require( '@stdlib/array/base/filled-by' );\nvar binary = require( '@stdlib/strided/base/binary' );\nvar ctors = require( '@stdlib/array/ctors' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Constructor for creating arrays filled with pseudorandom values drawn from a binary PRNG.\n*\n* @constructor\n* @param {Function} prng - binary pseudorandom value generator\n* @param {StringArray} dtypes - list of supported output data types\n* @param {string} dtype - default output data type\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array of strings\n* @throws {TypeError} third argument must be a supported data type\n* @returns {Random} instance\n*\n* @example\n* var arcsine = require( '@stdlib/random/base/arcsine' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( arcsine, dtypes, defaultDType );\n*\n* var v = rand.generate( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*/\nfunction Random( prng, dtypes, dtype ) {\n\tif ( !( this instanceof Random ) ) {\n\t\treturn new Random( prng, dtypes, dtype );\n\t}\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\t// TODO: tighten this up by actually validating that `dtypes` contains only recognized/supported dtype strings\n\tif ( !isStringArray( dtypes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of strings. Value: `%s`.', dtypes ) );\n\t}\n\t// Require that the default output array data type be a member of the list of supported output array data types...\n\tif ( !contains( dtypes, dtype ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a supported data type. Value: `%s`.', dtype ) );\n\t}\n\tthis._prng = prng;\n\tthis._dtypes = dtypes;\n\tthis._dtype = dtype;\n\treturn this;\n}\n\n/**\n* Returns an array filled with pseudorandom values drawn from a binary PRNG.\n*\n* @name generate\n* @memberof Random.prototype\n* @type {Function}\n* @param {NonNegativeInteger} len - number of elements\n* @param {*} param1 - first PRNG parameter\n* @param {*} param2 - second PRNG parameter\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Collection} output array\n*\n* @example\n* var arcsine = require( '@stdlib/random/base/arcsine' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( arcsine, dtypes, defaultDType );\n*\n* var v = rand.generate( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*/\nsetReadOnly( Random.prototype, 'generate', function generate( len, param1, param2, options ) {\n\tvar ctor;\n\tvar opts;\n\tvar prng;\n\tvar out;\n\tvar err;\n\tvar dt;\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, this._dtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// NOTE: we could alternatively use the PRNG factory function to create a nullary PRNG function which applies parameters for each invocation; however, this would impose a one-time cost which is likely to be rather expensive when generating small arrays. The decision made here avoids this cost, despite a small cost due to repeatedly validating parameters for each generated pseudorandom value. Additionally, the current implementation has the added benefit that it mirrors the underlying PRNG where invalid parameters result in, e.g., a return value of `NaN` (however, realization of this benefit depends on the output array being a floating-point array).\n\tprng = this._prng;\n\tdt = opts.dtype || this._dtype;\n\tif ( dt === 'generic' ) {\n\t\treturn filledBy( len, wrapper );\n\t}\n\tctor = ctors( dt );\n\tout = new ctor( len );\n\tbinary( [ [ param1 ], [ param2 ], out ], [ len ], [ 0, 0, 1 ], prng );\n\treturn out;\n\n\t/**\n\t* Applies parameters to a pseudorandom value generator function.\n\t*\n\t* @private\n\t* @returns {*} pseudorandom value\n\t*/\n\tfunction wrapper() {\n\t\treturn prng( param1, param2 );\n\t}\n});\n\n/**\n* Fills an array with pseudorandom values drawn from a binary PRNG.\n*\n* @name assign\n* @memberof Random.prototype\n* @type {Function}\n* @param {*} param1 - first PRNG parameter\n* @param {*} param2 - second PRNG parameter\n* @param {Collection} out - output array\n* @throws {TypeError} third argument must be a collection\n* @returns {Collection} output array\n*\n* @example\n* var arcsine = require( '@stdlib/random/base/arcsine' );\n* var zeros = require( '@stdlib/array/zeros' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( arcsine, dtypes, defaultDType );\n*\n* var out = zeros( 10, 'float64' );\n* // returns <Float64Array>\n*\n* var v = rand.assign( 2.0, 5.0, out );\n* // returns <Float64Array>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nsetReadOnly( Random.prototype, 'assign', function assign( param1, param2, out ) {\n\tif ( !isCollection( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array-like object. Value: `%s`.', out ) );\n\t}\n\t// NOTE: we could alternatively use the PRNG factory function to create a nullary PRNG function which applies parameters for each invocation; however, this would impose a one-time cost which is likely to be rather expensive when filling small arrays. The decision made here avoids this cost, despite a small cost due to repeatedly validating parameters for each generated pseudorandom value. Additionally, the current implementation has the added benefit that it mirrors the underlying PRNG where invalid parameters result in, e.g., a return value of `NaN` (however, realization of this benefit depends on the output array being a floating-point array).\n\tbinary( [ [ param1 ], [ param2 ], out ], [ out.length ], [ 0, 0, 1 ], this._prng ); // eslint-disable-line max-len\n\treturn out;\n});\n\n\n// EXPORTS //\n\nmodule.exports = Random;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor for creating arrays filled with pseudorandom values drawn from a binary PRNG.\n*\n* @module @stdlib/random/array/tools/binary\n*\n* @example\n* var arcsine = require( '@stdlib/random/base/arcsine' );\n* var Random = require( '@stdlib/random/array/tools/binary' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( arcsine, dtypes, defaultDType );\n*\n* var v = rand.generate( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar contains = require( '@stdlib/array/base/assert/contains' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {string} [options.dtype] - output array data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, dtypes, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', dtypes.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar contains = require( '@stdlib/array/base/assert/contains' );\nvar filledBy = require( '@stdlib/array/base/filled-by' );\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar ctors = require( '@stdlib/array/ctors' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Constructor for creating arrays filled with pseudorandom values drawn from a nullary PRNG.\n*\n* @constructor\n* @param {Function} prng - nullary pseudorandom value generator\n* @param {StringArray} dtypes - list of supported output data types\n* @param {string} dtype - default output data type\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array of strings\n* @throws {TypeError} third argument must be a supported data type\n* @returns {Random} instance\n*\n* @example\n* var exponential = require( '@stdlib/random/base/exponential' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( exponential.factory( 2.0 ), dtypes, defaultDType );\n*\n* var v = rand.generate( 10 );\n* // returns <Float64Array>\n*/\nfunction Random( prng, dtypes, dtype ) {\n\tif ( !( this instanceof Random ) ) {\n\t\treturn new Random( prng, dtypes, dtype );\n\t}\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\t// TODO: tighten this up by actually validating that `dtypes` contains only recognized/supported dtype strings\n\tif ( !isStringArray( dtypes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of strings. Value: `%s`.', dtypes ) );\n\t}\n\t// Require that the default output array data type be a member of the list of supported output array data types...\n\tif ( !contains( dtypes, dtype ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a supported data type. Value: `%s`.', dtype ) );\n\t}\n\tthis._prng = prng;\n\tthis._dtypes = dtypes;\n\tthis._dtype = dtype;\n\treturn this;\n}\n\n/**\n* Returns an array filled with pseudorandom values drawn from a nullary PRNG.\n*\n* @name generate\n* @memberof Random.prototype\n* @type {Function}\n* @param {NonNegativeInteger} len - number of elements\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Collection} output array\n*\n* @example\n* var exponential = require( '@stdlib/random/base/exponential' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( exponential.factory( 2.0 ), dtypes, defaultDType );\n*\n* var v = rand.generate( 10 );\n* // returns <Float64Array>\n*/\nsetReadOnly( Random.prototype, 'generate', function generate( len, options ) {\n\tvar ctor;\n\tvar opts;\n\tvar out;\n\tvar err;\n\tvar dt;\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, this._dtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tdt = opts.dtype || this._dtype;\n\tif ( dt === 'generic' ) {\n\t\treturn filledBy( len, this._prng );\n\t}\n\tctor = ctors( dt );\n\tout = new ctor( len );\n\tnullary( [ out ], [ len ], [ 1 ], this._prng );\n\treturn out;\n});\n\n/**\n* Fills an array with pseudorandom values drawn from a nullary PRNG.\n*\n* @name assign\n* @memberof Random.prototype\n* @type {Function}\n* @param {Collection} out - output array\n* @throws {TypeError} first argument must be a collection\n* @returns {Collection} output array\n*\n* @example\n* var exponential = require( '@stdlib/random/base/exponential' );\n* var zeros = require( '@stdlib/array/zeros' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( exponential.factory( 2.0 ), dtypes, defaultDType );\n*\n* var out = zeros( 10, 'float64' );\n* // returns <Float64Array>\n*\n* var v = rand.assign( out );\n* // returns <Float64Array>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nsetReadOnly( Random.prototype, 'assign', function assign( out ) {\n\tif ( !isCollection( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object. Value: `%s`.', out ) );\n\t}\n\tnullary( [ out ], [ out.length ], [ 1 ], this._prng );\n\treturn out;\n});\n\n\n// EXPORTS //\n\nmodule.exports = Random;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor for creating arrays filled with pseudorandom values drawn from a nullary PRNG.\n*\n* @module @stdlib/random/array/tools/nullary\n*\n* @example\n* var exponential = require( '@stdlib/random/base/exponential' );\n* var Random = require( '@stdlib/random/array/tools/nullary' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( exponential.factory( 2.0 ), dtypes, defaultDType );\n*\n* var v = rand.generate( 10 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isMethodIn = require( '@stdlib/assert/is-method-in' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar contains = require( '@stdlib/array/base/assert/contains' ).factory;\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar BinaryRandom = require( './../../../../array/tools/binary' );\nvar NullaryRandom = require( './../../../../array/tools/nullary' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns a factory function for generating pseudorandom values drawn from a binary PRNG.\n*\n* @param {Function} prng - binary pseudorandom value generator\n* @param {Function} prng.factory - method which returns a new binary pseudorandom value generator\n* @param {StringArray} dtypes - list of supported output array data types\n* @param {string} dtype - default output array data type\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} first argument must have a `factory` method\n* @throws {TypeError} second argument must be an array of strings\n* @throws {TypeError} third argument must be a supported output array data type\n* @returns {Function} function which returns a function for creating arrays\n*\n* @example\n* var arcsine = require( '@stdlib/random/base/arcsine' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var factory = createFactory( arcsine, dtypes, 'float64' );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var x = random( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arcsine = require( '@stdlib/random/base/arcsine' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var factory = createFactory( arcsine, dtypes, 'float64' );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var x = random( 10, 2.0, 5.0, {\n*     'dtype': 'float32'\n* });\n* // returns <Float32Array>\n*/\nfunction createFactory( prng, dtypes, dtype ) {\n\tvar isValidDataType;\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\tif ( !isMethodIn( prng, 'factory' ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have a `%s` method.', 'factory' ) );\n\t}\n\t// TODO: tighten this up by actually validating that `dtypes` contains only recognized/supported dtype strings\n\tif ( !isStringArray( dtypes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must an array of strings. Value: `%s`.', dtypes ) );\n\t}\n\t// Require that the default output array data type be a member of the list of supported output array data types...\n\tif ( !contains( dtypes, dtype ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a supported data type. Value: `%s`.', dtype ) );\n\t}\n\tisValidDataType = contains( dtypes );\n\treturn factory;\n\n\t/**\n\t* Returns a function for generating pseudorandom values drawn from a PRNG.\n\t*\n\t* @private\n\t* @param {*} [param1] - first PRNG parameter\n\t* @param {*} [param2] - second PRNG parameter\n\t* @param {Options} [options] - function options\n\t* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n\t* @param {*} [options.seed] - pseudorandom value generator seed\n\t* @param {*} [options.state] - pseudorandom value generator state\n\t* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom value generator state\n\t* @param {string} [options.dtype] - default output array data type\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {Function} function for creating arrays\n\t*/\n\tfunction factory() {\n\t\tvar Random;\n\t\tvar random;\n\t\tvar param1;\n\t\tvar param2;\n\t\tvar assign;\n\t\tvar nargs;\n\t\tvar base;\n\t\tvar opts;\n\t\tvar rand;\n\t\tvar dt;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs < 1 ) {                              // e.g., factory()\n\t\t\topts = {};\n\t\t\tbase = prng;\n\t\t\trand = rand1;\n\t\t} else if ( nargs === 1 ) {                     // e.g., factory( {} )\n\t\t\topts = arguments[ 0 ];\n\t\t\tbase = prng.factory( opts );\n\t\t\trand = rand1;\n\t\t} else if ( nargs === 2 ) {                     // e.g., factory( param1, param2 )\n\t\t\tparam1 = arguments[ 0 ];\n\t\t\tparam2 = arguments[ 1 ];\n\t\t\topts = {};\n\t\t\tbase = prng.factory( param1, param2 );\n\t\t\trand = rand2;\n\t\t} else {                                        // e.g., factory( param1, param2, {} )\n\t\t\tparam1 = arguments[ 0 ];\n\t\t\tparam2 = arguments[ 1 ];\n\t\t\topts = arguments[ 2 ];\n\t\t\tbase = prng.factory( param1, param2, opts );\n\t\t\trand = rand2;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'dtype' ) ) {\n\t\t\tdt = opts.dtype;\n\t\t\tif ( !isValidDataType( dt ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', dtypes.join( '\", \"' ), dt ) );\n\t\t\t}\n\t\t} else {\n\t\t\tdt = dtype;\n\t\t}\n\t\tif ( rand === rand1 ) {\n\t\t\tassign = assign1;\n\t\t\tRandom = BinaryRandom;\n\t\t} else {\n\t\t\tassign = assign2;\n\t\t\tRandom = NullaryRandom;\n\t\t}\n\t\trandom = new Random( base, dtypes, dt );\n\t\tif ( opts && opts.prng ) {\n\t\t\tsetReadOnly( rand, 'seed', null );\n\t\t\tsetReadOnly( rand, 'seedLength', null );\n\t\t\tsetReadWriteAccessor( rand, 'state', constantFunction( null ), noop );\n\t\t\tsetReadOnly( rand, 'stateLength', null );\n\t\t\tsetReadOnly( rand, 'byteLength', null );\n\t\t} else {\n\t\t\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\t\t\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\t\t\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\t\t\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\t\t\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\t\t}\n\t\tsetReadOnly( rand, 'PRNG', base.PRNG );\n\t\tsetReadOnly( rand, 'assign', assign );\n\t\treturn rand;\n\n\t\t/**\n\t\t* Returns an array of pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} len - output array length\n\t\t* @param {*} param1 - first PRNG parameter\n\t\t* @param {*} param2 - second PRNG parameter\n\t\t* @param {Options} [options] - function options\n\t\t* @param {string} [options.dtype] - output array data type\n\t\t* @throws {TypeError} first argument must be a nonnegative integer\n\t\t* @throws {TypeError} options argument must be an object\n\t\t* @throws {TypeError} must provide valid options\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction rand1( len, param1, param2, options ) {\n\t\t\tif ( arguments.length < 4 ) {\n\t\t\t\treturn random.generate( len, param1, param2 );\n\t\t\t}\n\t\t\treturn random.generate( len, param1, param2, options );\n\t\t}\n\n\t\t/**\n\t\t* Returns an array of pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} len - output array length\n\t\t* @param {Options} [options] - function options\n\t\t* @param {string} [options.dtype] - output array data type\n\t\t* @throws {TypeError} first argument must be a nonnegative integer\n\t\t* @throws {TypeError} options argument must be an object\n\t\t* @throws {TypeError} must provide valid options\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction rand2( len, options ) {\n\t\t\tif ( arguments.length < 2 ) {\n\t\t\t\treturn random.generate( len );\n\t\t\t}\n\t\t\treturn random.generate( len, options );\n\t\t}\n\n\t\t/**\n\t\t* Fills an array with pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {*} param1 - first PRNG parameter\n\t\t* @param {*} param2 - second PRNG parameter\n\t\t* @param {Collection} out - output array\n\t\t* @throws {TypeError} third argument must be a collection\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction assign1( param1, param2, out ) {\n\t\t\treturn random.assign( param1, param2, out );\n\t\t}\n\n\t\t/**\n\t\t* Fills an array with pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {Collection} out - output array\n\t\t* @throws {TypeError} first argument must be a collection\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction assign2( out ) {\n\t\t\treturn random.assign( out );\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} seed\n\t\t*/\n\t\tfunction getSeed() {\n\t\t\treturn rand.PRNG.seed;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} seed length\n\t\t*/\n\t\tfunction getSeedLength() {\n\t\t\treturn rand.PRNG.seedLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state length\n\t\t*/\n\t\tfunction getStateLength() {\n\t\t\treturn rand.PRNG.stateLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state size (in bytes).\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state size (in bytes)\n\t\t*/\n\t\tfunction getStateSize() {\n\t\t\treturn rand.PRNG.byteLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the current pseudorandom number generator state.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} current state\n\t\t*/\n\t\tfunction getState() {\n\t\t\treturn rand.PRNG.state;\n\t\t}\n\n\t\t/**\n\t\t* Sets the pseudorandom number generator state.\n\t\t*\n\t\t* @private\n\t\t* @param {*} s - generator state\n\t\t* @throws {Error} must provide a valid state\n\t\t*/\n\t\tfunction setState( s ) {\n\t\t\trand.PRNG.state = s;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = createFactory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a factory function for generating pseudorandom values drawn from a binary PRNG.\n*\n* @module @stdlib/random/array/tools/binary-factory\n*\n* @example\n* var arcsine = require( '@stdlib/random/base/arcsine' );\n* var binaryFactory = require( '@stdlib/random/array/tools/binary-factory' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var factory = binaryFactory( arcsine, dtypes, 'float64' );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var x = random( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar UINT32_MAX = require( '@stdlib/constants/uint32/max' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\nvar MAX = UINT32_MAX - 1;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom integer on the interval \\\\( [1, 2^{32}-1) \\\\).\n*\n* @private\n* @returns {PositiveInteger} pseudorandom integer\n*\n* @example\n* var v = randuint32();\n* // returns <number>\n*/\nfunction randuint32() {\n\tvar v = floor( 1.0 + (MAX*Math.random()) ); // eslint-disable-line stdlib/no-builtin-math\n\treturn v >>> 0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = randuint32;\n", "/* eslint-disable max-lines, max-len */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code and copyright notice are from the [source implementation][mt19937]. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without\n* modification, are permitted provided that the following conditions\n* are met:\n*\n*   1. Redistributions of source code must retain the above copyright\n*      notice, this list of conditions and the following disclaimer.\n*\n*   2. Redistributions in binary form must reproduce the above copyright\n*      notice, this list of conditions and the following disclaimer in the\n*      documentation and/or other materials provided with the distribution.\n*\n*   3. The names of its contributors may not be used to endorse or promote\n*      products derived from this software without specific prior written\n*      permission.\n*\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n* A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n* ```\n*\n* [mt19937]: http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.c\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar isUint32Array = require( '@stdlib/assert/is-uint32array' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar FLOAT64_MAX_SAFE_INTEGER = require( '@stdlib/constants/float64/max-safe-integer' );\nvar UINT32_MAX = require( '@stdlib/constants/uint32/max' );\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar max = require( '@stdlib/math/base/special/max' );\nvar umul = require( '@stdlib/math/base/ops/umul' );\nvar gcopy = require( '@stdlib/blas/base/gcopy' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar randuint32 = require( './rand_uint32.js' );\n\n\n// VARIABLES //\n\n// Define the size of the state array (see refs):\nvar N = 624;\n\n// Define a (magic) constant used for indexing into the state array:\nvar M = 397;\n\n// Define the maximum seed: 11111111111111111111111111111111\nvar MAX_SEED = UINT32_MAX >>> 0; // asm type annotation\n\n// For seed arrays, define an initial state (magic) constant: 19650218 => 00000001001010111101011010101010\nvar SEED_ARRAY_INIT_STATE = 19650218 >>> 0; // asm type annotation\n\n// Define a mask for the most significant `w-r` bits, where `w` is the word size (32 bits) and `r` is the separation point of one word (see refs): 2147483648 => 0x80000000 => 10000000000000000000000000000000\nvar UPPER_MASK = 0x80000000 >>> 0; // asm type annotation\n\n// Define a mask for the least significant `r` bits (see refs): 2147483647 => 0x7fffffff => 01111111111111111111111111111111\nvar LOWER_MASK = 0x7fffffff >>> 0; // asm type annotation\n\n// Define a multiplier (see Knuth TAOCP Vol2. 3rd Ed. P.106): 1812433253 => 01101100000001111000100101100101\nvar KNUTH_MULTIPLIER = 1812433253 >>> 0; // asm type annotation\n\n// Define a (magic) multiplier: 1664525 => 00000000000110010110011000001101\nvar MAGIC_MULTIPLIER_1 = 1664525 >>> 0; // asm type annotation\n\n// Define a (magic) multiplier: 1566083941 => 01011101010110001000101101100101\nvar MAGIC_MULTIPLIER_2 = 1566083941 >>> 0; // asm type annotation\n\n// Define a tempering coefficient: 2636928640 => 0x9d2c5680 => 10011101001011000101011010000000\nvar TEMPERING_COEFFICIENT_1 = 0x9d2c5680 >>> 0; // asm type annotation\n\n// Define a tempering coefficient: 4022730752 => 0xefc60000 => 11101111110001100000000000000000\nvar TEMPERING_COEFFICIENT_2 = 0xefc60000 >>> 0; // asm type annotation\n\n// Define a constant vector `a` (see refs): 2567483615 => 0x9908b0df => 10011001000010001011000011011111\nvar MATRIX_A = 0x9908b0df >>> 0; // asm type annotation\n\n// MAG01[x] = x * MATRIX_A; for x = {0,1}\nvar MAG01 = [ 0x0 >>> 0, MATRIX_A >>> 0 ]; // asm type annotation\n\n// Define a normalization constant when generating double-precision floating-point numbers: 2^53 => 9007199254740992\nvar FLOAT64_NORMALIZATION_CONSTANT = 1.0 / ( FLOAT64_MAX_SAFE_INTEGER+1.0 ); // eslint-disable-line id-length\n\n// 2^26: 67108864\nvar TWO_26 = 67108864 >>> 0; // asm type annotation\n\n// 2^32: 2147483648 => 0x80000000 => 10000000000000000000000000000000\nvar TWO_32 = 0x80000000 >>> 0; // asm type annotation\n\n// 1 (as a 32-bit unsigned integer): 1 => 0x1 => 00000000000000000000000000000001\nvar ONE = 0x1 >>> 0; // asm type annotation\n\n// Define the maximum normalized pseudorandom double-precision floating-point number: ( (((2^32-1)>>>5)*2^26)+( (2^32-1)>>>6) ) / 2^53\nvar MAX_NORMALIZED = FLOAT64_MAX_SAFE_INTEGER * FLOAT64_NORMALIZATION_CONSTANT;\n\n// Define the state array schema version:\nvar STATE_ARRAY_VERSION = 1; // NOTE: anytime the state array schema changes, this value should be incremented!!!\n\n// Define the number of sections in the state array:\nvar NUM_STATE_SECTIONS = 3; // state, other, seed\n\n// Define the index offset of the \"state\" section in the state array:\nvar STATE_SECTION_OFFSET = 2; // | version | num_sections | state_length | ...state | other_length | state_index | seed_length | ...seed |\n\n// Define the index offset of the \"other\" section in the state array:\nvar OTHER_SECTION_OFFSET = N + 3; // | version | num_sections | state_length | ...state | other_length | state_index | seed_length | ...seed |\n\n// Define the index offset of the seed section in the state array:\nvar SEED_SECTION_OFFSET = N + 5; // | version | num_sections | state_length | ...state | other_length | state_index | seed_length | ...seed |\n\n// Define the length of the \"fixed\" length portion of the state array:\nvar STATE_FIXED_LENGTH = N + 6; // 1 (version) + 1 (num_sections) + 1 (state_length) + N (state) + 1 (other_length) + 1 (state_index) + 1 (seed_length)\n\n\n// FUNCTIONS //\n\n/**\n* Verifies state array integrity.\n*\n* @private\n* @param {Uint32Array} state - state array\n* @param {boolean} FLG - flag indicating whether the state array was provided as an option (true) or an argument (false)\n* @returns {(Error|null)} an error or `null`\n*/\nfunction verifyState( state, FLG ) {\n\tvar s1;\n\tif ( FLG ) {\n\t\ts1 = 'option';\n\t} else {\n\t\ts1 = 'argument';\n\t}\n\t// The state array must have a minimum length...\n\tif ( state.length < STATE_FIXED_LENGTH+1 ) {\n\t\treturn new RangeError( format( 'invalid %s. `state` array has insufficient length.', s1 ) );\n\t}\n\t// The first element of the state array must equal the supported state array schema version...\n\tif ( state[ 0 ] !== STATE_ARRAY_VERSION ) {\n\t\treturn new RangeError( format( 'invalid %s. `state` array has an incompatible schema version. Expected: `%s`. Actual: `%s.`', s1, STATE_ARRAY_VERSION, state[ 0 ] ) );\n\t}\n\t// The second element of the state array must contain the number of sections...\n\tif ( state[ 1 ] !== NUM_STATE_SECTIONS ) {\n\t\treturn new RangeError( format( 'invalid %s. `state` array has an incompatible number of sections. Expected: `%s`. Actual: `%s`.', s1, NUM_STATE_SECTIONS, state[ 1 ] ) );\n\t}\n\t// The length of the \"state\" section must equal `N`...\n\tif ( state[ STATE_SECTION_OFFSET ] !== N ) {\n\t\treturn new RangeError( format( 'invalid %s. `state` array has an incompatible state length. Expected: `%u`. Actual: `%u`.', s1, N, state[ STATE_SECTION_OFFSET ] ) );\n\t}\n\t// The length of the \"other\" section must equal `1`...\n\tif ( state[ OTHER_SECTION_OFFSET ] !== 1 ) {\n\t\treturn new RangeError( format( 'invalid %s. `state` array has an incompatible section length. Expected: `%u`. Actual: `%u`.', s1, 1, state[ OTHER_SECTION_OFFSET ] ) );\n\t}\n\t// The length of the \"seed\" section much match the empirical length...\n\tif ( state[ SEED_SECTION_OFFSET ] !== state.length-STATE_FIXED_LENGTH ) {\n\t\treturn new RangeError( format( 'invalid %s. `state` array length is incompatible with seed section length. Expected: `%u`. Actual: `%u`.', s1, state.length-STATE_FIXED_LENGTH, state[ SEED_SECTION_OFFSET ] ) );\n\t}\n\treturn null;\n}\n\n/**\n* Returns an initial PRNG state.\n*\n* @private\n* @param {Uint32Array} state - state array\n* @param {PositiveInteger} N - state size\n* @param {uinteger32} s - seed\n* @returns {Uint32Array} state array\n*/\nfunction createState( state, N, s ) {\n\tvar i;\n\n\t// Set the first element of the state array to the provided seed:\n\tstate[ 0 ] = s >>> 0; // equivalent to `s & 0xffffffffUL` in original C implementation\n\n\t// Initialize the remaining state array elements:\n\tfor ( i = 1; i < N; i++ ) {\n\t\t/*\n\t\t* In the original C implementation (see `init_genrand()`),\n\t\t*\n\t\t* ```c\n\t\t* mt[i] = (KNUTH_MULTIPLIER * (mt[i-1] ^ (mt[i-1] >> 30)) + i)\n\t\t* ```\n\t\t*\n\t\t* In order to replicate this in JavaScript, we must emulate C-like multiplication of unsigned 32-bit integers.\n\t\t*/\n\t\ts = state[ i-1 ]>>>0; // asm type annotation\n\t\ts = ( s^(s>>>30) )>>>0; // asm type annotation\n\t\tstate[ i ] = ( umul( s, KNUTH_MULTIPLIER ) + i )>>>0; // asm type annotation\n\t}\n\treturn state;\n}\n\n/**\n* Initializes a PRNG state array according to a seed array.\n*\n* @private\n* @param {Uint32Array} state - state array\n* @param {NonNegativeInteger} N - state array length\n* @param {Collection} seed - seed array\n* @param {NonNegativeInteger} M - seed array length\n* @returns {Uint32Array} state array\n*/\nfunction initState( state, N, seed, M ) {\n\tvar s;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\ti = 1;\n\tj = 0;\n\tfor ( k = max( N, M ); k > 0; k-- ) {\n\t\t/*\n\t\t* In the original C implementation (see `init_by_array()`),\n\t\t*\n\t\t* ```c\n\t\t* mt[i] = (mt[i]^((mt[i-1]^(mt[i-1]>>30))*1664525UL)) + seed[j] + j;\n\t\t* ```\n\t\t*\n\t\t* In order to replicate this in JavaScript, we must emulate C-like multiplication of unsigned 32-bit integers.\n\t\t*/\n\t\ts = state[ i-1 ]>>>0; // asm type annotation\n\t\ts = ( s^(s>>>30) )>>>0; // asm type annotation\n\t\ts = ( umul( s, MAGIC_MULTIPLIER_1 ) )>>>0; // asm type annotation\n\t\tstate[ i ] = ( ((state[i]>>>0)^s) + seed[j] + j )>>>0; /* non-linear */ // asm type annotation\n\n\t\ti += 1;\n\t\tj += 1;\n\t\tif ( i >= N ) {\n\t\t\tstate[ 0 ] = state[ N-1 ];\n\t\t\ti = 1;\n\t\t}\n\t\tif ( j >= M ) {\n\t\t\tj = 0;\n\t\t}\n\t}\n\tfor ( k = N-1; k > 0; k-- ) {\n\t\t/*\n\t\t* In the original C implementation (see `init_by_array()`),\n\t\t*\n\t\t* ```c\n\t\t* mt[i] = (mt[i]^((mt[i-1]^(mt[i-1]>>30))*1566083941UL)) - i;\n\t\t* ```\n\t\t*\n\t\t* In order to replicate this in JavaScript, we must emulate C-like multiplication of unsigned 32-bit integers.\n\t\t*/\n\t\ts = state[ i-1 ]>>>0; // asm type annotation\n\t\ts = ( s^(s>>>30) )>>>0; // asm type annotation\n\t\ts = ( umul( s, MAGIC_MULTIPLIER_2 ) )>>>0; // asm type annotation\n\t\tstate[ i ] = ( ((state[i]>>>0)^s) - i )>>>0; /* non-linear */ // asm type annotation\n\n\t\ti += 1;\n\t\tif ( i >= N ) {\n\t\t\tstate[ 0 ] = state[ N-1 ];\n\t\t\ti = 1;\n\t\t}\n\t}\n\t// Ensure a non-zero initial state array:\n\tstate[ 0 ] = TWO_32; // MSB (most significant bit) is 1\n\n\treturn state;\n}\n\n/**\n* Updates a PRNG's internal state by generating the next `N` words.\n*\n* @private\n* @param {Uint32Array} state - state array\n* @returns {Uint32Array} state array\n*/\nfunction twist( state ) {\n\tvar w;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tk = N - M;\n\tfor ( i = 0; i < k; i++ ) {\n\t\tw = ( state[i]&UPPER_MASK ) | ( state[i+1]&LOWER_MASK );\n\t\tstate[ i ] = state[ i+M ] ^ ( w>>>1 ) ^ MAG01[ w&ONE ];\n\t}\n\tj = N - 1;\n\tfor ( ; i < j; i++ ) {\n\t\tw = ( state[i]&UPPER_MASK ) | ( state[i+1]&LOWER_MASK );\n\t\tstate[ i ] = state[ i-k ] ^ ( w>>>1 ) ^ MAG01[ w&ONE ];\n\t}\n\tw = ( state[j]&UPPER_MASK ) | ( state[0]&LOWER_MASK );\n\tstate[ j ] = state[ M-1 ] ^ ( w>>>1 ) ^ MAG01[ w&ONE ];\n\treturn state;\n}\n\n\n// MAIN //\n\n/**\n* Returns a 32-bit Mersenne Twister pseudorandom number generator.\n*\n* ## Notes\n*\n* -   In contrast to the original C implementation, array seeds of length `1` are considered integer seeds. This ensures that the seed `[ 1234 ]` generates the same output as the seed `1234`. In the original C implementation, the two seeds would yield different output, which is **not** obvious from a user perspective.\n*\n* @param {Options} [options] - options\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} a seed must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integers less than or equal to the maximum unsigned 32-bit integer\n* @throws {RangeError} a numeric seed must be a positive integer less than or equal to the maximum unsigned 32-bit integer\n* @throws {TypeError} state must be a `Uint32Array`\n* @throws {Error} must provide a valid state\n* @throws {TypeError} `copy` option must be a boolean\n* @returns {PRNG} Mersenne Twister PRNG\n*\n* @example\n* var mt19937 = factory();\n*\n* var v = mt19937();\n* // returns <number>\n*\n* @example\n* // Return a seeded Mersenne Twister PRNG:\n* var mt19937 = factory({\n*     'seed': 1234\n* });\n*\n* var v = mt19937();\n* // returns 822569775\n*/\nfunction factory( options ) {\n\tvar STATE;\n\tvar state;\n\tvar opts;\n\tvar seed;\n\tvar slen;\n\tvar err;\n\n\topts = {};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'state' ) ) {\n\t\t\tstate = options.state;\n\t\t\topts.state = true;\n\t\t\tif ( !isUint32Array( state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', state ) );\n\t\t\t}\n\t\t\terr = verifyState( state, true );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tSTATE = state;\n\t\t\t} else {\n\t\t\t\tSTATE = new Uint32Array( state.length );\n\t\t\t\tgcopy( state.length, state, 1, STATE, 1 );\n\t\t\t}\n\t\t\t// Create a state \"view\":\n\t\t\tstate = new Uint32Array( STATE.buffer, STATE.byteOffset+((STATE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), N );\n\n\t\t\t// Create a seed \"view\":\n\t\t\tseed = new Uint32Array( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), state[ SEED_SECTION_OFFSET ] );\n\t\t}\n\t\t// If provided a PRNG state, we ignore the `seed` option...\n\t\tif ( seed === void 0 ) {\n\t\t\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\t\t\tseed = options.seed;\n\t\t\t\topts.seed = true;\n\t\t\t\tif ( isPositiveInteger( seed ) ) {\n\t\t\t\t\tif ( seed > MAX_SEED ) {\n\t\t\t\t\t\tthrow new RangeError( format( 'invalid option. `%s` option must be a positive integer less than or equal to the maximum unsigned 32-bit integer. Option: `%u`.', 'seed', seed ) );\n\t\t\t\t\t}\n\t\t\t\t\tseed >>>= 0; // asm type annotation\n\t\t\t\t} else if ( isCollection( seed ) === false || seed.length < 1 ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', seed ) );\n\t\t\t\t} else if ( seed.length === 1 ) {\n\t\t\t\t\tseed = seed[ 0 ];\n\t\t\t\t\tif ( !isPositiveInteger( seed ) ) {\n\t\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', seed ) );\n\t\t\t\t\t}\n\t\t\t\t\tif ( seed > MAX_SEED ) {\n\t\t\t\t\t\tthrow new RangeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%u`.', 'seed', seed ) );\n\t\t\t\t\t}\n\t\t\t\t\tseed >>>= 0; // asm type annotation\n\t\t\t\t} else {\n\t\t\t\t\tslen = seed.length;\n\t\t\t\t\tSTATE = new Uint32Array( STATE_FIXED_LENGTH+slen );\n\n\t\t\t\t\t// Initialize sections:\n\t\t\t\t\tSTATE[ 0 ] = STATE_ARRAY_VERSION;\n\t\t\t\t\tSTATE[ 1 ] = NUM_STATE_SECTIONS;\n\t\t\t\t\tSTATE[ STATE_SECTION_OFFSET ] = N;\n\t\t\t\t\tSTATE[ OTHER_SECTION_OFFSET ] = 1;\n\t\t\t\t\tSTATE[ OTHER_SECTION_OFFSET+1 ] = N; // state index\n\t\t\t\t\tSTATE[ SEED_SECTION_OFFSET ] = slen;\n\n\t\t\t\t\t// Copy the provided seed array to prevent external mutation, as mutation would lead to an inability to reproduce PRNG values according to the PRNG's stated seed:\n\t\t\t\t\tgcopy.ndarray( slen, seed, 1, 0, STATE, 1, SEED_SECTION_OFFSET+1 );\n\n\t\t\t\t\t// Create a state \"view\":\n\t\t\t\t\tstate = new Uint32Array( STATE.buffer, STATE.byteOffset+((STATE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), N );\n\n\t\t\t\t\t// Create a seed \"view\":\n\t\t\t\t\tseed = new Uint32Array( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), slen );\n\n\t\t\t\t\t// Initialize the internal PRNG state:\n\t\t\t\t\tstate = createState( state, N, SEED_ARRAY_INIT_STATE );\n\t\t\t\t\tstate = initState( state, N, seed, slen );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tseed = randuint32() >>> 0; // asm type annotation\n\t\t\t}\n\t\t}\n\t} else {\n\t\tseed = randuint32() >>> 0; // asm type annotation\n\t}\n\tif ( state === void 0 ) {\n\t\tSTATE = new Uint32Array( STATE_FIXED_LENGTH+1 );\n\n\t\t// Initialize sections:\n\t\tSTATE[ 0 ] = STATE_ARRAY_VERSION;\n\t\tSTATE[ 1 ] = NUM_STATE_SECTIONS;\n\t\tSTATE[ STATE_SECTION_OFFSET ] = N;\n\t\tSTATE[ OTHER_SECTION_OFFSET ] = 1;\n\t\tSTATE[ OTHER_SECTION_OFFSET+1 ] = N; // state index\n\t\tSTATE[ SEED_SECTION_OFFSET ] = 1;\n\t\tSTATE[ SEED_SECTION_OFFSET+1 ] = seed;\n\n\t\t// Create a state \"view\":\n\t\tstate = new Uint32Array( STATE.buffer, STATE.byteOffset+((STATE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), N );\n\n\t\t// Create a seed \"view\":\n\t\tseed = new Uint32Array( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), 1 );\n\n\t\t// Initialize the internal PRNG state:\n\t\tstate = createState( state, N, seed );\n\t}\n\t// Note: property order matters in order to maintain consistency of PRNG \"shape\" (hidden classes).\n\tsetReadOnly( mt19937, 'NAME', 'mt19937' );\n\tsetReadOnlyAccessor( mt19937, 'seed', getSeed );\n\tsetReadOnlyAccessor( mt19937, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( mt19937, 'state', getState, setState );\n\tsetReadOnlyAccessor( mt19937, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( mt19937, 'byteLength', getStateSize );\n\tsetReadOnly( mt19937, 'toJSON', toJSON );\n\tsetReadOnly( mt19937, 'MIN', 0 );\n\tsetReadOnly( mt19937, 'MAX', UINT32_MAX );\n\tsetReadOnly( mt19937, 'normalized', normalized );\n\n\tsetReadOnly( normalized, 'NAME', mt19937.NAME );\n\tsetReadOnlyAccessor( normalized, 'seed', getSeed );\n\tsetReadOnlyAccessor( normalized, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( normalized, 'state', getState, setState );\n\tsetReadOnlyAccessor( normalized, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( normalized, 'byteLength', getStateSize );\n\tsetReadOnly( normalized, 'toJSON', toJSON );\n\tsetReadOnly( normalized, 'MIN', 0.0 );\n\tsetReadOnly( normalized, 'MAX', MAX_NORMALIZED );\n\n\treturn mt19937;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\tvar len = STATE[ SEED_SECTION_OFFSET ];\n\t\treturn gcopy( len, seed, 1, new Uint32Array( len ), 1 );\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn STATE[ SEED_SECTION_OFFSET ];\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn STATE.length;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn STATE.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* ## Notes\n\t*\n\t* -   The PRNG state array is comprised of a preamble followed by `3` sections:\n\t*\n\t*     0.  preamble (version + number of sections)\n\t*     1.  internal PRNG state\n\t*     2.  auxiliary state information\n\t*     3.  PRNG seed\n\t*\n\t* -   The first element of the PRNG state array preamble is the state array schema version.\n\t*\n\t* -   The second element of the PRNG state array preamble is the number of state array sections (i.e., `3`).\n\t*\n\t* -   The first element of each section following the preamble specifies the section length. The remaining section elements comprise the section contents.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\tvar len = STATE.length;\n\t\treturn gcopy( len, STATE, 1, new Uint32Array( len ), 1 );\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* ## Notes\n\t*\n\t* -   If PRNG state is \"shared\" (meaning a state array was provided during PRNG creation and **not** copied) and one sets the generator state to a state array having a different length, the PRNG does **not** update the existing shared state and, instead, points to the newly provided state array. In order to synchronize PRNG output according to the new shared state array, the state array for **each** relevant PRNG must be **explicitly** set.\n\t* -   If PRNG state is \"shared\" and one sets the generator state to a state array of the same length, the PRNG state is updated (along with the state of all other PRNGs sharing the PRNG's state array).\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tvar err;\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a Uint32Array. Value: `%s`.', s ) );\n\t\t}\n\t\terr = verifyState( s, false );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( opts.copy === false ) {\n\t\t\tif ( opts.state && s.length === STATE.length ) {\n\t\t\t\tgcopy( s.length, s, 1, STATE, 1 ); // update current shared state\n\t\t\t} else {\n\t\t\t\tSTATE = s; // point to new shared state\n\t\t\t\topts.state = true; // setting this flag allows updating a shared state even if a state array was not provided at PRNG creation\n\t\t\t}\n\t\t} else {\n\t\t\t// Check if we can reuse allocated memory...\n\t\t\tif ( s.length !== STATE.length ) {\n\t\t\t\tSTATE = new Uint32Array( s.length ); // reallocate\n\t\t\t}\n\t\t\tgcopy( s.length, s, 1, STATE, 1 );\n\t\t}\n\t\t// Create a new state \"view\":\n\t\tstate = new Uint32Array( STATE.buffer, STATE.byteOffset+((STATE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), N );\n\n\t\t// Create a new seed \"view\":\n\t\tseed = new Uint32Array( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), STATE[ SEED_SECTION_OFFSET ] );\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = mt19937.NAME;\n\t\tout.state = typedarray2json( STATE );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n\n\t/**\n\t* Generates a pseudorandom integer on the interval \\\\( [0, 2^{32}) \\\\).\n\t*\n\t* @private\n\t* @returns {uinteger32} pseudorandom integer\n\t*\n\t* @example\n\t* var r = mt19937();\n\t* // returns <number>\n\t*/\n\tfunction mt19937() {\n\t\tvar r;\n\t\tvar i;\n\n\t\t// Retrieve the current state index:\n\t\ti = STATE[ OTHER_SECTION_OFFSET+1 ];\n\n\t\t// Determine whether we need to update the PRNG state:\n\t\tif ( i >= N ) {\n\t\t\tstate = twist( state );\n\t\t\ti = 0;\n\t\t}\n\t\t// Get the next word of \"raw\"/untempered state:\n\t\tr = state[ i ];\n\n\t\t// Update the state index:\n\t\tSTATE[ OTHER_SECTION_OFFSET+1 ] = i + 1;\n\n\t\t// Tempering transform to compensate for the reduced dimensionality of equidistribution:\n\t\tr ^= r >>> 11;\n\t\tr ^= ( r << 7 ) & TEMPERING_COEFFICIENT_1;\n\t\tr ^= ( r << 15 ) & TEMPERING_COEFFICIENT_2;\n\t\tr ^= r >>> 18;\n\n\t\treturn r >>> 0;\n\t}\n\n\t/**\n\t* Generates a pseudorandom number on the interval \\\\( [0, 1) \\\\).\n\t*\n\t* ## Notes\n\t*\n\t* -   The original C implementation credits Isaku Wada for this algorithm (2002/01/09).\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var r = normalized();\n\t* // returns <number>\n\t*/\n\tfunction normalized() {\n\t\tvar x = mt19937() >>> 5;\n\t\tvar y = mt19937() >>> 6;\n\t\treturn ( (x*TWO_26)+y ) * FLOAT64_NORMALIZATION_CONSTANT;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\nvar randuint32 = require( './rand_uint32.js' );\n\n\n// MAIN //\n\n/**\n* Generates a pseudorandom integer on the interval \\\\( [0, 2^{32}) \\\\).\n*\n* ## Method\n*\n* -   When generating normalized double-precision floating-point numbers, we first generate two pseudorandom integers \\\\( x \\\\) and \\\\( y \\\\) on the interval \\\\( [0, 2^{32}) \\\\) for a combined \\\\( 64 \\\\) random bits.\n*\n* -   We would like \\\\( 53 \\\\) random bits to generate a 53-bit precision integer and, thus, want to discard \\\\( 11 \\\\) of the generated bits.\n*\n* -   We do so by discarding \\\\( 5 \\\\) bits from \\\\( x \\\\) and \\\\( 6 \\\\) bits from \\\\( y \\\\).\n*\n* -   Accordingly, \\\\( x \\\\) contains \\\\( 27 \\\\) random bits, which are subsequently shifted left \\\\( 26 \\\\) bits (multiplied by \\\\( 2^{26} \\\\), and \\\\( y \\\\) contains \\\\( 26 \\\\) random bits to fill in the lower \\\\( 26 \\\\) bits. When summed, they combine to comprise \\\\( 53 \\\\) random bits of a double-precision floating-point integer.\n*\n* -   As an example, suppose, for the sake of argument, the 32-bit PRNG generates the maximum unsigned 32-bit integer \\\\( 2^{32}-1 \\\\) twice in a row. Then,\n*\n*     ```javascript\n*     x = 4294967295 >>> 5; // 00000111111111111111111111111111\n*     y = 4294967295 >>> 6; // 00000011111111111111111111111111\n*     ```\n*\n*     Multiplying \\\\( x \\\\) by \\\\( 2^{26} \\\\) returns \\\\( 9007199187632128 \\\\), which, in binary, is\n*\n*     ```binarystring\n*     0 10000110011 11111111111111111111 11111100000000000000000000000000\n*     ```\n*\n*     Adding \\\\( y \\\\) yields \\\\( 9007199254740991 \\\\) (the maximum \"safe\" double-precision floating-point integer value), which, in binary, is\n*\n*     ```binarystring\n*     0 10000110011 11111111111111111111 11111111111111111111111111111111\n*     ```\n*\n* -   Similarly, suppose the 32-bit PRNG generates the following values\n*\n*     ```javascript\n*     x = 1 >>> 5;  // 0 => 00000000000000000000000000000000\n*     y = 64 >>> 6; // 1 => 00000000000000000000000000000001\n*     ```\n*\n*     Multiplying \\\\( x \\\\) by \\\\( 2^{26} \\\\) returns \\\\( 0 \\\\), which, in binary, is\n*\n*     ```binarystring\n*     0 00000000000 00000000000000000000 00000000000000000000000000000000\n*     ```\n*\n*     Adding \\\\( y \\\\) yields \\\\( 1 \\\\), which, in binary, is\n*\n*     ```binarystring\n*     0 01111111111 00000000000000000000 00000000000000000000000000000000\n*     ```\n*\n* -   As different combinations of \\\\( x \\\\) and \\\\( y \\\\) are generated, different combinations of double-precision floating-point exponent and significand bits will be toggled, thus generating pseudorandom double-precision floating-point numbers.\n*\n* ## References\n*\n* -   Matsumoto, Makoto, and Takuji Nishimura. 1998. \"Mersenne Twister: A 623-dimensionally Equidistributed Uniform Pseudo-random Number Generator.\" _ACM Transactions on Modeling and Computer Simulation_ 8 (1). New York, NY, USA: ACM: 3\u201330. doi:[10.1145/272991.272995][@matsumoto:1998a].\n* -   Harase, Shin. 2017. \"Conversion of Mersenne Twister to double-precision floating-point numbers.\" _ArXiv_ abs/1708.06018 (September). <https://arxiv.org/abs/1708.06018>.\n*\n* [@matsumoto:1998a]: https://doi.org/10.1145/272991.272995\n*\n* @function mt19937\n* @type {PRNG}\n* @returns {PositiveInteger} pseudorandom integer\n*\n* @example\n* var v = mt19937();\n* // returns <number>\n*/\nvar mt19937 = factory({\n\t'seed': randuint32()\n});\n\n\n// EXPORTS //\n\nmodule.exports = mt19937;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* A 32-bit Mersenne Twister pseudorandom number generator.\n*\n* @module @stdlib/random/base/mt19937\n*\n* @example\n* var mt19937 = require( '@stdlib/random/base/mt19937' );\n*\n* var v = mt19937();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/mt19937' ).factory;\n*\n* var mt19937 = factory({\n*     'seed': 1234\n* });\n*\n* var v = mt19937();\n* // returns 822569775\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates values provided for minimum and maximum support.\n*\n* @private\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( a, b ) {\n\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', a ) );\n\t}\n\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a number and not NaN. Value: `%s`.', b ) );\n\t}\n\tif ( a >= b ) {\n\t\treturn new RangeError( format( 'invalid argument. Minimum support must be less than maximum support. Value: `[%f, %f]`.', a, b ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar sin = require( '@stdlib/math/base/special/sin' );\nvar HALF_PI = require( '@stdlib/constants/float64/half-pi' );\n\n\n// MAIN //\n\n/**\n* Returns an arcsine distributed pseudorandom number with minimum support `a` and maximum support `b`.\n*\n* @private\n* @param {PRNG} rand - pseudorandom number generator\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} pseudorandom number\n*/\nfunction arcsine( rand, a, b ) {\n\treturn a + ( pow( sin( HALF_PI*rand() ), 2.0 ) * ( b-a ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = arcsine;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar arcsine0 = require( './arcsine.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating arcsine distributed random numbers.\n*\n* @param {number} [a] - minimum support\n* @param {number} [b] - maximum support\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {RangeError} `a` must be less than `b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var arcsine = factory( 0.0, 1.0 );\n*\n* var v = arcsine();\n* // returns <number>\n*\n* @example\n* var arcsine = factory( -3.0, -1.0, {\n*     'seed': 297\n* });\n* var v = arcsine();\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar a;\n\tvar b;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\terr = validate( a, b );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( a === void 0 ) {\n\t\tprng = arcsine2;\n\t} else {\n\t\tprng = arcsine1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'arcsine' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( a === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ a, b ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a arcsine distributed pseudorandom number with minimum support `a` and maximum support `b`.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = arcsine1();\n\t* // returns <number>\n\t*/\n\tfunction arcsine1() {\n\t\treturn arcsine0( rand, a, b );\n\t}\n\n\t/**\n\t* Returns an arcsine distributed pseudorandom number with minimum support `a` and maximum support `b`.\n\t*\n\t* @private\n\t* @param {number} a - minimum support\n\t* @param {number} b - maximum support\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = arcsine2( 0.0, 1.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = arcsine2( 1.0, 0.0 );\n\t* // returns NaN\n\t*/\n\tfunction arcsine2( a, b ) {\n\t\tif (\n\t\t\tisnan( a ) ||\n\t\t\tisnan( b ) ||\n\t\t\ta >= b\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn arcsine0( rand, a, b );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an arcsine distributed pseudorandom number with minimum support `a` and maximum support `b`.\n*\n* @name arcsine\n* @type {PRNG}\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = arcsine( 0.0, 1.0 );\n* // returns <number>\n*/\nvar arcsine = factory();\n\n\n// EXPORTS //\n\nmodule.exports = arcsine;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arcsine distribution pseudorandom numbers.\n*\n* @module @stdlib/random/base/arcsine\n*\n* @example\n* var arcsine = require( '@stdlib/random/base/arcsine' );\n*\n* var v = arcsine( 0.0, 1.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/arcsine' ).factory;\n*\n* var arcsine = factory( -5.0, 5.0, {\n*     'seed': 297\n* });\n*\n* var v = arcsine();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/arcsine' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from an arcsine distribution.\n*\n* @name factory\n* @type {Function}\n* @param {number} [a] - minimum support\n* @param {number} [b] - maximum support\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var arcsine = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = arcsine( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var arcsine = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = arcsine( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from an arcsine distribution.\n*\n* @name arcsine\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = arcsine( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = arcsine( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar arcsine = factory();\n\n\n// EXPORTS //\n\nmodule.exports = arcsine;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from an arcsine distribution.\n*\n* @module @stdlib/random/array/arcsine\n*\n* @example\n* var arcsine = require( '@stdlib/random/array/arcsine' );\n*\n* var arr = arcsine( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arcsine = require( '@stdlib/random/array/arcsine' );\n*\n* var arr = arcsine( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var arcsine = require( '@stdlib/random/array/arcsine' );\n*\n* var rand = arcsine.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var arcsine = require( '@stdlib/random/array/arcsine' );\n*\n* var rand = arcsine.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar contains = require( '@stdlib/array/base/assert/contains' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {string} [options.dtype] - output array data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, dtypes, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', dtypes.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar contains = require( '@stdlib/array/base/assert/contains' );\nvar filledBy = require( '@stdlib/array/base/filled-by' );\nvar unary = require( '@stdlib/strided/base/unary' );\nvar ctors = require( '@stdlib/array/ctors' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Constructor for creating arrays filled with pseudorandom values drawn from a unary PRNG.\n*\n* @constructor\n* @param {Function} prng - unary pseudorandom value generator\n* @param {StringArray} dtypes - list of supported output data types\n* @param {string} dtype - default output data type\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array of strings\n* @throws {TypeError} third argument must be a supported data type\n* @returns {Random} instance\n*\n* @example\n* var exponential = require( '@stdlib/random/base/exponential' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( exponential, dtypes, defaultDType );\n*\n* var v = rand.generate( 10, 2.0 );\n* // returns <Float64Array>\n*/\nfunction Random( prng, dtypes, dtype ) {\n\tif ( !( this instanceof Random ) ) {\n\t\treturn new Random( prng, dtypes, dtype );\n\t}\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\t// TODO: tighten this up by actually validating that `dtypes` contains only recognized/supported dtype strings\n\tif ( !isStringArray( dtypes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of strings. Value: `%s`.', dtypes ) );\n\t}\n\t// Require that the default output array data type be a member of the list of supported output array data types...\n\tif ( !contains( dtypes, dtype ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a supported data type. Value: `%s`.', dtype ) );\n\t}\n\tthis._prng = prng;\n\tthis._dtypes = dtypes;\n\tthis._dtype = dtype;\n\treturn this;\n}\n\n/**\n* Returns an array filled with pseudorandom values drawn from a unary PRNG.\n*\n* @name generate\n* @memberof Random.prototype\n* @type {Function}\n* @param {NonNegativeInteger} len - number of elements\n* @param {*} param1 - PRNG parameter\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Collection} output array\n*\n* @example\n* var exponential = require( '@stdlib/random/base/exponential' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( exponential, dtypes, defaultDType );\n*\n* var v = rand.generate( 10, 2.0 );\n* // returns <Float64Array>\n*/\nsetReadOnly( Random.prototype, 'generate', function generate( len, param1, options ) {\n\tvar ctor;\n\tvar opts;\n\tvar prng;\n\tvar out;\n\tvar err;\n\tvar dt;\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, this._dtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// NOTE: we could alternatively use the PRNG factory function to create a nullary PRNG function which applies parameters for each invocation; however, this would impose a one-time cost which is likely to be rather expensive when generating small arrays. The decision made here avoids this cost, despite a small cost due to repeatedly validating parameters for each generated pseudorandom value. Additionally, the current implementation has the added benefit that it mirrors the underlying PRNG where invalid parameters result in, e.g., a return value of `NaN` (however, realization of this benefit depends on the output array being a floating-point array).\n\tprng = this._prng;\n\tdt = opts.dtype || this._dtype;\n\tif ( dt === 'generic' ) {\n\t\treturn filledBy( len, wrapper );\n\t}\n\tctor = ctors( dt );\n\tout = new ctor( len );\n\tunary( [ [ param1 ], out ], [ len ], [ 0, 1 ], prng );\n\treturn out;\n\n\t/**\n\t* Applies parameters to a pseudorandom value generator function.\n\t*\n\t* @private\n\t* @returns {*} pseudorandom value\n\t*/\n\tfunction wrapper() {\n\t\treturn prng( param1 );\n\t}\n});\n\n/**\n* Fills an array with pseudorandom values drawn from a unary PRNG.\n*\n* @name assign\n* @memberof Random.prototype\n* @type {Function}\n* @param {*} param1 - PRNG parameter\n* @param {Collection} out - output array\n* @throws {TypeError} second argument must be a collection\n* @returns {Collection} output array\n*\n* @example\n* var exponential = require( '@stdlib/random/base/exponential' );\n* var zeros = require( '@stdlib/array/zeros' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( exponential, dtypes, defaultDType );\n*\n* var out = zeros( 10, 'float64' );\n* // returns <Float64Array>\n*\n* var v = rand.assign( 2.0, out );\n* // returns <Float64Array>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nsetReadOnly( Random.prototype, 'assign', function assign( param1, out ) {\n\tif ( !isCollection( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', out ) );\n\t}\n\t// NOTE: we could alternatively use the PRNG factory function to create a nullary PRNG function which applies parameters for each invocation; however, this would impose a one-time cost which is likely to be rather expensive when filling small arrays. The decision made here avoids this cost, despite a small cost due to repeatedly validating parameters for each generated pseudorandom value. Additionally, the current implementation has the added benefit that it mirrors the underlying PRNG where invalid parameters result in, e.g., a return value of `NaN` (however, realization of this benefit depends on the output array being a floating-point array).\n\tunary( [ [ param1 ], out ], [ out.length ], [ 0, 1 ], this._prng );\n\treturn out;\n});\n\n\n// EXPORTS //\n\nmodule.exports = Random;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor for creating arrays filled with pseudorandom values drawn from a unary PRNG.\n*\n* @module @stdlib/random/array/tools/unary\n*\n* @example\n* var exponential = require( '@stdlib/random/base/exponential' );\n* var Random = require( '@stdlib/random/array/tools/unary' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( exponential, dtypes, defaultDType );\n*\n* var v = rand.generate( 10, 2.0 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isMethodIn = require( '@stdlib/assert/is-method-in' );\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar contains = require( '@stdlib/array/base/assert/contains' ).factory;\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar UnaryRandom = require( './../../../../array/tools/unary' );\nvar NullaryRandom = require( './../../../../array/tools/nullary' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns a factory function for generating pseudorandom values drawn from a unary PRNG.\n*\n* @param {Function} prng - unary pseudorandom value generator\n* @param {Function} prng.factory - method which returns a new unary pseudorandom value generator\n* @param {StringArray} dtypes - list of supported output array data types\n* @param {string} dtype - default output array data type\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} first argument must have a `factory` method\n* @throws {TypeError} second argument must be an array of strings\n* @throws {TypeError} third argument must be a supported output array data type\n* @returns {Function} function which returns a function for creating arrays\n*\n* @example\n* var exponential = require( '@stdlib/random/base/exponential' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var factory = createFactory( exponential, dtypes, 'float64' );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var x = random( 10, 2.0 );\n* // returns <Float64Array>\n*\n* @example\n* var exponential = require( '@stdlib/random/base/exponential' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var factory = createFactory( exponential, dtypes, 'float64' );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var x = random( 10, 2.0, {\n*     'dtype': 'float32'\n* });\n* // returns <Float32Array>\n*/\nfunction createFactory( prng, dtypes, dtype ) {\n\tvar isValidDataType;\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\tif ( !isMethodIn( prng, 'factory' ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have a `%s` method.', 'factory' ) );\n\t}\n\t// TODO: tighten this up by actually validating that `dtypes` contains only recognized/supported dtype strings\n\tif ( !isStringArray( dtypes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must an array of strings. Value: `%s`.', dtypes ) );\n\t}\n\t// Require that the default output array data type be a member of the list of supported output array data types...\n\tif ( !contains( dtypes, dtype ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a supported data type. Value: `%s`.', dtype ) );\n\t}\n\tisValidDataType = contains( dtypes );\n\treturn factory;\n\n\t/**\n\t* Returns a function for generating pseudorandom values drawn from a PRNG.\n\t*\n\t* @private\n\t* @param {*} [param1] - PRNG parameter\n\t* @param {Options} [options] - function options\n\t* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n\t* @param {*} [options.seed] - pseudorandom value generator seed\n\t* @param {*} [options.state] - pseudorandom value generator state\n\t* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom value generator state\n\t* @param {string} [options.dtype] - default output array data type\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {Function} function for creating arrays\n\t*/\n\tfunction factory() {\n\t\tvar Random;\n\t\tvar random;\n\t\tvar param1;\n\t\tvar assign;\n\t\tvar nargs;\n\t\tvar base;\n\t\tvar opts;\n\t\tvar rand;\n\t\tvar dt;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs < 1 ) {                              // e.g., factory()\n\t\t\topts = {};\n\t\t\tbase = prng;\n\t\t\trand = rand1;\n\t\t} else if ( nargs > 1 ) {                       // e.g., factory( param1, {} )\n\t\t\tparam1 = arguments[ 0 ];\n\t\t\topts = arguments[ 1 ];\n\t\t\tbase = prng.factory( param1, opts );\n\t\t\trand = rand2;\n\t\t} else if ( isPlainObject( arguments[ 0 ] ) ) { // e.g., factory( {} )\n\t\t\topts = arguments[ 0 ];\n\t\t\tbase = prng.factory( opts );\n\t\t\trand = rand1;\n\t\t} else {                                        // e.g., factory( param1 )\n\t\t\tparam1 = arguments[ 0 ];\n\t\t\topts = {};\n\t\t\tbase = prng.factory( param1 );\n\t\t\trand = rand2;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'dtype' ) ) {\n\t\t\tdt = opts.dtype;\n\t\t\tif ( !isValidDataType( dt ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', dtypes.join( '\", \"' ), dt ) );\n\t\t\t}\n\t\t} else {\n\t\t\tdt = dtype;\n\t\t}\n\t\tif ( rand === rand1 ) {\n\t\t\tassign = assign1;\n\t\t\tRandom = UnaryRandom;\n\t\t} else {\n\t\t\tassign = assign2;\n\t\t\tRandom = NullaryRandom;\n\t\t}\n\t\trandom = new Random( base, dtypes, dt );\n\t\tif ( opts && opts.prng ) {\n\t\t\tsetReadOnly( rand, 'seed', null );\n\t\t\tsetReadOnly( rand, 'seedLength', null );\n\t\t\tsetReadWriteAccessor( rand, 'state', constantFunction( null ), noop );\n\t\t\tsetReadOnly( rand, 'stateLength', null );\n\t\t\tsetReadOnly( rand, 'byteLength', null );\n\t\t} else {\n\t\t\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\t\t\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\t\t\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\t\t\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\t\t\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\t\t}\n\t\tsetReadOnly( rand, 'PRNG', base.PRNG );\n\t\tsetReadOnly( rand, 'assign', assign );\n\t\treturn rand;\n\n\t\t/**\n\t\t* Returns an array of pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} len - output array length\n\t\t* @param {*} param1 - PRNG parameter\n\t\t* @param {Options} [options] - function options\n\t\t* @param {string} [options.dtype] - output array data type\n\t\t* @throws {TypeError} first argument must be a nonnegative integer\n\t\t* @throws {TypeError} options argument must be an object\n\t\t* @throws {TypeError} must provide valid options\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction rand1( len, param1, options ) {\n\t\t\tif ( arguments.length < 3 ) {\n\t\t\t\treturn random.generate( len, param1 );\n\t\t\t}\n\t\t\treturn random.generate( len, param1, options );\n\t\t}\n\n\t\t/**\n\t\t* Returns an array of pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} len - output array length\n\t\t* @param {Options} [options] - function options\n\t\t* @param {string} [options.dtype] - output array data type\n\t\t* @throws {TypeError} first argument must be a nonnegative integer\n\t\t* @throws {TypeError} options argument must be an object\n\t\t* @throws {TypeError} must provide valid options\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction rand2( len, options ) {\n\t\t\tif ( arguments.length < 2 ) {\n\t\t\t\treturn random.generate( len );\n\t\t\t}\n\t\t\treturn random.generate( len, options );\n\t\t}\n\n\t\t/**\n\t\t* Fills an array with pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {*} param1 - PRNG parameter\n\t\t* @param {Collection} out - output array\n\t\t* @throws {TypeError} second argument must be a collection\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction assign1( param1, out ) {\n\t\t\treturn random.assign( param1, out );\n\t\t}\n\n\t\t/**\n\t\t* Fills an array with pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {Collection} out - output array\n\t\t* @throws {TypeError} first argument must be a collection\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction assign2( out ) {\n\t\t\treturn random.assign( out );\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} seed\n\t\t*/\n\t\tfunction getSeed() {\n\t\t\treturn rand.PRNG.seed;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} seed length\n\t\t*/\n\t\tfunction getSeedLength() {\n\t\t\treturn rand.PRNG.seedLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state length\n\t\t*/\n\t\tfunction getStateLength() {\n\t\t\treturn rand.PRNG.stateLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state size (in bytes).\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state size (in bytes)\n\t\t*/\n\t\tfunction getStateSize() {\n\t\t\treturn rand.PRNG.byteLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the current pseudorandom number generator state.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} current state\n\t\t*/\n\t\tfunction getState() {\n\t\t\treturn rand.PRNG.state;\n\t\t}\n\n\t\t/**\n\t\t* Sets the pseudorandom number generator state.\n\t\t*\n\t\t* @private\n\t\t* @param {*} s - generator state\n\t\t* @throws {Error} must provide a valid state\n\t\t*/\n\t\tfunction setState( s ) {\n\t\t\trand.PRNG.state = s;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = createFactory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a factory function for generating pseudorandom values drawn from a unary PRNG.\n*\n* @module @stdlib/random/array/tools/unary-factory\n*\n* @example\n* var exponential = require( '@stdlib/random/base/exponential' );\n* var unaryFactory = require( '@stdlib/random/array/tools/unary-factory' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var factory = unaryFactory( exponential, dtypes, 'float64' );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var x = random( 10, 2.0 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating Bernoulli distributed random numbers.\n*\n* @param {Probability} [p] - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `p` must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var bernoulli = factory( 0.5 );\n* var v = bernoulli();\n* // returns <number>\n*\n* @example\n* var bernoulli = factory( 0.8, {\n*     'seed': 297\n* });\n* var v = bernoulli();\n* // returns <number>\n*\n* @example\n* var bernoulli = factory();\n* var v = bernoulli( 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar p;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if (\n\t\targuments.length === 1 &&\n\t\tisObject( arguments[ 0 ] )\n\t) {\n\t\topts = arguments[ 0 ];\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tp = arguments[ 0 ];\n\t\tif ( !isProbability( p ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a probability. Value: `%s`.', p ) );\n\t\t}\n\t\tif ( arguments.length > 1 ) {\n\t\t\topts = arguments[ 1 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( p === void 0 ) {\n\t\tprng = bernoulli2;\n\t} else {\n\t\tprng = bernoulli1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'bernoulli' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( p === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ p ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Bernoulli distribution with bound parameter `p`.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = bernoulli1();\n\t* // returns <number>\n\t*/\n\tfunction bernoulli1() {\n\t\treturn ( rand() <= p ) ? 1 : 0;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Bernoulli distribution with parameter `p`.\n\t*\n\t* @private\n\t* @param {Probability} p - success probability\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = bernoulli2( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction bernoulli2( p ) {\n\t\tif (\n\t\t\tisnan( p ) ||\n\t\t\tp < 0.0 ||\n\t\t\tp > 1.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ( rand() <= p ) ? 1 : 0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom random number drawn from a Bernoulli distribution with parameter `p`.\n*\n* @name bernoulli\n* @type {PRNG}\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} pseudorandom number\n*\n* @example\n* var v = bernoulli( 0.5 );\n* // returns <number>\n*\n* @example\n* var v = bernoulli( 3.14 );\n* // returns NaN\n*\n* @example\n* var v = bernoulli( -1.0 );\n* // returns NaN\n*\n* @example\n* var v = bernoulli( NaN );\n* // returns NaN\n*/\nvar bernoulli = factory();\n\n\n// EXPORTS //\n\nmodule.exports = bernoulli;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Bernoulli distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/bernoulli\n*\n* @example\n* var bernoulli = require( '@stdlib/random/base/bernoulli' );\n*\n* var v = bernoulli( 0.5 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/bernoulli' ).factory;\n*\n* var bernoulli = factory( 0.3, {\n*     'seed': 297\n* });\n*\n* var v = bernoulli();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/bernoulli' ).factory;\n*\n* var bernoulli = factory({\n*     'seed': 297\n* });\n*\n* var v = bernoulli( 0.5 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unaryFactory = require( './../../../array/tools/unary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/bernoulli' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a Bernoulli distribution.\n*\n* @name factory\n* @type {Function}\n* @param {Probability} [p] - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `p` must be a probability (i.e., a number on the interval [0,1])\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var bernoulli = factory( 0.5 );\n* // returns <Function>\n*\n* var arr = bernoulli( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var bernoulli = factory( 0.5 );\n* // returns <Function>\n*\n* var arr = bernoulli( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = unaryFactory( base, DTYPES, defaults.get( 'dtypes.real' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a Bernoulli distribution.\n*\n* @name bernoulli\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {Probability} p - success probability\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = bernoulli( 10, 0.5 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = bernoulli( 10, 0.5, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar bernoulli = factory();\n\n\n// EXPORTS //\n\nmodule.exports = bernoulli;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a Bernoulli distribution.\n*\n* @module @stdlib/random/array/bernoulli\n*\n* @example\n* var bernoulli = require( '@stdlib/random/array/bernoulli' );\n*\n* var arr = bernoulli( 10, 0.5 );\n* // returns <Float64Array>\n*\n* @example\n* var bernoulli = require( '@stdlib/random/array/bernoulli' );\n*\n* var arr = bernoulli( 10, 0.5, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var bernoulli = require( '@stdlib/random/array/bernoulli' );\n*\n* var rand = bernoulli.factory( 0.5 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var bernoulli = require( '@stdlib/random/array/bernoulli' );\n*\n* var rand = bernoulli.factory( 0.5 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// VARIABLES //\n\n// (R*phi(R) + Pr(X>=R))*sqrt(2\\pi)\nvar V = 9.91256303526217e-3;\n\n\n// MAIN //\n\n/**\n* Returns an array containing coordinates such that each rectangle has the same area.\n*\n* @private\n* @param {PositiveInteger} N - number of rectangles\n* @param {number} rTail - start of right tail\n* @returns {NumberArray} coordinate array\n*\n* @example\n* var X = coordsArray( 128, 3.44 );\n* // returns <Array>\n*/\nfunction coordsArray( N, rTail ) {\n\tvar X;\n\tvar f;\n\tvar i;\n\n\tf = exp( -0.5 * rTail * rTail );\n\n\tX = [];\n\tX.push( V/f ); // bottom block: V / f(R)\n\tX.push( rTail );\n\tfor ( i = 2; i < N; i++ ) {\n\t\tX[ i ] = sqrt( -2.0 * ln( ( V/X[i-1] ) + f ) );\n\t\tf = exp( -0.5 * X[ i ] * X[ i ] );\n\t}\n\tX.push( 0.0 );\n\treturn X;\n}\n\n\n// EXPORTS //\n\nmodule.exports = coordsArray;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array containing the ratio of each pair of consecutive elements in order: `X[ i+1 ] / X[ i ]`.\n*\n* @private\n* @param {NumberArray} X - input array\n* @returns {NumberArray} ratio array\n*\n* @example\n* var R = ratioArray( [ 1.0, 2.0, 5.0 ] );\n* // returns [ 2.0, 2.5 ]\n*/\nfunction ratioArray( X ) {\n\tvar R;\n\tvar i;\n\n\tR = [];\n\tfor ( i = 0; i < X.length-1; i++ ) {\n\t\tR.push( X[ i+1 ] / X[ i ] );\n\t}\n\treturn R;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ratioArray;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Transforms the tail of the normal distribution to the unit interval and then uses rejection technique to generate standard normal variable.\n*\n* ## References\n*\n* -   Marsaglia, George. 1964. \"Generating a Variable from the Tail of the Normal Distribution.\" _Technometrics_ 6 (1): 101\u20132. doi:[10.1080/00401706.1964.10490150](http://dx.doi.org/10.1080/00401706.1964.10490150).\n*\n* @private\n* @param {PRNG} rand - pseudorandom number generator\n* @param {number} rTail - start value of the right tail\n* @param {boolean} isNegative - boolean indicating which side to evaluate\n* @returns {number} standard normal variable\n*/\nfunction sampleTail( rand, rTail, isNegative ) {\n\tvar x;\n\tvar y;\n\tdo {\n\t\tx = ln( rand() ) / rTail;\n\t\ty = ln( rand() );\n\t} while ( -2.0*y < x*x );\n\treturn ( isNegative ) ? x-rTail : rTail-x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sampleTail;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar coordsArray = require( './coords_array.js' );\nvar ratioArray = require( './ratio_array.js' );\nvar sampleTail = require( './sample_tail.js' );\n\n\n// VARIABLES //\n\n// Number of blocks:\nvar NUM_BLOCKS = 128;\n\n// Start of right tail (R):\nvar START_RIGHT_TAIL = 3.442619855899;\n\n// `X` holds coordinates, such that each rectangle has same area:\nvar X = coordsArray( NUM_BLOCKS, START_RIGHT_TAIL );\n\n// `R` holds `X[ i+1 ] / X[ i ]`:\nvar R = ratioArray( X );\n\n// 127 => 0x7F => 00000000000000000000000001111111\nvar LAST_7_BITS_MASK = 127|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator which implements the improved Ziggurat algorithm for generating normally distributed pseudorandom numbers.\n*\n* @private\n* @param {PRNG} randu - PRNG for generating uniformly distributed numbers\n* @param {PRNG} randi - PRNG for generating uniformly distributed integers\n* @returns {number} pseudorandom number\n*/\nfunction wrap( randu, randi ) {\n\treturn randn;\n\n\t/**\n\t* Generates a normally distributed pseudorandom number.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var r = randn();\n\t* // returns <number>\n\t*/\n\tfunction randn() {\n\t\tvar f0;\n\t\tvar f1;\n\t\tvar x2;\n\t\tvar x;\n\t\tvar u;\n\t\tvar i;\n\t\tvar j;\n\t\twhile ( true ) {\n\t\t\tu = ( 2.0*randu() ) - 1.0;\n\t\t\ti = randi() & LAST_7_BITS_MASK;\n\n\t\t\t// First try the rectangular boxes...\n\t\t\tif ( abs( u ) < R[ i ] ) {\n\t\t\t\treturn u * X[ i ];\n\t\t\t}\n\t\t\t// If bottom box, sample from the tail...\n\t\t\tif ( i === 0 ) {\n\t\t\t\treturn sampleTail( randu, START_RIGHT_TAIL, u < 0.0 );\n\t\t\t}\n\t\t\t// Is this a sample from the wedges?\n\t\t\tx = u * X[ i ];\n\t\t\tx2 = x * x;\n\t\t\tj = i + 1;\n\t\t\tf0 = exp( -0.5 * ( (X[ i ]*X[ i ]) - x2 ) );\n\t\t\tf1 = exp( -0.5 * ( (X[ j ]*X[ j ]) - x2 ) );\n\t\t\tif ( f1 + (randu()*(f0-f1)) < 1.0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = wrap;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isUint32Array = require( '@stdlib/assert/is-uint32array' );\nvar mt19937 = require( './../../../base/mt19937' ).factory;\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar UINT32_MAX = require( '@stdlib/constants/uint32/max' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar improvedZiggurat = require( './improved_ziggurat.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator which implements the improved Ziggurat method to generate normally distributed pseudorandom numbers.\n*\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var randn = factory();\n*\n* var r = randn();\n* // returns <number>\n*\n* @example\n* // Return a seeded PRNG:\n* var randn = factory({\n*     'seed': 12345\n* });\n*\n* var r = randn();\n* // returns <number>\n*/\nfunction factory( options ) {\n\tvar randu;\n\tvar randi;\n\tvar randn;\n\tvar opts;\n\n\topts = {\n\t\t'copy': true\n\t};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', options.prng ) );\n\t\t\t}\n\t\t\trandu = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\tif ( opts.state === void 0 ) {\n\t\tif ( randu === void 0 ) {\n\t\t\trandi = mt19937( opts );\n\t\t\trandu = randi.normalized;\n\t\t} else {\n\t\t\trandi = mt19937({\n\t\t\t\t'seed': floor( 1.0 + ( UINT32_MAX*randu() ) ), // allows seeding via an externally seeded PRNG\n\t\t\t\t'copy': opts.copy\n\t\t\t});\n\t\t\topts.seed = null;\n\t\t}\n\t} else {\n\t\trandi = mt19937( opts );\n\t\trandu = randi.normalized;\n\t}\n\trandn = improvedZiggurat( randu, randi );\n\n\tsetReadOnly( randn, 'NAME', 'improved-ziggurat' );\n\tif ( opts.seed === null ) {\n\t\tsetReadOnly( randn, 'seed', null );\n\t\tsetReadOnly( randn, 'seedLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( randn, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( randn, 'seedLength', getSeedLength );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadWriteAccessor( randn, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( randn, 'stateLength', null );\n\t\tsetReadOnly( randn, 'byteLength', null );\n\t\tsetReadOnly( randn, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadWriteAccessor( randn, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( randn, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( randn, 'byteLength', getStateSize );\n\t\tsetReadOnly( randn, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( randn, 'PRNG', randu );\n\n\treturn randn;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn randi.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn randi.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn randi.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn randi.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn randi.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trandi.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = randn.NAME;\n\t\tout.state = typedarray2json( randi.state );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Generates a standard normally distributed random number.\n*\n* ## Method\n*\n* The basic Ziggurat method works as follows:\n*\n*     ```tex\n*     x_{C-1}(r) \\left[ f(0) - f\\left( x_{C-1}(r) \\right) \\right] - V(r) = 0\n*     ```\n*\n*     where\n*\n*     ```tex\n*     V(r) = r \\; f(r) + \\int_r^\\infty \\; f(x) \\; dx\n*     ```\n*\n*     and \\\\( r \\\\) denotes the right-most \\\\( x_1 \\\\).\n*\n* -   We then use the following rejection algorithm:\n*\n*     -   Draw a box \\\\( B_i \\\\) at random with probability \\\\( \\tfrac{1}{C} \\\\).\n*     -   Draw a random number from the box as \\\\( z = U_0 x_i \\\\) for \\\\( i > 0 \\\\) and \\\\( z = U_0 V / f(x_1) \\\\).\n*     -   If \\\\( z < x_{i+1} \\\\), accept \\\\( z \\\\).\n*     -   If \\\\( i = 0 \\\\), accept a \\\\( v \\\\) by transforming the tail of the normal distribution to the unit interval and then use rejection technique by Marsaglia, G. (1964) to generate a standard normal variable. Otherwise, if \\\\( i > 0 \\\\) and \\\\( U_1 \\left[ f(x_i) - f(x_{i+1})\\right] < f(z) - f(x_{i+1}) \\\\) accept \\\\( z \\\\).\n*     -   Go back to the first step.\n*\n* -   The improved version by Doornik (2005) changes step four in order to correct a deficiency of the original Ziggurat algorithm. The updated version requires the generation of two random numbers, a uniform variable drawn from \\\\( U(-1,1) \\\\) and the last seven bits of a random integer.\n*\n* ## References\n*\n* -   Doornik, Jurgen A. 2005. \"An Improved Ziggurat Method to Generate Normal Random Samples.\" <https://www.doornik.com/research/ziggurat.pdf>.\n* -   Marsaglia, George, and Wai Wan Tsang. 2000. \"The Ziggurat Method for Generating Random Variables.\" _Journal of Statistical Software_ 5 (1): 1\u20137. doi:[10.18637/jss.v005.i08](http://dx.doi.org/10.18637/jss.v005.i08).\n* -   Marsaglia, George. 1964. \"Generating a Variable from the Tail of the Normal Distribution.\" _Technometrics_ 6 (1): 101\u20132. doi:[10.1080/00401706.1964.10490150](http://dx.doi.org/10.1080/00401706.1964.10490150).\n*\n* @name randn\n* @type {PRNG}\n* @returns {number} pseudorandom number\n*\n* @example\n* var r = randn();\n* // returns <number>\n*/\nvar randn = factory();\n\n\n// EXPORTS //\n\nmodule.exports = randn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normally distributed pseudorandom numbers using the improved Ziggurat method.\n*\n* @module @stdlib/random/base/improved-ziggurat\n*\n* @example\n* var randn = require( '@stdlib/random/base/improved-ziggurat' );\n*\n* var r = randn();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/improved-ziggurat' ).factory;\n*\n* var randn = factory({\n*     'seed': 12345\n* });\n*\n* var r = randn();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( alpha, beta ) {\n\tif ( !isPositive( alpha ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositive( beta ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ln = require( '@stdlib/math/base/special/ln' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// VARIABLES //\n\nvar ONE_THIRD = 1.0 / 3.0;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a gamma distribution with rate parameter equal to 1.0 and shape parameter equal to `alpha`.\n*\n* @private\n* @param {PRNG} randu - PRNG for uniformly distributed numbers\n* @param {PRNG} randn - PRNG for standard normally distributed numbers\n* @param {PositiveNumber} alpha - shape parameter\n* @returns {PositiveNumber} pseudorandom number\n*/\nfunction standardGamma( randu, randn, alpha ) {\n\tvar flg;\n\tvar x2;\n\tvar v0;\n\tvar v1;\n\tvar c;\n\tvar d;\n\tvar x;\n\tvar s;\n\tvar u;\n\tvar v;\n\n\tif ( alpha < 1.0 ) {\n\t\td = alpha + 1.0 - ONE_THIRD;\n\t\tc = 1.0 / sqrt( 9.0*d );\n\t\ts = pow( randu(), 1.0/alpha );\n\t} else {\n\t\td = alpha - ONE_THIRD;\n\t\tc = 1.0 / sqrt( 9.0*d );\n\t\ts = 1.0;\n\t}\n\tflg = true;\n\twhile ( flg ) {\n\t\tdo {\n\t\t\tx = randn();\n\t\t\tv = 1.0 + (c*x);\n\t\t} while ( v <= 0.0 );\n\t\tv *= v * v;\n\t\tx2 = x * x;\n\t\tv0 = 1.0 - (0.331*x2*x2);\n\t\tv1 = (0.5*x2) + (d*( 1.0-v+ln(v) ));\n\t\tu = randu();\n\t\tif ( u < v0 || ln( u ) < v1 ) {\n\t\t\tflg = false;\n\t\t}\n\t}\n\treturn d * v * s;\n}\n\n\n// EXPORTS //\n\nmodule.exports = standardGamma;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Handles case where `alpha` and `beta` are equal and greater than `1.5`.\n*\n* @private\n* @param {PRNG} randu - PRNG for uniformly distributed numbers\n* @param {PRNG} randn - PRNG for normally distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( randu, randn, alpha ) {\n\tvar flg;\n\tvar s4;\n\tvar A;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar x;\n\tvar y;\n\n\tA = alpha - 1.0;\n\tt = pow( A+A, 0.5 );\n\n\tflg = true;\n\twhile ( flg === true ) {\n\t\ts = randn();\n\t\tx = 0.5 * ( 1.0+(s/t) );\n\t\tif ( x >= 0.0 && x <= 1.0 ) {\n\t\t\tu = randu();\n\t\t\ts4 = pow( s, 4.0 );\n\t\t\ty = (8.0*alpha) - 12.0;\n\t\t\ty = 1.0 - (s4 / y);\n\t\t\tif ( u <= y ) {\n\t\t\t\tflg = false;\n\t\t\t} else {\n\t\t\t\ty += 0.5 * pow( s4/((8.0*alpha)-8.0), 2.0 );\n\t\t\t\tif ( u < y ) {\n\t\t\t\t\ty = A * ln( 4.0*x*(1.0-x) );\n\t\t\t\t\ty += s*s / 2.0;\n\t\t\t\t\tif ( y >= ln( u ) ) {\n\t\t\t\t\t\tflg = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Handles case where both `alpha` and `beta` are greater than `1.0`.\n*\n* @private\n* @param {PRNG} randu - PRNG for uniformly distributed numbers\n* @param {PRNG} randn - PRNG for normally distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( randu, randn, alpha, beta ) {\n\tvar sigma;\n\tvar flg;\n\tvar mu;\n\tvar A;\n\tvar B;\n\tvar C;\n\tvar L;\n\tvar s;\n\tvar u;\n\tvar x;\n\tvar y;\n\n\tA = alpha - 1.0;\n\tB = beta - 1.0;\n\tC = A + B;\n\tL = C * ln( C );\n\tmu = A / C;\n\tsigma = 0.5 / pow( C, 0.5 );\n\n\tflg = true;\n\twhile ( flg === true ) {\n\t\ts = randn();\n\t\tx = mu + (s*sigma);\n\t\tif ( x >= 0.0 && x <= 1.0 ) {\n\t\t\tu = randu();\n\t\t\ty = A * ln( x/A );\n\t\t\ty += B * ln((1.0-x) / B);\n\t\t\ty += L + (0.5*s*s);\n\t\t\tif ( y >= ln( u ) ) {\n\t\t\t\tflg = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Handles general case.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( rand, alpha, beta ) {\n\tvar lx;\n\tvar ly;\n\tvar xy;\n\tvar u;\n\tvar v;\n\tvar x;\n\tvar y;\n\twhile ( true ) {\n\t\tu = rand();\n\t\tv = rand();\n\t\tx = pow( u, 1.0/alpha );\n\t\ty = pow( v, 1.0/beta );\n\t\txy = x + y;\n\t\tif ( xy <= 1.0 ) {\n\t\t\tif ( xy > 0.0 ) {\n\t\t\t\treturn x / ( xy );\n\t\t\t}\n\t\t\tlx = ln( u ) / alpha;\n\t\t\tly = ln( v ) / beta;\n\t\t\tif ( lx > ly ) {\n\t\t\t\tly -= lx;\n\t\t\t\tlx = 0.0;\n\t\t\t} else {\n\t\t\t\tlx -= ly;\n\t\t\t\tly = 0.0;\n\t\t\t}\n\t\t\treturn exp( lx - ln( exp(lx) + exp(ly) ) );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar standardGamma = require( './standard_gamma.js' );\nvar sample1 = require( './sample1.js' );\nvar sample2 = require( './sample2.js' );\nvar sample3 = require( './sample3.js' );\n\n\n// MAIN //\n\n/**\n* Returns a random number drawn from a beta distribution.\n*\n* @private\n* @param {PRNG} randu - pseudorandom number generator for uniformly distributed numbers\n* @param {PRNG} randn - pseudorandom number generator for normally distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( randu, randn, alpha, beta ) {\n\tvar ga;\n\tvar gb;\n\tif ( alpha === beta && alpha > 1.5 ) {\n\t\treturn sample1( randu, randn, alpha );\n\t}\n\tif ( alpha > 1.0 && beta > 1.0 ) {\n\t\treturn sample2( randu, randn, alpha, beta );\n\t}\n\tif ( alpha < 1.0 && beta < 1.0 ) {\n\t\treturn sample3( randu, alpha, beta );\n\t}\n\t// General case of using two gamma random variates:\n\tga = standardGamma( randu, randn, alpha );\n\tgb = standardGamma( randu, randn, beta );\n\treturn ga / ( ga + gb );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randn = require( './../../../base/improved-ziggurat' ).factory;\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar gcopy = require( '@stdlib/blas/base/gcopy' );\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar isUint32Array = require( '@stdlib/assert/is-uint32array' );\nvar assign = require( '@stdlib/object/assign' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar beta0 = require( './beta.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating beta distributed random numbers.\n*\n* @param {PositiveNumber} [alpha] - first shape parameter\n* @param {PositiveNumber} [beta] - second shape parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var beta = factory( 2.0, 1.0 );\n* var v = beta();\n* // returns <number>\n*\n* @example\n* var beta = factory( 2.0, 2.0, {\n*     'seed': 297\n* });\n* var v = beta();\n* // returns <number>\n*/\nfunction factory() {\n\tvar STATE;\n\tvar rnorm;\n\tvar alpha;\n\tvar beta;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar FLG;\n\tvar err;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trand = randu( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t}\n\t\t\topts = assign( {}, opts );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\terr = validate( alpha, beta );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t\t}\n\t\t\t\topts = assign( {}, opts );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trand = randu( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\trnorm = randn({\n\t\t\t'prng': opts.prng\n\t\t});\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rand.state;\n\t\t\trand.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\trnorm = randn({\n\t\t\t'state': STATE,\n\t\t\t'copy': false\n\t\t});\n\t}\n\tif ( alpha === void 0 ) {\n\t\tprng = beta2;\n\t} else {\n\t\tprng = beta1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'beta' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a Uint32Array. Value: `%s`.', s ) );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( alpha === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ alpha, beta ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a random number drawn from a beta distribution with bound parameter values.\n\t*\n\t* @private\n\t* @returns {Probability} pseudorandom number\n\t*\n\t* @example\n\t* var v = beta1();\n\t* // returns <number>\n\t*/\n\tfunction beta1() {\n\t\treturn beta0( rand, rnorm, alpha, beta );\n\t}\n\n\t/**\n\t* Returns a random number drawn from a beta distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - first shape parameter\n\t* @param {PositiveNumber} beta - second shape parameter\n\t* @returns {Probability} pseudorandom number\n\t*\n\t* @example\n\t* var v = beta2( 2.0, 3.0 );\n\t* // returns <number>\n\t*/\n\tfunction beta2( alpha, beta ) {\n\t\tif (\n\t\t\tisnan( alpha ) ||\n\t\t\tisnan( beta ) ||\n\t\t\talpha <= 0.0 ||\n\t\t\tbeta <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn beta0( rand, rnorm, alpha, beta );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Generates a beta distributed random number.\n*\n* ## References\n*\n* -   Ahrens, J.H., and U. Dieter. 1974. \"Computer methods for sampling from gamma, beta, poisson and bionomial distributions.\" _Computing_ 12 (3): 223\u201346. doi:[10.1007/BF02293108](http://dx.doi.org/10.1007/BF02293108).\n* -   J\u00F6hnk, M.D. 1964. \"Erzeugung von Betaverteilten Und Gammaverteilten Zufallszahlen.\" _Metrika_ 8: 5\u201315. <http://eudml.org/doc/175224>.\n*\n* @name beta\n* @type {PRNG}\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*\n* @example\n* var r = beta( 2.0, 5.0 );\n* // returns <number>\n*\n* @example\n* var r = beta( -2.0, 5.0 );\n* // returns NaN\n*/\nvar beta = factory();\n\n\n// EXPORTS //\n\nmodule.exports = beta;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Beta distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/beta\n*\n* @example\n* var beta = require( '@stdlib/random/base/beta' );\n*\n* var v = beta( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/beta' ).factory;\n*\n* var beta = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = beta();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/beta' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a beta distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [alpha] - first shape parameter\n* @param {PositiveNumber} [beta] - second shape parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var beta = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = beta( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var beta = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = beta( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a beta distribution.\n*\n* @name beta\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = beta( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = beta( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar beta = factory();\n\n\n// EXPORTS //\n\nmodule.exports = beta;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a beta distribution.\n*\n* @module @stdlib/random/array/beta\n*\n* @example\n* var beta = require( '@stdlib/random/array/beta' );\n*\n* var arr = beta( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var beta = require( '@stdlib/random/array/beta' );\n*\n* var arr = beta( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var beta = require( '@stdlib/random/array/beta' );\n*\n* var rand = beta.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var beta = require( '@stdlib/random/array/beta' );\n*\n* var rand = beta.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( alpha, beta ) {\n\tif ( !isPositive( alpha ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositive( beta ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a gamma distribution.\n*\n* @private\n* @param {PRNG} randu - PRNG for uniformly distributed numbers\n* @param {PRNG} randn - PRNG for standard normally distributed numbers\n* @param {PositiveNumber} beta - rate parameter\n* @param {PositiveNumber} d - `alpha + 2/3` or `alpha - 1/3`\n* @param {PositiveNumber} c - `1.0 / sqrt( 9.0*d )`\n* @returns {PositiveNumber} pseudorandom number\n*/\nfunction gamma( randu, randn, beta, d, c ) {\n\tvar flg;\n\tvar x2;\n\tvar v0;\n\tvar v1;\n\tvar x;\n\tvar u;\n\tvar v;\n\n\tflg = true;\n\twhile ( flg ) {\n\t\tdo {\n\t\t\tx = randn();\n\t\t\tv = 1.0 + (c*x);\n\t\t} while ( v <= 0.0 );\n\t\tv *= v * v;\n\t\tx2 = x * x;\n\t\tv0 = 1.0 - (0.331*x2*x2);\n\t\tv1 = (0.5*x2) + (d*( 1.0-v+ln(v) ));\n\t\tu = randu();\n\t\tif ( u < v0 || ln( u ) < v1 ) {\n\t\t\tflg = false;\n\t\t}\n\t}\n\treturn (1.0/beta) * d * v;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gamma;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isUint32Array = require( '@stdlib/assert/is-uint32array' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randn = require( './../../../base/improved-ziggurat' ).factory;\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar gcopy = require( '@stdlib/blas/base/gcopy' );\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar gamma0 = require( './gamma.js' );\n\n\n// VARIABLES //\n\nvar ONE_THIRD = 1.0 / 3.0;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating gamma distributed random numbers.\n*\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [beta] - rate parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var gamma = factory( 2.0, 1.0 );\n* var v = gamma();\n* // returns <number>\n*\n* @example\n* var gamma = factory( 2.0, 2.0, {\n*     'seed': 297\n* });\n* var v = gamma();\n* // returns <number>\n*/\nfunction factory() {\n\tvar STATE;\n\tvar alpha;\n\tvar rnorm;\n\tvar beta;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar FLG;\n\tvar err;\n\tvar c;\n\tvar d;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trand = randu( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t}\n\t\t\topts = assign( {}, opts );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\terr = validate( alpha, beta );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t\t}\n\t\t\t\topts = assign( {}, opts );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trand = randu( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\trnorm = randn({\n\t\t\t'prng': opts.prng\n\t\t});\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rand.state;\n\t\t\trand.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\trnorm = randn({\n\t\t\t'state': STATE,\n\t\t\t'copy': false\n\t\t});\n\t}\n\tif ( alpha === void 0 ) {\n\t\tprng = gamma2;\n\t} else {\n\t\tif ( alpha >= 1.0 ) {\n\t\t\tprng = gamma1a;\n\t\t\td = alpha - ONE_THIRD;\n\t\t} else {\n\t\t\tprng = gamma1b;\n\t\t\td = alpha + 1.0 - ONE_THIRD;\n\t\t}\n\t\tc = 1.0 / sqrt( 9.0*d );\n\t}\n\tsetReadOnly( prng, 'NAME', 'gamma' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a Uint32Array. Value: `%s`.', s ) );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( alpha === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ alpha, beta ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a gamma distribution with bound parameters when `alpha >= 1`.\n\t*\n\t* @private\n\t* @returns {PositiveNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = gamma1a();\n\t* // returns <number>\n\t*/\n\tfunction gamma1a() {\n\t\treturn gamma0( rand, rnorm, beta, d, c );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a gamma distribution with bound parameters when `alpha < 1`.\n\t*\n\t* @private\n\t* @returns {PositiveNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = gamma1b();\n\t* // returns <number>\n\t*/\n\tfunction gamma1b() {\n\t\treturn gamma0( rand, rnorm, beta, d, c ) * pow( rand(), 1.0/alpha );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a gamma distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - shape parameter\n\t* @param {PositiveNumber} beta - rate parameter\n\t* @returns {PositiveNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = gamma2( 2.0, 4.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = gamma2( 3.0, 0.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = gamma2( 0.0, 2.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = gamma2( NaN, NaN );\n\t* // returns NaN\n\t*/\n\tfunction gamma2( alpha, beta ) {\n\t\tvar c;\n\t\tvar d;\n\t\tif (\n\t\t\tisnan( alpha ) ||\n\t\t\tisnan( beta ) ||\n\t\t\talpha <= 0.0 ||\n\t\t\tbeta <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( alpha < 1.0 ) {\n\t\t\td = alpha + 1.0 - ONE_THIRD;\n\t\t\tc = 1.0 / sqrt( 9.0*d );\n\t\t\treturn gamma0( rand, rnorm, beta, d, c ) * pow( rand(), 1.0/alpha );\n\t\t}\n\t\td = alpha - ONE_THIRD;\n\t\tc = 1.0 / sqrt( 9.0*d );\n\t\treturn gamma0( rand, rnorm, beta, d, c );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a gamma distribution.\n*\n* ## References\n*\n* -   Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating Gamma Variables.\" _ACM Transactions on Mathematical Software_ 26 (3). New York, NY, USA: ACM: 363\u201372. doi:[10.1145/358407.358414](http://dx.doi.org/10.1145/358407.358414).\n*\n* @name gamma\n* @type {PRNG}\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {PositiveNumber} pseudorandom number\n*\n* @example\n* var v = gamma( 2.0, 4.0 );\n* // returns <number>\n*\n* @example\n* var v = gamma( -2.0, 4.0 );\n* // returns NaN\n*/\nvar gamma = factory();\n\n\n// EXPORTS //\n\nmodule.exports = gamma;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gamma distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/gamma\n*\n* @example\n* var gamma = require( '@stdlib/random/base/gamma' );\n*\n* var v = gamma( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/gamma' ).factory;\n*\n* var gamma = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = gamma();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( alpha, beta ) {\n\tif ( !isPositive( alpha ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositive( beta ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a random number drawn from a beta prime distribution.\n*\n* @private\n* @param {PRNG} rgamma - pseudorandom number generator for gamma distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {PositiveNumber} pseudorandom number\n*/\nfunction sample( rgamma, alpha, beta ) {\n\treturn rgamma( alpha, 1.0 ) / rgamma( beta, 1.0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar gammaFactory = require( './../../../base/gamma' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar betaprime0 = require( './betaprime.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating beta prime distributed random numbers.\n*\n* @param {PositiveNumber} [alpha] - first shape parameter\n* @param {PositiveNumber} [beta] - second shape parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var betaprime = factory( 2.0, 1.0 );\n* var v = betaprime();\n* // returns <number>\n*\n* @example\n* var betaprime = factory( 2.0, 2.0, {\n*     'seed': 297\n* });\n* var v = betaprime();\n* // returns <number>\n*/\nfunction factory() {\n\tvar rgamma;\n\tvar alpha;\n\tvar beta;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\n\tif ( arguments.length === 0 ) {\n\t\trgamma = gammaFactory();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\trgamma = gammaFactory( opts );\n\t} else {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\terr = validate( alpha, beta );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\trgamma = gammaFactory( opts );\n\t\t} else {\n\t\t\trgamma = gammaFactory();\n\t\t}\n\t}\n\tif ( alpha === void 0 ) {\n\t\tprng = betaprime2;\n\t} else {\n\t\tprng = betaprime1;\n\t}\n\trand = rgamma.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'betaprime' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( alpha === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ alpha, beta ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a random number drawn from a beta prime distribution with bound parameter values.\n\t*\n\t* @private\n\t* @returns {PositiveNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = betaprime1();\n\t* // returns <number>\n\t*/\n\tfunction betaprime1() {\n\t\treturn betaprime0( rgamma, alpha, beta );\n\t}\n\n\t/**\n\t* Returns a random number drawn from a beta prime distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - first shape parameter\n\t* @param {PositiveNumber} beta - second shape parameter\n\t* @returns {PositiveNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = betaprime2( 2.0, 3.0 );\n\t* // returns <number>\n\t*/\n\tfunction betaprime2( alpha, beta ) {\n\t\tif (\n\t\t\tisnan( alpha ) ||\n\t\t\tisnan( beta ) ||\n\t\t\talpha <= 0.0 ||\n\t\t\tbeta <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn betaprime0( rgamma, alpha, beta );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Generates a beta prime distributed random number.\n*\n* @name betaprime\n* @type {PRNG}\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {PositiveNumber} pseudorandom number\n*\n* @example\n* var r = betaprime( 2.0, 5.0 );\n* // returns <number>\n*\n* @example\n* var r = betaprime( -2.0, 5.0 );\n* // returns NaN\n*/\nvar betaprime = factory();\n\n\n// EXPORTS //\n\nmodule.exports = betaprime;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Beta prime distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/betaprime\n*\n* @example\n* var betaprime = require( '@stdlib/random/base/betaprime' );\n*\n* var v = betaprime( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/betaprime' ).factory;\n*\n* var betaprime = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = betaprime();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/betaprime' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a beta prime distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [alpha] - first shape parameter\n* @param {PositiveNumber} [beta] - second shape parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var betaprime = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = betaprime( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var betaprime = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = betaprime( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a beta prime distribution.\n*\n* @name betaprime\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = betaprime( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = betaprime( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar betaprime = factory();\n\n\n// EXPORTS //\n\nmodule.exports = betaprime;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a beta prime distribution.\n*\n* @module @stdlib/random/array/betaprime\n*\n* @example\n* var betaprime = require( '@stdlib/random/array/betaprime' );\n*\n* var arr = betaprime( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var betaprime = require( '@stdlib/random/array/betaprime' );\n*\n* var arr = betaprime( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var betaprime = require( '@stdlib/random/array/betaprime' );\n*\n* var rand = betaprime.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var betaprime = require( '@stdlib/random/array/betaprime' );\n*\n* var rand = betaprime.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 10, 0.5 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( n, p ) {\n\tif ( !isPositiveInteger( n ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', p ) );\n\t}\n\tif ( !isProbability( p ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a probability. Value: `%s`.', p ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generates a binomially distributed pseudorandom number by computing the sum of Bernoulli random variables.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {PositiveInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction sample( rand, n, p ) {\n\tvar sum = 0;\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tif ( rand() <= p ) {\n\t\t\tsum += 1;\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// VARIABLES //\n\nvar ONE_12 = 1.0 / 12.0;\nvar ONE_360 = 1.0 / 360.0;\nvar ONE_1260 = 1.0 / 1260.0;\n\n\n// MAIN //\n\n/**\n* Returns a correction for Stirling's approximation.\n*\n* @private\n* @param {NonNegativeInteger} k - input argument\n* @returns {number} correction term\n*\n* @example\n* var c = correction( 0 );\n* // returns 0.08106146679532726\n*/\nfunction correction( k ) {\n\tvar v;\n\tswitch ( k ) {\n\tcase 0:\n\t\treturn 0.08106146679532726;\n\tcase 1:\n\t\treturn 0.04134069595540929;\n\tcase 2:\n\t\treturn 0.02767792568499834;\n\tcase 3:\n\t\treturn 0.02079067210376509;\n\tcase 4:\n\t\treturn 0.01664469118982119;\n\tcase 5:\n\t\treturn 0.01387612882307075;\n\tcase 6:\n\t\treturn 0.01189670994589177;\n\tcase 7:\n\t\treturn 0.01041126526197209;\n\tcase 8:\n\t\treturn 0.009255462182712733;\n\tcase 9:\n\t\treturn 0.008330563433362871;\n\tdefault:\n\t\tk += 1;\n\t\tv = pow( k, 2 );\n\t\treturn (ONE_12 - ((ONE_360 - (ONE_1260/v)) / v)) / k;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = correction;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar sign = require( '@stdlib/math/base/special/signum' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar ln = require( '@stdlib/math/base/special/ln' );\nvar correction = require( './correction.js' );\n\n\n// VARIABLES //\n\nvar ONE_SIXTH = 1.0 / 6.0;\n\n\n// MAIN //\n\n/**\n* Generates a binomially distributed pseudorandom number.\n*\n* ## References\n*\n* -   H\u00F6rmann, Wolfgang. 1993. \"The generation of binomial random variates.\" _Journal of Statistical Computation and Simulation_ 46 (1-2): 101\u201310. doi:[10.1080/00949659308811496][@hormann:1993a].\n*\n* [@hormann:1993a]: http://dx.doi.org/10.1080/00949659308811496\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {PositiveInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction sample( rand, n, p ) {\n\tvar alpha;\n\tvar urvr;\n\tvar snpq;\n\tvar npq;\n\tvar rho;\n\tvar tmp;\n\tvar nm;\n\tvar nr;\n\tvar us;\n\tvar km;\n\tvar nk;\n\tvar vr;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar f;\n\tvar h;\n\tvar i;\n\tvar k;\n\tvar m;\n\tvar q;\n\tvar r;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar x;\n\n\tm = floor( (n + 1) * p );\n\tnm = n - m + 1;\n\n\tq = 1.0 - p;\n\n\tr = p / q;\n\tnr = (n + 1) * r;\n\n\tnpq = n * p * q;\n\tsnpq = sqrt( npq );\n\n\tb = 1.15 + (2.53 * snpq);\n\ta = -0.0873 + (0.0248*b) + (0.01*p);\n\tc = (n*p) + 0.5;\n\n\talpha = (2.83 + (5.1/b)) * snpq;\n\n\tvr = 0.92 - (4.2/b);\n\turvr = 0.86 * vr;\n\n\th = (m + 0.5) * ln( (m+1) / (r*nm) );\n\th += correction( m ) + correction( n-m );\n\n\twhile ( true ) {\n\t\tv = rand();\n\t\tif ( v <= urvr ) {\n\t\t\tu = (v/vr) - 0.43;\n\t\t\tr = (u * ( (2.0*a / (0.5 - abs(u))) + b )) + c;\n\t\t\treturn floor( r );\n\t\t}\n\t\tif ( v >= vr ) {\n\t\t\tu = rand() - 0.5;\n\t\t} else {\n\t\t\tu = (v/vr) - 0.93;\n\t\t\tu = (sign( u ) * 0.5) - u;\n\t\t\tv = vr * rand();\n\t\t}\n\t\tus = 0.5 - abs(u);\n\t\tk = floor( (u * ( (2.0*a/us) + b )) + c );\n\t\tif ( k < 0 || k > n ) {\n\t\t\t// Try again...\n\t\t\tcontinue;\n\t\t}\n\t\tv = v * alpha / ( (a/(us*us)) + b );\n\t\tkm = abs( k - m );\n\t\tif ( km > 15 ) {\n\t\t\tv = ln( v );\n\t\t\trho = km / npq;\n\t\t\ttmp = ( (km/3) + 0.625 ) * km;\n\t\t\ttmp += ONE_SIXTH;\n\t\t\ttmp /= npq;\n\t\t\trho *= tmp + 0.5;\n\t\t\tt = -(km * km) / (2.0 * npq);\n\t\t\tif ( v < t - rho ) {\n\t\t\t\treturn k;\n\t\t\t}\n\t\t\tif ( v <= t + rho ) {\n\t\t\t\tnk = n - k + 1;\n\t\t\t\tx = h + ( (n+1)*ln( nm/nk ) );\n\t\t\t\tx += (k+0.5) * ln( nk*r/(k+1) );\n\t\t\t\tx += -(correction( k ) + correction( n-k ));\n\t\t\t\tif ( v <= x ) {\n\t\t\t\t\treturn k;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tf = 1.0;\n\t\t\tif ( m < k ) {\n\t\t\t\tfor ( i = m; i <= k; i++ ) {\n\t\t\t\t\tf *= (nr/i) - r;\n\t\t\t\t}\n\t\t\t} else if ( m > k ) {\n\t\t\t\tfor ( i = k; i <= m; i++ ) {\n\t\t\t\t\tv *= (nr/i) - r;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( v <= f ) {\n\t\t\t\treturn k;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sample1 = require( './sample1.js' );\nvar sample2 = require( './sample2.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a binomial distribution.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {PositiveInteger} n - number of trials\n* @param {Probability} p - probability of success\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction sample( rand, n, p ) {\n\tif ( p > 0.5 ) {\n\t\treturn n - sample( rand, n, 1.0-p );\n\t}\n\tif ( n*p < 10.0 ) {\n\t\treturn sample1( rand, n, p );\n\t}\n\treturn sample2( rand, n, p );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );\nvar isProbability = require( '@stdlib/math/base/assert/is-probability' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar binomial0 = require( './binomial.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating binomially distributed random numbers.\n*\n* @param {PositiveInteger} [n] - number of trials\n* @param {Probability} [p] - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `n` must be a positive integer\n* @throws {TypeError} `p` must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var binomial = factory( 17, 0.5 );\n* var v = binomial();\n* // returns <number>\n*\n* @example\n* var binomial = factory( 8, 0.8, {\n*     'seed': 297\n* });\n* var v = binomial();\n* // returns <number>\n*\n* @example\n* var binomial = factory();\n* var v = binomial( 20, 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar n;\n\tvar p;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tn = arguments[ 0 ];\n\t\tp = arguments[ 1 ];\n\t\terr = validate( n, p );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( n === void 0 ) {\n\t\tprng = binomial2;\n\t}\n\telse {\n\t\tprng = binomial1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'binomial' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( n === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ n, p ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a random number drawn from a binomial distribution with bound parameter values.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var r = binomial1();\n\t* // returns <number>\n\t*/\n\tfunction binomial1() {\n\t\treturn binomial0( rand, n, p );\n\t}\n\n\t/**\n\t* Returns a random number drawn from a binomial distribution.\n\t*\n\t* @private\n\t* @param {PositiveInteger} n - number of trials\n\t* @param {Probability} p - success probability\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var r = binomial2( 20, 0.8 );\n\t* // returns <number>\n\t*/\n\tfunction binomial2( n, p ) {\n\t\tif (\n\t\t\tisnan( n ) ||\n\t\t\tisnan( p ) ||\n\t\t\t!isPositiveInteger( n ) ||\n\t\t\t!isProbability( p )\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn binomial0( rand, n, p );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Generates a binomially distributed random number.\n*\n* ## Method\n*\n* -   For \\\\(np < 10\\\\), the function generates Bernoulli random variates and returns their sum.\n* -   For \\\\(np \\geq 10\\\\), the function uses the [BTRD algorithm][@hormann:1993a].\n*\n* ## References\n*\n* -   H\u00F6rmann, Wolfgang. 1993. \"The generation of binomial random variates.\" _Journal of Statistical Computation and Simulation_ 46 (1-2): 101\u201310. doi:[10.1080/00949659308811496][@hormann:1993a].\n*\n* [@hormann:1993a]: http://dx.doi.org/10.1080/00949659308811496\n*\n* @name binomial\n* @type {PRNG}\n* @param {PositiveInteger} n - number of trials\n* @param {Probability} p - success probability\n* @throws {TypeError} `n` must be a positive integer\n* @throws {TypeError} `p` must be a probability\n* @returns {NonNegativeInteger} pseudorandom number\n*\n* @example\n* var r = binomial( 20, 0.8 );\n* // returns <number>\n*/\nvar binomial = factory();\n\n\n// EXPORTS //\n\nmodule.exports = binomial;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Binomial distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/binomial\n*\n* @example\n* var binomial = require( '@stdlib/random/base/binomial' );\n*\n* var v = binomial( 20, 0.4 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/binomial' ).factory;\n*\n* var binomial = factory( 90, 0.8, {\n*     'seed': 297\n* });\n*\n* var v = binomial();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/binomial' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a binomial distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveInteger} [n] - number of trials\n* @param {Probability} [p] - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `n` must be a positive integer\n* @throws {TypeError} `p` must be a probability (i.e., a number on the interval [0,1])\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var binomial = factory( 17, 0.5 );\n* // returns <Function>\n*\n* var arr = binomial( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var binomial = factory( 17, 0.5 );\n* // returns <Function>\n*\n* var arr = binomial( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a binomial distribution.\n*\n* @name binomial\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveInteger} n - number of trials\n* @param {Probability} p - success probability\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = binomial( 10, 17, 0.5 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = binomial( 10, 17, 0.5, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar binomial = factory();\n\n\n// EXPORTS //\n\nmodule.exports = binomial;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a binomial distribution.\n*\n* @module @stdlib/random/array/binomial\n*\n* @example\n* var binomial = require( '@stdlib/random/array/binomial' );\n*\n* var arr = binomial( 10, 17, 0.5 );\n* // returns <Float64Array>\n*\n* @example\n* var binomial = require( '@stdlib/random/array/binomial' );\n*\n* var arr = binomial( 10, 17, 0.5, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var binomial = require( '@stdlib/random/array/binomial' );\n*\n* var rand = binomial.factory( 17, 0.5 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var binomial = require( '@stdlib/random/array/binomial' );\n*\n* var rand = binomial.factory( 17, 0.5 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.5 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( x0, gamma ) {\n\tif ( !isNumber( x0 ) || isnan( x0 ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', x0 ) );\n\t}\n\tif ( !isPositive( gamma ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', gamma ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar tan = require( '@stdlib/math/base/special/tan' );\nvar PI = require( '@stdlib/constants/float64/pi' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Cauchy distribution.\n*\n* @private\n* @param {PRNG} randn - PRNG for normally distributed numbers\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {number} pseudorandom number\n*/\nfunction cauchy( randn, x0, gamma ) {\n\treturn x0 + ( gamma*tan( PI*( randn()-0.5 ) ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cauchy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar randn = require( './../../../base/improved-ziggurat' ).factory;\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar cauchy0 = require( './cauchy.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers from a Cauchy distribution.\n*\n* @param {number} [x0] - location parameter\n* @param {PositiveNumber} [gamma] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `x0` must be a number\n* @throws {TypeError} `gamma` argument must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var cauchy = factory( 0.0, 1.0 );\n* var v = cauchy();\n* // returns <number>\n*\n* @example\n* var cauchy = factory( -3.0, 0.5, {\n*     'seed': 297\n* });\n* var v = cauchy();\n* // returns <number>\n*/\nfunction factory() {\n\tvar gamma;\n\tvar rnorm;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar x0;\n\n\tif ( arguments.length === 0 ) {\n\t\trnorm = randn();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trnorm = randn({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trnorm = randn( opts );\n\t\t}\n\t} else {\n\t\tx0 = arguments[ 0 ];\n\t\tgamma = arguments[ 1 ];\n\t\terr = validate( x0, gamma );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trnorm = randn({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trnorm = randn( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trnorm = randn();\n\t\t}\n\t}\n\tif ( x0 === void 0 ) {\n\t\tprng = cauchy2;\n\t} else {\n\t\tprng = cauchy1;\n\t}\n\trand = rnorm.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'cauchy' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( x0 === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ x0, gamma ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns pseudorandom number drawn from a Cauchy distribution with bound parameters `x0` and `gamma`.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = cauchy1();\n\t* // returns <number>\n\t*/\n\tfunction cauchy1() {\n\t\treturn cauchy0( rnorm, x0, gamma );\n\t}\n\n\t/**\n\t* Returns pseudorandom number drawn from a Cauchy distribution.\n\t*\n\t* @private\n\t* @param {number} x0 - location parameter\n\t* @param {PositiveNumber} gamma - scale parameter\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = cauchy2( 0.0, 2.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var r = cauchy2( 1.0, -1.5 );\n\t* // returns NaN\n\t*/\n\tfunction cauchy2( x0, gamma ) {\n\t\tif (\n\t\t\tisnan( x0 ) ||\n\t\t\tisnan( gamma ) ||\n\t\t\tgamma <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn cauchy0( rnorm, x0, gamma );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns pseudorandom number drawn from a Cauchy distribution.\n*\n* @name cauchy\n* @type {PRNG}\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = cauchy( 0.0, 2.0 );\n* // returns <number>\n*\n* @example\n* var v = cauchy( 0.0, -1.0 );\n* // returns NaN\n*/\nvar cauchy = factory();\n\n\n// EXPORTS //\n\nmodule.exports = cauchy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cauchy distribution pseudorandom numbers.\n*\n* @module @stdlib/random/base/cauchy\n*\n* @example\n* var cauchy = require( '@stdlib/random/base/cauchy' );\n*\n* var v = cauchy( 0.5, 1.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/cauchy' ).factory;\n*\n* var cauchy = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = cauchy();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/cauchy' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a Cauchy distribution.\n*\n* @name factory\n* @type {Function}\n* @param {number} [x0] - location parameter\n* @param {PositiveNumber} [gamma] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `x0` must be a number\n* @throws {TypeError} `gamma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var cauchy = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = cauchy( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var cauchy = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = cauchy( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a Cauchy distribution.\n*\n* @name cauchy\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = cauchy( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = cauchy( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar cauchy = factory();\n\n\n// EXPORTS //\n\nmodule.exports = cauchy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a Cauchy distribution.\n*\n* @module @stdlib/random/array/cauchy\n*\n* @example\n* var cauchy = require( '@stdlib/random/array/cauchy' );\n*\n* var arr = cauchy( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var cauchy = require( '@stdlib/random/array/cauchy' );\n*\n* var arr = cauchy( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var cauchy = require( '@stdlib/random/array/cauchy' );\n*\n* var rand = cauchy.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var cauchy = require( '@stdlib/random/array/cauchy' );\n*\n* var rand = cauchy.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar gamma = require( './../../../base/gamma' ).factory;\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating chi-square distributed random numbers.\n*\n* @param {PositiveNumber} [k] - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var chisquare = factory( 2 );\n* var v = chisquare();\n* // returns <number>\n*\n* @example\n* var chisquare = factory( 2, {\n*     'seed': 297\n* });\n* var v = chisquare();\n* // returns <number>\n*/\nfunction factory() {\n\tvar rgamma;\n\tvar rand;\n\tvar opts;\n\tvar prng;\n\tvar k;\n\tif ( arguments.length === 0 ) {\n\t\trgamma = gamma();\n\t} else if (\n\t\targuments.length === 1 &&\n\t\tisObject( arguments[ 0 ] )\n\t) {\n\t\topts = arguments[ 0 ];\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trgamma = gamma({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trgamma = gamma( opts );\n\t\t}\n\t} else {\n\t\tk = arguments[ 0 ];\n\t\tif ( !isPositive( k ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', k ) );\n\t\t}\n\t\tif ( arguments.length > 1 ) {\n\t\t\topts = arguments[ 1 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trgamma = gamma( k/2.0, 0.5, {\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trgamma = gamma( k/2.0, 0.5, opts );\n\t\t\t}\n\t\t} else {\n\t\t\trgamma = gamma( k/2.0, 0.5 );\n\t\t}\n\t}\n\tif ( k === void 0 ) {\n\t\tprng = chisquare2;\n\t} else {\n\t\tprng = chisquare1;\n\t}\n\trand = rgamma.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'chisquare' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( k === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ k ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a random number drawn from a chi-square distribution with bound `k`.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = chisquare1();\n\t* // returns <number>\n\t*/\n\tfunction chisquare1() {\n\t\treturn rgamma();\n\t}\n\n\t/**\n\t* Returns a random number drawn from a chi-square distribution with degrees of freedom `k`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} k - degrees of freedom\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = chisquare2( 2 );\n\t* // returns <number>\n\t*/\n\tfunction chisquare2( k ) {\n\t\tif (\n\t\t\tisnan( k ) ||\n\t\t\tk <= 0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn rgamma( k/2.0, 0.5 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a chi-square distribution with degrees of freedom `k`.\n*\n* @function chisquare\n* @type {PRNG}\n* @param {PositiveNumber} k - degrees of freedom\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = chisquare( 2 );\n* // returns <number>\n*\n* @example\n* var v = chisquare( 0 );\n* // returns NaN\n*\n* @example\n* var v = chisquare( NaN );\n* // returns NaN\n*/\nvar chisquare = factory();\n\n\n// EXPORTS //\n\nmodule.exports = chisquare;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi-square distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/chisquare\n*\n* @example\n* var chisquare = require( '@stdlib/random/base/chisquare' );\n*\n* var v = chisquare( 6 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/chisquare' ).factory;\n*\n* var chisquare = factory( 3, {\n*     'seed': 297\n* });\n*\n* var v = chisquare();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar chisquare = require( './../../../base/chisquare' ).factory;\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating chi distributed random numbers.\n*\n* @param {PositiveNumber} [k] - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var chi = factory( 2 );\n* var v = chi();\n* // returns <number>\n*\n* @example\n* var chi = factory( 2, {\n*     'seed': 297\n* });\n* var v = chi();\n* // returns <number>\n*/\nfunction factory() {\n\tvar rchisq;\n\tvar rand;\n\tvar opts;\n\tvar prng;\n\tvar k;\n\tif ( arguments.length === 0 ) {\n\t\trchisq = chisquare();\n\t} else if (\n\t\targuments.length === 1 &&\n\t\tisObject( arguments[ 0 ] )\n\t) {\n\t\topts = arguments[ 0 ];\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trchisq = chisquare({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trchisq = chisquare( opts );\n\t\t}\n\t} else {\n\t\tk = arguments[ 0 ];\n\t\tif ( !isPositive( k ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', k ) );\n\t\t}\n\t\tif ( arguments.length > 1 ) {\n\t\t\topts = arguments[ 1 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trchisq = chisquare( k, {\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trchisq = chisquare( k, opts );\n\t\t\t}\n\t\t} else {\n\t\t\trchisq = chisquare( k );\n\t\t}\n\t}\n\tif ( k === void 0 ) {\n\t\tprng = chi2;\n\t} else {\n\t\tprng = chi1;\n\t}\n\trand = rchisq.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'chi' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( k === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ k ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a random number drawn from a chi distribution with bound `k`.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = chi1();\n\t* // returns <number>\n\t*/\n\tfunction chi1() {\n\t\treturn sqrt( rchisq() );\n\t}\n\n\t/**\n\t* Returns a random number drawn from a chi distribution with degrees of freedom `k`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} k - degrees of freedom\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = chi2( 2 );\n\t* // returns <number>\n\t*/\n\tfunction chi2( k ) {\n\t\tif (\n\t\t\tisnan( k ) ||\n\t\t\tk <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn sqrt( rchisq( k ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a chi distribution with degrees of freedom `k`.\n*\n* @name chi\n* @type {PRNG}\n* @param {PositiveNumber} k - degrees of freedom\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = chi( 2 );\n* // returns <number>\n*\n* @example\n* var v = chi( 0 );\n* // returns NaN\n*\n* @example\n* var v = chi( NaN );\n* // returns NaN\n*/\nvar chi = factory();\n\n\n// EXPORTS //\n\nmodule.exports = chi;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/chi\n*\n* @example\n* var chi = require( '@stdlib/random/base/chi' );\n*\n* var v = chi( 6 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/chi' ).factory;\n*\n* var chi = factory( 3, {\n*     'seed': 297\n* });\n*\n* var v = chi();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unaryFactory = require( './../../../array/tools/unary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/chi' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a chi distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [k] - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var chi = factory( 2.0 );\n* // returns <Function>\n*\n* var arr = chi( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var chi = factory( 2.0 );\n* // returns <Function>\n*\n* var arr = chi( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = unaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a chi distribution.\n*\n* @name chi\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} k - degrees of freedom\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = chi( 10, 2.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = chi( 10, 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar chi = factory();\n\n\n// EXPORTS //\n\nmodule.exports = chi;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a chi distribution.\n*\n* @module @stdlib/random/array/chi\n*\n* @example\n* var chi = require( '@stdlib/random/array/chi' );\n*\n* var arr = chi( 10, 2.0 );\n* // returns <Float64Array>\n*\n* @example\n* var chi = require( '@stdlib/random/array/chi' );\n*\n* var arr = chi( 10, 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var chi = require( '@stdlib/random/array/chi' );\n*\n* var rand = chi.factory( 2.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var chi = require( '@stdlib/random/array/chi' );\n*\n* var rand = chi.factory( 2.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unaryFactory = require( './../../../array/tools/unary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/chisquare' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a chi-square distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [k] - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var chisquare = factory( 2.0 );\n* // returns <Function>\n*\n* var arr = chisquare( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var chisquare = factory( 2.0 );\n* // returns <Function>\n*\n* var arr = chisquare( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = unaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a chi-square distribution.\n*\n* @name chisquare\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} k - degrees of freedom\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = chisquare( 10, 2.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = chisquare( 10, 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar chisquare = factory();\n\n\n// EXPORTS //\n\nmodule.exports = chisquare;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a chi-square distribution.\n*\n* @module @stdlib/random/array/chisquare\n*\n* @example\n* var chisquare = require( '@stdlib/random/array/chisquare' );\n*\n* var arr = chisquare( 10, 2.0 );\n* // returns <Float64Array>\n*\n* @example\n* var chisquare = require( '@stdlib/random/array/chisquare' );\n*\n* var arr = chisquare( 10, 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var chisquare = require( '@stdlib/random/array/chisquare' );\n*\n* var rand = chisquare.factory( 2.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var chisquare = require( '@stdlib/random/array/chisquare' );\n*\n* var rand = chisquare.factory( 2.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( mu, s ) {\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositive( s ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', s ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar quantile = require( '@stdlib/stats/base/dists/cosine/quantile' );\n\n\n// MAIN //\n\n/**\n* Returns pseudorandom number drawn from a raised cosine distribution using inverse transform sampling.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {number} mu - mean\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} pseudorandom number\n*/\nfunction sample( rand, mu, s ) {\n\treturn quantile( rand(), mu, s );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar cosine0 = require( './cosine.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers from a raised cosine distribution.\n*\n* @param {number} [mu] - mean parameter\n* @param {PositiveNumber} [s] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var cosine = factory( 0.0, 1.0 );\n* var v = cosine();\n* // returns <number>\n*\n* @example\n* var cosine = factory( -3.0, 0.5, {\n*     'seed': 297\n* });\n* var v = cosine();\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar mu;\n\tvar s;\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tmu = arguments[ 0 ];\n\t\ts = arguments[ 1 ];\n\t\terr = validate( mu, s );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( mu === void 0 ) {\n\t\tprng = cosine2;\n\t} else {\n\t\tprng = cosine1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'cosine' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( mu === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ mu, s ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a raised cosine distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = cosine1();\n\t* // returns <number>\n\t*/\n\tfunction cosine1() {\n\t\treturn cosine0( rand, mu, s );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a raised cosine distribution.\n\t*\n\t* @private\n\t* @param {number} mu - mean\n\t* @param {PositiveNumber} s - scale parameter\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = cosine2( 0.0, 2.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = cosine2( 0.0, -1.0 );\n\t* // returns NaN\n\t*/\n\tfunction cosine2( mu, s ) {\n\t\tif (\n\t\t\tisnan( mu ) ||\n\t\t\tisnan( s ) ||\n\t\t\ts <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn cosine0( rand, mu, s );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns pseudorandom number drawn from a raised cosine distribution.\n*\n* @name cosine\n* @type {PRNG}\n* @param {number} mu - mean\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = cosine( 0.0, 2.0 );\n* // returns <number>\n*\n* @example\n* var v = cosine( 0.0, -1.0 );\n* // returns NaN\n*/\nvar cosine = factory();\n\n\n// EXPORTS //\n\nmodule.exports = cosine;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Raised cosine distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/cosine\n*\n* @example\n* var cosine = require( '@stdlib/random/base/cosine' );\n*\n* var v = cosine( 0.5, 1.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/cosine' ).factory;\n* var cosine = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = cosine();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/cosine' ).factory;\n* var cosine = factory({\n*     'seed': 297\n* });\n*\n* var v = cosine( 3.0, 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/cosine' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a raised cosine distribution.\n*\n* @name factory\n* @type {Function}\n* @param {number} [mu] - mean\n* @param {PositiveNumber} [s] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var cosine = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = cosine( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var cosine = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = cosine( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a raised cosine distribution.\n*\n* @name cosine\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {number} mu - mean\n* @param {PositiveNumber} s - scale parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = cosine( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = cosine( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar cosine = factory();\n\n\n// EXPORTS //\n\nmodule.exports = cosine;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a raised cosine distribution.\n*\n* @module @stdlib/random/array/cosine\n*\n* @example\n* var cosine = require( '@stdlib/random/array/cosine' );\n*\n* var arr = cosine( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var cosine = require( '@stdlib/random/array/cosine' );\n*\n* var arr = cosine( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var cosine = require( '@stdlib/random/array/cosine' );\n*\n* var rand = cosine.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var cosine = require( '@stdlib/random/array/cosine' );\n*\n* var rand = cosine.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates values provided for minimum and maximum support.\n*\n* @private\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1, 20 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( a, b ) {\n\tif ( !isInteger( a ) || isnan( a ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be an integer and not NaN. Value: `%s`.', a ) );\n\t}\n\tif ( !isInteger( b ) || isnan( b ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be an integer and not NaN. Value: `%s`.', b ) );\n\t}\n\tif ( a > b ) {\n\t\treturn new RangeError( format( 'invalid argument. Minimum support must be less than or equal to maximum support. Value: `[%d, %d]`.', a, b ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{http://www.boost.org/doc/libs/1_65_1/doc/html/boost/random/uniform_int_distribution.html}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Steven Watanabe 2011.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar MAX_SAFE_INTEGER = require( '@stdlib/constants/float64/max-safe-integer' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a discrete uniform distribution with minimum support `a` and maximum support `b`.\n*\n* @private\n* @param {PRNG} rand - pseudorandom number generator which outputs integer values\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {integer} pseudorandom number\n*/\nfunction discreteUniform( rand, a, b ) {\n\tvar result;\n\tvar RANGE;\n\tvar range;\n\tvar limit;\n\tvar bsize;\n\tvar mult;\n\tvar MIN;\n\tvar MAX;\n\tvar inc;\n\n\trange = b - a;\n\tif ( range === 0 ) {\n\t\treturn a;\n\t}\n\tMIN = rand.MIN;\n\tMAX = rand.MAX;\n\tRANGE = MAX - MIN;\n\tif ( RANGE === range ) {\n\t\treturn ( rand()-MIN ) + a;\n\t}\n\tif ( RANGE < range ) {\n\t\tlimit = 0;\n\t\twhile ( true ) {\n\t\t\t// Avoid overflow...\n\t\t\tif ( range === MAX_SAFE_INTEGER ) { // in JavaScript, we only explicitly have doubles\n\t\t\t\tlimit = floor( range / (RANGE+1) );\n\t\t\t\tif ( range%(RANGE+1) === RANGE ) { // e.g., 5%(2+1) == 2\n\t\t\t\t\tlimit += 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlimit = floor( (range+1) / (RANGE+1) );\n\t\t\t}\n\t\t\t// We consider `result` as expressed base `(RANGE+1)`:\n\t\t\tresult = 0;\n\n\t\t\t// For every power of `(RANGE+1)`, we determine a random factor:\n\t\t\tmult = 1;\n\n\t\t\t// Loop invariants: result < mult && mult <= range\n\t\t\twhile ( mult <= limit ) {\n\t\t\t\t// Note: see first and second post-conditions.\n\t\t\t\tresult += (rand() - MIN) * mult;\n\n\t\t\t\t// Equivalent to (mult * (RANGE+1)) == range+1, but avoids overflow...\n\t\t\t\tif ( mult*RANGE === range-mult+1 ) {\n\t\t\t\t\t// The destination range is an integer power of the generator's range...\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\t// Note: see third post-condition.\n\t\t\t\tmult *= RANGE + 1;\n\t\t\t}\n\t\t\t// range/mult < RANGE+1 (no endless loop)\n\t\t\tinc = discreteUniform( rand, 0, floor( range/mult ) );\n\t\t\tif ( inc > MAX_SAFE_INTEGER/mult ) {\n\t\t\t\t// The multiplication would overflow, so reject immediately...\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tinc *= mult;\n\t\t\tresult += inc;\n\n\t\t\t// NOTE: if we were working with unsigned integers, we would need to check that `result` is NOT less than `inc`, as unsigned integers wrap on overflow. In which case, we would need to reject.\n\n\t\t\tif ( result > range ) {\n\t\t\t\t// Result is too big, so reject...\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn result + a;\n\t\t}\n\t}\n\t// Case: RANGE > range\n\n\t// When determining the bucket size, avoid overflow...\n\tif ( RANGE === MAX_SAFE_INTEGER ) { // in JavaScript, we only explicitly have doubles\n\t\tbsize = floor( RANGE / (range+1) );\n\t\tif ( RANGE%(range+1) === range ) { // e.g., 5%(2+1) == 2\n\t\t\tbsize += 1;\n\t\t}\n\t} else {\n\t\tbsize = floor( (RANGE+1) / (range+1) );\n\t}\n\twhile ( true ) {\n\t\tresult = rand() - MIN;\n\t\tresult = floor( result / bsize );\n\t\tif ( result <= range ) {\n\t\t\treturn result + a;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = discreteUniform;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randi = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isInteger = require( '@stdlib/math/base/assert/is-integer' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar discreteUniform0 = require( './discrete_uniform.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers draw from a discrete uniform distribution.\n*\n* @param {integer} [a] - minimum support\n* @param {integer} [b] - maximum support\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom integers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `a` must be an integer\n* @throws {TypeError} `b` must be an integer\n* @throws {RangeError} `a` must be less than or equal to `b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} provided PRNG must have a valid `MIN` property\n* @throws {TypeError} provided PRNG must have a valid `MAX` property\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var discreteUniform = factory( 1, 10 );\n* var v = discreteUniform();\n* // returns <number>\n*\n* @example\n* var discreteUniform = factory( -30, -1, {\n*     'seed': 297\n* });\n* var v = discreteUniform();\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar a;\n\tvar b;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randi();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t\tif ( !isInteger( rand.MIN ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must have a `MIN` property specifying the minimum possible pseudorandom integer value.', 'prng' ) );\n\t\t\t}\n\t\t\tif ( !isInteger( rand.MAX ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must have a `MAX` property specifying the maximum possible pseudorandom integer value.', 'prng' ) );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randi( opts );\n\t\t}\n\t} else {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\terr = validate( a, b );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t\tif ( !isInteger( rand.MIN ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must have a `MIN` property specifying the minimum possible pseudorandom integer value.', 'prng' ) );\n\t\t\t\t}\n\t\t\t\tif ( !isInteger( rand.MAX ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must have a `MAX` property specifying the maximum possible pseudorandom integer value.', 'prng' ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trand = randi( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randi();\n\t\t}\n\t}\n\tif ( a === void 0 ) {\n\t\tprng = discreteUniform2;\n\t} else {\n\t\tprng = discreteUniform1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'discrete-uniform' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( a === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ a, b ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a discrete uniform distribution with minimum support `a` and maximum support `b`.\n\t*\n\t* @private\n\t* @returns {integer} pseudorandom number\n\t*\n\t* @example\n\t* var v = discreteUniform1();\n\t* // returns <number>\n\t*/\n\tfunction discreteUniform1() {\n\t\treturn discreteUniform0( rand, a, b );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a discrete uniform distribution with minimum support `a` and maximum support `b`.\n\t*\n\t* @private\n\t* @param {integer} a - minimum support\n\t* @param {integer} b - maximum support\n\t* @returns {integer} pseudorandom number\n\t*\n\t* @example\n\t* var v = discreteUniform2( 1, 10 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = discreteUniform2( 1, 0 );\n\t* // returns NaN\n\t*/\n\tfunction discreteUniform2( a, b ) {\n\t\tif (\n\t\t\tisnan( a ) ||\n\t\t\tisnan( b ) ||\n\t\t\t!isInteger( a ) ||\n\t\t\t!isInteger( b ) ||\n\t\t\ta > b\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn discreteUniform0( rand, a, b );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a discrete uniform distribution with minimum support `a` and maximum support `b`.\n*\n* ## Method\n*\n* -   Let \\\\( R \\\\) be a pseudorandom generator (PRNG) which yields integers on the interval \\\\( \\[ A, B ] \\\\).\n*\n* -   If \\\\( a = b \\\\), then \\\\( rv = a \\\\).\n*\n* -   Let \\\\( r1 = b - a \\\\) and \\\\( r2 = B - A \\\\). If \\\\( r2 = r1 \\\\) (likely a rare occurrence), then\n*\n*     ```tex\n*     rv = ( R() - B ) + a\n*     ```\n*\n*     where, for real integer types, operation order is important in order to avoid overflow.\n*\n* -   If \\\\( r2 < r1 \\\\), use rejection sampling to map random variates from \\\\( R \\\\) to a larger domain (e.g., \\\\( {0,1,2,3} \\rightarrow {0,1,2,3,4} \\\\)). For real integer types (and floating-point integer values), we must take extra care to avoid overflow. During sampling, the following conditions will hold:\n*\n*     -   First, consider the post-condition: \\\\( \\textrm{result} \\leq r2 \\\\), thus avoiding overflow.\n*\n*     -   Begin with definition of \\\\( \\textrm{limit} \\\\)\n*\n*         ```tex\n*         \\textrm{limit} = \\lfloor{\\frac{r2+1}{r1+1}\\rfloor\n*         ```\n*\n*         thus,\n*\n*         ```tex\n*         \\textrm{limit}\\ \\cdot (r1+1) \\leq r2+1\n*         ```\n*\n*     -   Let \\\\( m \\\\) be a random factor where the loop condition is defined as\n*\n*         ```tex\n*         m \\leq \\textrm{limit}\n*         ```\n*\n*     -   Let \\\\( \\textrm{result} \\\\) be the generator output, which is expressed base \\\\( r2+1 \\\\) and obeys the loop invariant \\\\( \\textrm{result} < m \\\\).\n*\n*     -   Let \\\\( rv \\\\) be a realization of the PRNG. Then,\n*\n*         ```tex\n*         rv-A \\leq r1\n*         ```\n*\n*         and, by the loop condition, \\\\( m \\leq \\textrm{limit} \\\\).\n*\n*     -   Therefore,\n*\n*         ```tex\n*         m \\cdot (rv - A + 1) \\leq r2+1\n*         ```\n*\n*     -   Rearranging terms,\n*\n*         ```tex\n*         m + m \\cdot (rv - A) \\leq r2+1\n*         ```\n*\n*     -   Since \\\\( \\textrm{result} < m \\\\),\n*\n*         ```tex\n*         \\textrm{result} + m \\cdot (rv - A) < r2+1\n*         ```\n*\n*     -   Next, consider the post-condition: \\\\( \\textrm{result} < m \\cdot (r2+1) \\\\).\n*\n*     -   Since \\\\( \\textrm{result} < m \\\\) and \\\\( rv - A \\leq r1 \\\\),\n*\n*         ```tex\n*         \\textrm{result} + m \\cdot (rv - A) < m + m \\cdot (rv - A)\n*         ```\n*\n*     -   Therefore,\n*\n*         ```tex\n*         \\textrm{result} + m \\cdot (rv - A) < m + m \\cdot r1\n*         ```\n*\n*     -   Therefore,\n*\n*         ```tex\n*         \\textrm{result} + m \\cdot (rv - A) < m \\cdot (r1+1)\n*         ```\n*\n*     -   Next, consider the post-condition: \\\\( m \\leq r2 \\\\).\n*\n*     -   According to the definition of \\\\( \\textrm{limit} \\\\) and the loop condition \\\\( m \\leq \\textrm{limit} \\\\),\n*\n*         ```tex\n*         m \\cdot (r1+1) \\leq r2+1\n*         ```\n*\n*     -   If \\\\( r2 \\\\) is **not** an integer power of the generator range \\\\( r1 \\\\), i.e.,\n*\n*         ```tex\n*         m \\cdot (r1+1) \\neq r2+1\n*         ```\n*\n*         then\n*\n*         ```tex\n*         m \\cdot (r1+1) < r2+1\n*         ```\n*\n*     -   Thus, \\\\( \\textrm{result} < m \\\\).\n*\n*     -   Next, consider the post-condition: \\\\( r2/m < r1+1 \\\\).\n*\n*     -   To show this is true, let us try to prove its opposite. Given the loop condition \\\\( m > \\textrm{limit} \\\\), assume\n*\n*         ```tex\n*         r2/m > r1+1\n*         ```\n*\n*     -   Accordingly,\n*\n*         ```tex\n*         r2 \\geq m \\cdot (r1+1)\n*         ```\n*\n*     -   Hence,\n*\n*         ```tex\n*         r2+1 > m \\cdot (r1+1)\n*         ```\n*\n*     -   Using the loop condition,\n*\n*         ```tex\n*         r2+1 > (\\textrm{limit}+1) \\cdot (r1+1)\n*         ```\n*\n*     -   Rearranging terms,\n*\n*         ```tex\n*         \\frac{r2+1}{r1+1} > \\textrm{limit} + 1\n*         ```\n*\n*     -   Hence,\n*\n*         ```tex\n*         \\textrm{limit} < \\lfloor{\\frac{r2+1}{r1+1}} \\rfloor\n*         ```\n*\n*     -   But the definition of \\\\( \\textrm{limit} \\\\) is\n*\n*         ```tex\n*         \\textrm{limit} = \\lfloor{\\frac{r2+1}{r1+1}}\n*         ```\n*\n*     -   Thus, our assumption cannot be true, providing the post-condition by reductio ad absurdum.\n*\n*     -   Next, consider the post-condition\n*\n*         ```tex\n*         r2 \\leq \\frac{r2}{m} \\cdot m + (m - 1)\n*         ```\n*\n*     -   Recall the identity\n*\n*         ```tex\n*         r2 = \\frac{r2}{m} \\cdot m + r2 \\mod m\n*         ```\n*\n*     -   By the definition of the modulus\n*\n*         ```tex\n*         r2 \\mod m < m\n*         ```\n*\n*     -   Therefore,\n*\n*         ```tex\n*         r2 < \\frac{r2}{m} \\cdot m + m\n*         ```\n*\n*     -   Hence,\n*\n*         ```tex\n*         r2 \\leq \\frac{r2}{m} \\cdot m + (m - 1)\n*         ```\n*\n*     At this point, the maximum value \\\\( \\textrm{result} \\\\) is \\\\( m-1 \\\\). Hence, we can generate numbers that can be at least as large as \\\\( r2 \\\\), but we must be careful to avoid overflow during addition and in the sampling rejection. Anything which overflows is larger than \\\\( r2 \\\\) and can thus be rejected.\n*\n* -   If \\\\( r1 > r2 \\\\), use rejection sampling to map random variates from \\\\( R \\\\) to a smaller domain (e.g., \\\\( {0,1,2,3,4} \\rightarrow {0,1,2,3} \\\\)) by defining \"buckets\" in which multiple random variates in \\\\( R \\\\) map to a single random variate in the smaller domain. We are safe in adding 1 to \\\\( r2 \\\\); however, we need to be careful to not cause overflow when adding 1 to \\\\( r1 \\\\).\n*\n* @name discreteUniform\n* @type {PRNG}\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {integer} pseudorandom number\n*\n* @example\n* var v = discreteUniform( 1, 10 );\n* // returns <number>\n*/\nvar discreteUniform = factory();\n\n\n// EXPORTS //\n\nmodule.exports = discreteUniform;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Discrete uniform distribution pseudorandom numbers.\n*\n* @module @stdlib/random/base/discrete-uniform\n*\n* @example\n* var discreteUniform = require( '@stdlib/random/base/discrete-uniform' );\n*\n* var v = discreteUniform( 1, 10 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/discrete-uniform' ).factory;\n* var discreteUniform = factory( -5, 5, {\n*     'seed': 297\n* });\n*\n* var v = discreteUniform();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/discrete-uniform' ).factory;\n* var discreteUniform = factory({\n*     'seed': 297\n* });\n*\n* var v = discreteUniform( -5, 5 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/discrete-uniform' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a discrete uniform distribution.\n*\n* @name factory\n* @type {Function}\n* @param {integer} [a] - minimum support\n* @param {integer} [b] - maximum support\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `a` must be an integer\n* @throws {TypeError} `b` must be an integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var discreteUniform = factory( -10, 10 );\n* // returns <Function>\n*\n* var arr = discreteUniform( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var discreteUniform = factory( -10, 10 );\n* // returns <Function>\n*\n* var arr = discreteUniform( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a discrete uniform distribution.\n*\n* @name discreteUniform\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = discreteUniform( 10, -10, 10 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = discreteUniform( 10, -10, 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar discreteUniform = factory();\n\n\n// EXPORTS //\n\nmodule.exports = discreteUniform;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a discrete uniform distribution.\n*\n* @module @stdlib/random/array/discrete-uniform\n*\n* @example\n* var discreteUniform = require( '@stdlib/random/array/discrete-uniform' );\n*\n* var arr = discreteUniform( 10, -10, 10 );\n* // returns <Float64Array>\n*\n* @example\n* var discreteUniform = require( '@stdlib/random/array/discrete-uniform' );\n*\n* var arr = discreteUniform( 10, -10, 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var discreteUniform = require( '@stdlib/random/array/discrete-uniform' );\n*\n* var rand = discreteUniform.factory( -10, 10 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var discreteUniform = require( '@stdlib/random/array/discrete-uniform' );\n*\n* var rand = discreteUniform.factory( -10, 10 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1, 2.5 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( k, lambda ) {\n\tif ( !isPositiveInteger( k ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', k ) );\n\t}\n\tif ( !isPositive( lambda ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', lambda ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from an Erlang distribution.\n*\n* @private\n* @param {PRNG} rand - PRNG for generating uniformly distributed numbers\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = erlang();\n* // returns <number>\n*/\nfunction erlang( rand, k, lambda ) {\n\tvar prod;\n\tvar i;\n\tprod = 1.0;\n\tfor ( i = 0; i < k; i++ ) {\n\t\tprod *= rand();\n\t}\n\treturn -(1.0/lambda) * ln( prod );\n}\n\n\n// EXPORTS //\n\nmodule.exports = erlang;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar erlang0 = require( './erlang.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating Erlang distributed random numbers.\n*\n* @param {PositiveInteger} [k] - shape parameter\n* @param {PositiveNumber} [lambda] - rate parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `k` must be a positive integer\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var erlang = factory( 2, 1.0 );\n* var v = erlang();\n* // returns <number>\n*\n* @example\n* var erlang = factory( 2, 2.0, {\n*     'seed': 297\n* });\n* var v = erlang();\n* // returns <number>\n*/\nfunction factory() {\n\tvar lambda;\n\tvar rand;\n\tvar opts;\n\tvar prng;\n\tvar err;\n\tvar k;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tk = arguments[ 0 ];\n\t\tlambda = arguments[ 1 ];\n\t\terr = validate( k, lambda );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( k === void 0 ) {\n\t\tprng = erlang2;\n\t} else {\n\t\tprng = erlang1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'erlang' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( k === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ k, lambda ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from an Erlang distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = erlang1();\n\t* // returns <number>\n\t*/\n\tfunction erlang1() {\n\t\treturn erlang0( rand, k, lambda );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from an Erlang distribution.\n\t*\n\t* @private\n\t* @param {PositiveInteger} k - shape parameter\n\t* @param {PositiveNumber} lambda - rate parameter\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = erlang2( 2, 1.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = erlang2( NaN, 1.0 );\n\t* // returns NaN\n\t*\n\t* v = erlang2( 2, NaN );\n\t* // returns NaN\n\t*\n\t* v = erlang2( 3.14, 1.0 );\n\t* // returns NaN\n\t*\n\t* v = erlang2( 2, 0.0 );\n\t* // returns NaN\n\t*/\n\tfunction erlang2( k, lambda ) {\n\t\tif (\n\t\t\tisnan( k ) ||\n\t\t\tisnan( lambda ) ||\n\t\t\t!isPositiveInteger( k ) ||\n\t\t\tlambda <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn erlang0( rand, k, lambda );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from an Erlang distribution.\n*\n* @name erlang\n* @type {PRNG}\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = erlang( 2, 1.0 );\n* // returns <number>\n*\n* @example\n* var v = erlang( NaN, 1.0 );\n* // returns NaN\n*\n* v = erlang( 2, NaN );\n* // returns NaN\n*\n* v = erlang( 3.14, 1.0 );\n* // returns NaN\n*\n* v = erlang( 3, 0.0 );\n* // returns NaN\n*/\nvar erlang = factory();\n\n\n// EXPORTS //\n\nmodule.exports = erlang;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Erlang distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/erlang\n*\n* @example\n* var erlang = require( '@stdlib/random/base/erlang' );\n*\n* var v = erlang( 3, 2.5 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/erlang' ).factory;\n*\n* var erlang = factory( 8, 5.9, {\n*     'seed': 297\n* });\n*\n* var v = erlang();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/erlang' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from an Erlang distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveInteger} [k] - shape parameter\n* @param {PositiveNumber} [lambda] - rate parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `k` must be a positive integer\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var erlang = factory( 2, 5.0 );\n* // returns <Function>\n*\n* var arr = erlang( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var erlang = factory( 2, 5.0 );\n* // returns <Function>\n*\n* var arr = erlang( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from an Erlang distribution.\n*\n* @name erlang\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = erlang( 10, 2, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = erlang( 10, 2, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar erlang = factory();\n\n\n// EXPORTS //\n\nmodule.exports = erlang;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from an Erlang distribution.\n*\n* @module @stdlib/random/array/erlang\n*\n* @example\n* var erlang = require( '@stdlib/random/array/erlang' );\n*\n* var arr = erlang( 10, 2, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var erlang = require( '@stdlib/random/array/erlang' );\n*\n* var arr = erlang( 10, 2, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var erlang = require( '@stdlib/random/array/erlang' );\n*\n* var rand = erlang.factory( 2, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var erlang = require( '@stdlib/random/array/erlang' );\n*\n* var rand = erlang.factory( 2, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from an exponential distribution.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} pseudorandom number\n*/\nfunction exponential( rand, lambda ) {\n\treturn -ln( 1.0 - rand() ) / lambda;\n}\n\n\n// EXPORTS //\n\nmodule.exports = exponential;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar exponential0 = require( './exponential.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating exponentially distributed random numbers.\n*\n* @param {PositiveNumber} [lambda] - rate parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var exponential = factory( 0.5 );\n* var v = exponential();\n* // returns <number>\n*\n* @example\n* var exponential = factory( 0.8, {\n*     'seed': 297\n* });\n* var v = exponential();\n* // returns ~3.735\n*\n* @example\n* var exponential = factory();\n* var v = exponential( 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar lambda;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if (\n\t\targuments.length === 1 &&\n\t\tisObject( arguments[ 0 ] )\n\t) {\n\t\topts = arguments[ 0 ];\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tlambda = arguments[ 0 ];\n\t\tif ( !isPositive( lambda ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', lambda ) );\n\t\t}\n\t\tif ( arguments.length > 1 ) {\n\t\t\topts = arguments[ 1 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( lambda === void 0 ) {\n\t\tprng = exponential2;\n\t} else {\n\t\tprng = exponential1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'exponential' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( lambda === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ lambda ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from an exponential distribution with bound parameter `lambda`.\n\t*\n\t* @private\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = exponential1();\n\t* // returns <number>\n\t*/\n\tfunction exponential1() {\n\t\treturn exponential0( rand, lambda );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from an exponential distribution with parameter `lambda`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} lambda - rate parameter\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = exponential2( 4.8 );\n\t* // returns <number>\n\t*/\n\tfunction exponential2( lambda ) {\n\t\tif (\n\t\t\tisnan( lambda ) ||\n\t\t\tlambda <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn exponential0( rand, lambda );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from an exponential distribution with parameter `lambda`.\n*\n* @name exponential\n* @type {PRNG}\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} pseudorandom number\n*\n* @example\n* var v = exponential( 4.8 );\n* // returns <number>\n*\n* @example\n* var v = exponential( 0.0 );\n* // returns NaN\n*\n* @example\n* var v = exponential( NaN );\n* // returns NaN\n*/\nvar exponential = factory();\n\n\n// EXPORTS //\n\nmodule.exports = exponential;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Exponentially distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/exponential\n*\n* @example\n* var exponential = require( '@stdlib/random/base/exponential' );\n*\n* var v = exponential( 4.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/exponential' ).factory;\n*\n* var exponential = factory( 4.0, {\n*     'seed': 297\n* });\n*\n* var v = exponential();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unaryFactory = require( './../../../array/tools/unary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/exponential' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from an exponential distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [lambda] - rate parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var exponential = factory( 2.0 );\n* // returns <Function>\n*\n* var arr = exponential( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var exponential = factory( 2.0 );\n* // returns <Function>\n*\n* var arr = exponential( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = unaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from an exponential distribution.\n*\n* @name exponential\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} lambda - rate parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = exponential( 10, 2.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = exponential( 10, 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar exponential = factory();\n\n\n// EXPORTS //\n\nmodule.exports = exponential;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from an exponential distribution.\n*\n* @module @stdlib/random/array/exponential\n*\n* @example\n* var exponential = require( '@stdlib/random/array/exponential' );\n*\n* var arr = exponential( 10, 2.0 );\n* // returns <Float64Array>\n*\n* @example\n* var exponential = require( '@stdlib/random/array/exponential' );\n*\n* var arr = exponential( 10, 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var exponential = require( '@stdlib/random/array/exponential' );\n*\n* var rand = exponential.factory( 2.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var exponential = require( '@stdlib/random/array/exponential' );\n*\n* var rand = exponential.factory( 2.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} d1 - degrees of freedom\n* @param {PositiveNumber} d2 - degrees of freedom\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( d1, d2 ) {\n\tif ( !isPositive( d1 ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', d1 ) );\n\t}\n\tif ( !isPositive( d2 ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', d2 ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns a pseudorandom number from an F distribution with parameters `d1` and `d2`.\n*\n* @private\n* @param {PRNG} rchisq - PRNG for chi-square distributed numbers\n* @param {PositiveNumber} d1 - degrees of freedom\n* @param {PositiveNumber} d2 - degrees of freedom\n* @returns {NonNegativeNumber} pseudorandom number\n*/\nfunction f( rchisq, d1, d2 ) {\n\tvar x1 = rchisq( d1 ) / d1;\n\tvar x2 = rchisq( d2 ) / d2;\n\treturn x1 / x2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = f;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar chisquare = require( './../../../base/chisquare' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar f0 = require( './f.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating F distributed random numbers.\n*\n* @param {PositiveNumber} [d1] - degrees of freedom\n* @param {PositiveNumber} [d2] - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `d1` must be a positive number\n* @throws {TypeError} `d2` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var f = factory( 1.0, 2.0 );\n* var v = f();\n* // returns <number>\n*\n* @example\n* var f = factory( 0.5, 3.0, {\n*     'seed': 297\n* });\n* var v = f();\n* // returns <number>\n*/\nfunction factory() {\n\tvar rchisq;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar d1;\n\tvar d2;\n\n\tif ( arguments.length === 0 ) {\n\t\trchisq = chisquare();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trchisq = chisquare({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trchisq = chisquare( opts );\n\t\t}\n\t} else {\n\t\td1 = arguments[ 0 ];\n\t\td2 = arguments[ 1 ];\n\t\terr = validate( d1, d2 );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trchisq = chisquare({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trchisq = chisquare( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trchisq = chisquare();\n\t\t}\n\t}\n\tif ( d1 === void 0 ) {\n\t\tprng = f2;\n\t} else {\n\t\tprng = f1;\n\t}\n\trand = rchisq.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'f' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( d1 === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ d1, d2 ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number from an F distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = f1();\n\t* // returns <number>\n\t*/\n\tfunction f1() {\n\t\treturn f0( rchisq, d1, d2 );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number from an F distribution with parameters `d1` and `d2`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} d1 - degrees of freedom\n\t* @param {PositiveNumber} d2 - degrees of freedom\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = f2( 3.0, 2.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = f2( 3.0, 0.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = f2( 0.0, 2.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = f2( NaN, NaN );\n\t* // returns NaN\n\t*/\n\tfunction f2( d1, d2 ) {\n\t\tif (\n\t\t\tisnan( d1 ) ||\n\t\t\tisnan( d2 ) ||\n\t\t\td1 <= 0.0 ||\n\t\t\td2 <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn f0( rchisq, d1, d2 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number from an F distribution with parameters `d1` and `d2`.\n*\n* @name f\n* @type {PRNG}\n* @param {PositiveNumber} d1 - degrees of freedom\n* @param {PositiveNumber} d2 - degrees of freedom\n* @returns {NonNegativeNumber} pseudorandom number\n*\n* @example\n* var v = f( 3.0, 2.0 );\n* // returns <number>\n*\n* @example\n* var r = f( -2.0, 5.0 );\n* // returns NaN\n*/\nvar f = factory();\n\n\n// EXPORTS //\n\nmodule.exports = f;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* F distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/f\n*\n* @example\n* var f = require( '@stdlib/random/base/f' );\n*\n* var v = f( 5.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/f' ).factory;\n*\n* var f = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = f();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/f' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from an F distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [d1] - degrees of freedom\n* @param {PositiveNumber} [d2] - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `d1` must be a positive number\n* @throws {TypeError} `d2` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var f = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = f( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var f = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = f( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from an F distribution.\n*\n* @name f\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} d1 - degrees of freedom\n* @param {PositiveNumber} d2 - degrees of freedom\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = f( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = f( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar f = factory();\n\n\n// EXPORTS //\n\nmodule.exports = f;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from an F distribution.\n*\n* @module @stdlib/random/array/f\n*\n* @example\n* var f = require( '@stdlib/random/array/f' );\n*\n* var arr = f( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var f = require( '@stdlib/random/array/f' );\n*\n* var arr = f( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var f = require( '@stdlib/random/array/f' );\n*\n* var rand = f.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var f = require( '@stdlib/random/array/f' );\n*\n* var rand = f.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar contains = require( '@stdlib/array/base/assert/contains' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {string} [options.dtype] - output array data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, dtypes, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', dtypes.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar contains = require( '@stdlib/array/base/assert/contains' );\nvar filledBy = require( '@stdlib/array/base/filled-by' );\nvar ternary = require( '@stdlib/strided/base/ternary' );\nvar ctors = require( '@stdlib/array/ctors' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Constructor for creating arrays filled with pseudorandom values drawn from a ternary PRNG.\n*\n* @constructor\n* @param {Function} prng - ternary pseudorandom value generator\n* @param {StringArray} dtypes - list of supported output data types\n* @param {string} dtype - default output data type\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array of strings\n* @throws {TypeError} third argument must be a supported data type\n* @returns {Random} instance\n*\n* @example\n* var triangular = require( '@stdlib/random/base/triangular' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( triangular, dtypes, defaultDType );\n*\n* var v = rand.generate( 10, 2.0, 5.0, 3.33 );\n* // returns <Float64Array>\n*/\nfunction Random( prng, dtypes, dtype ) {\n\tif ( !( this instanceof Random ) ) {\n\t\treturn new Random( prng, dtypes, dtype );\n\t}\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\t// TODO: tighten this up by actually validating that `dtypes` contains only recognized/supported dtype strings\n\tif ( !isStringArray( dtypes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of strings. Value: `%s`.', dtypes ) );\n\t}\n\t// Require that the default output array data type be a member of the list of supported output array data types...\n\tif ( !contains( dtypes, dtype ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a supported data type. Value: `%s`.', dtype ) );\n\t}\n\tthis._prng = prng;\n\tthis._dtypes = dtypes;\n\tthis._dtype = dtype;\n\treturn this;\n}\n\n/**\n* Returns an array filled with pseudorandom values drawn from a ternary PRNG.\n*\n* @name generate\n* @memberof Random.prototype\n* @type {Function}\n* @param {NonNegativeInteger} len - number of elements\n* @param {*} param1 - first PRNG parameter\n* @param {*} param2 - second PRNG parameter\n* @param {*} param3 - third PRNG parameter\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Collection} output array\n*\n* @example\n* var triangular = require( '@stdlib/random/base/triangular' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( triangular, dtypes, defaultDType );\n*\n* var v = rand.generate( 10, 2.0, 5.0, 3.33 );\n* // returns <Float64Array>\n*/\nsetReadOnly( Random.prototype, 'generate', function generate( len, param1, param2, param3, options ) {\n\tvar ctor;\n\tvar opts;\n\tvar prng;\n\tvar out;\n\tvar err;\n\tvar dt;\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 4 ) {\n\t\terr = validate( opts, this._dtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// NOTE: we could alternatively use the PRNG factory function to create a nullary PRNG function which applies parameters for each invocation; however, this would impose a one-time cost which is likely to be rather expensive when generating small arrays. The decision made here avoids this cost, despite a small cost due to repeatedly validating parameters for each generated pseudorandom value. Additionally, the current implementation has the added benefit that it mirrors the underlying PRNG where invalid parameters result in, e.g., a return value of `NaN` (however, realization of this benefit depends on the output array being a floating-point array).\n\tprng = this._prng;\n\tdt = opts.dtype || this._dtype;\n\tif ( dt === 'generic' ) {\n\t\treturn filledBy( len, wrapper );\n\t}\n\tctor = ctors( dt );\n\tout = new ctor( len );\n\tternary( [ [ param1 ], [ param2 ], [ param3 ], out ], [ len ], [ 0, 0, 0, 1 ], prng ); // eslint-disable-line max-len\n\treturn out;\n\n\t/**\n\t* Applies parameters to a pseudorandom value generator function.\n\t*\n\t* @private\n\t* @returns {*} pseudorandom value\n\t*/\n\tfunction wrapper() {\n\t\treturn prng( param1, param2, param3 );\n\t}\n});\n\n/**\n* Fills an array with pseudorandom values drawn from a ternary PRNG.\n*\n* @name assign\n* @memberof Random.prototype\n* @type {Function}\n* @param {*} param1 - first PRNG parameter\n* @param {*} param2 - second PRNG parameter\n* @param {*} param3 - third PRNG parameter\n* @param {Collection} out - output array\n* @throws {TypeError} fourth argument must be a collection\n* @returns {Collection} output array\n*\n* @example\n* var triangular = require( '@stdlib/random/base/triangular' );\n* var zeros = require( '@stdlib/array/zeros' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( triangular, dtypes, defaultDType );\n*\n* var out = zeros( 10, 'float64' );\n* // returns <Float64Array>\n*\n* var v = rand.assign( 2.0, 5.0, 3.33, out );\n* // returns <Float64Array>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nsetReadOnly( Random.prototype, 'assign', function assign( param1, param2, param3, out ) {\n\tif ( !isCollection( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array-like object. Value: `%s`.', out ) );\n\t}\n\t// NOTE: we could alternatively use the PRNG factory function to create a nullary PRNG function which applies parameters for each invocation; however, this would impose a one-time cost which is likely to be rather expensive when filling small arrays. The decision made here avoids this cost, despite a small cost due to repeatedly validating parameters for each generated pseudorandom value. Additionally, the current implementation has the added benefit that it mirrors the underlying PRNG where invalid parameters result in, e.g., a return value of `NaN` (however, realization of this benefit depends on the output array being a floating-point array).\n\tternary( [ [ param1 ], [ param2 ], [ param3 ], out ], [ out.length ], [ 0, 0, 0, 1 ], this._prng ); // eslint-disable-line max-len\n\treturn out;\n});\n\n\n// EXPORTS //\n\nmodule.exports = Random;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor for creating arrays filled with pseudorandom values drawn from a ternary PRNG.\n*\n* @module @stdlib/random/array/tools/ternary\n*\n* @example\n* var triangular = require( '@stdlib/random/base/triangular' );\n* var Random = require( '@stdlib/random/array/tools/ternary' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( triangular, dtypes, defaultDType );\n*\n* var v = rand.generate( 10, 2.0, 5.0, 3.33 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isMethodIn = require( '@stdlib/assert/is-method-in' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar contains = require( '@stdlib/array/base/assert/contains' ).factory;\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar TernaryRandom = require( './../../../../array/tools/ternary' );\nvar NullaryRandom = require( './../../../../array/tools/nullary' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns a factory function for generating pseudorandom values drawn from a ternary PRNG.\n*\n* @param {Function} prng - ternary pseudorandom value generator\n* @param {Function} prng.factory - method which returns a new ternary pseudorandom value generator\n* @param {StringArray} dtypes - list of supported output array data types\n* @param {string} dtype - default output array data type\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} first argument must have a `factory` method\n* @throws {TypeError} second argument must be an array of strings\n* @throws {TypeError} third argument must be a supported output array data type\n* @returns {Function} function which returns a function for creating arrays\n*\n* @example\n* var triangular = require( '@stdlib/random/base/triangular' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var factory = createFactory( triangular, dtypes, 'float64' );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var x = random( 10, 2.0, 5.0, 3.33 );\n* // returns <Float64Array>\n*\n* @example\n* var triangular = require( '@stdlib/random/base/triangular' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var factory = createFactory( triangular, dtypes, 'float64' );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var x = random( 10, 2.0, 5.0, 3.33, {\n*     'dtype': 'float32'\n* });\n* // returns <Float32Array>\n*/\nfunction createFactory( prng, dtypes, dtype ) {\n\tvar isValidDataType;\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\tif ( !isMethodIn( prng, 'factory' ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have a `%s` method.', 'factory' ) );\n\t}\n\t// TODO: tighten this up by actually validating that `dtypes` contains only recognized/supported dtype strings\n\tif ( !isStringArray( dtypes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must an array of strings. Value: `%s`.', dtypes ) );\n\t}\n\t// Require that the default output array data type be a member of the list of supported output array data types...\n\tif ( !contains( dtypes, dtype ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a supported data type. Value: `%s`.', dtype ) );\n\t}\n\tisValidDataType = contains( dtypes );\n\treturn factory;\n\n\t/**\n\t* Returns a function for generating pseudorandom values drawn from a PRNG.\n\t*\n\t* @private\n\t* @param {*} [param1] - first PRNG parameter\n\t* @param {*} [param2] - second PRNG parameter\n\t* @param {*} [param3] - third PRNG parameter\n\t* @param {Options} [options] - function options\n\t* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n\t* @param {*} [options.seed] - pseudorandom value generator seed\n\t* @param {*} [options.state] - pseudorandom value generator state\n\t* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom value generator state\n\t* @param {string} [options.dtype] - default output array data type\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {Function} function for creating arrays\n\t*/\n\tfunction factory() {\n\t\tvar Random;\n\t\tvar random;\n\t\tvar param1;\n\t\tvar param2;\n\t\tvar param3;\n\t\tvar assign;\n\t\tvar nargs;\n\t\tvar base;\n\t\tvar opts;\n\t\tvar rand;\n\t\tvar dt;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs < 1 ) {                              // e.g., factory()\n\t\t\topts = {};\n\t\t\tbase = prng;\n\t\t\trand = rand1;\n\t\t} else if ( nargs === 1 ) {                     // e.g., factory( {} )\n\t\t\topts = arguments[ 0 ];\n\t\t\tbase = prng.factory( opts );\n\t\t\trand = rand1;\n\t\t} else if ( nargs === 3 ) {                     // e.g., factory( param1, param2, param3 )\n\t\t\tparam1 = arguments[ 0 ];\n\t\t\tparam2 = arguments[ 1 ];\n\t\t\tparam3 = arguments[ 2 ];\n\t\t\topts = {};\n\t\t\tbase = prng.factory( param1, param2, param3 );\n\t\t\trand = rand2;\n\t\t} else {                                        // e.g., factory( param1, param2, param3, {} )\n\t\t\tparam1 = arguments[ 0 ];\n\t\t\tparam2 = arguments[ 1 ];\n\t\t\tparam3 = arguments[ 2 ];\n\t\t\topts = arguments[ 3 ];\n\t\t\tbase = prng.factory( param1, param2, param3, opts );\n\t\t\trand = rand2;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'dtype' ) ) {\n\t\t\tdt = opts.dtype;\n\t\t\tif ( !isValidDataType( dt ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', dtypes.join( '\", \"' ), dt ) );\n\t\t\t}\n\t\t} else {\n\t\t\tdt = dtype;\n\t\t}\n\t\tif ( rand === rand1 ) {\n\t\t\tassign = assign1;\n\t\t\tRandom = TernaryRandom;\n\t\t} else {\n\t\t\tassign = assign2;\n\t\t\tRandom = NullaryRandom;\n\t\t}\n\t\trandom = new Random( base, dtypes, dt );\n\t\tif ( opts && opts.prng ) {\n\t\t\tsetReadOnly( rand, 'seed', null );\n\t\t\tsetReadOnly( rand, 'seedLength', null );\n\t\t\tsetReadWriteAccessor( rand, 'state', constantFunction( null ), noop );\n\t\t\tsetReadOnly( rand, 'stateLength', null );\n\t\t\tsetReadOnly( rand, 'byteLength', null );\n\t\t} else {\n\t\t\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\t\t\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\t\t\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\t\t\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\t\t\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\t\t}\n\t\tsetReadOnly( rand, 'PRNG', base.PRNG );\n\t\tsetReadOnly( rand, 'assign', assign );\n\t\treturn rand;\n\n\t\t/**\n\t\t* Returns an array of pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} len - output array length\n\t\t* @param {*} param1 - first PRNG parameter\n\t\t* @param {*} param2 - second PRNG parameter\n\t\t* @param {*} param3 - third PRNG parameter\n\t\t* @param {Options} [options] - function options\n\t\t* @param {string} [options.dtype] - output array data type\n\t\t* @throws {TypeError} first argument must be a nonnegative integer\n\t\t* @throws {TypeError} options argument must be an object\n\t\t* @throws {TypeError} must provide valid options\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction rand1( len, param1, param2, param3, options ) {\n\t\t\tif ( arguments.length < 5 ) {\n\t\t\t\treturn random.generate( len, param1, param2, param3 );\n\t\t\t}\n\t\t\treturn random.generate( len, param1, param2, param3, options );\n\t\t}\n\n\t\t/**\n\t\t* Returns an array of pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} len - output array length\n\t\t* @param {Options} [options] - function options\n\t\t* @param {string} [options.dtype] - output array data type\n\t\t* @throws {TypeError} first argument must be a nonnegative integer\n\t\t* @throws {TypeError} options argument must be an object\n\t\t* @throws {TypeError} must provide valid options\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction rand2( len, options ) {\n\t\t\tif ( arguments.length < 2 ) {\n\t\t\t\treturn random.generate( len );\n\t\t\t}\n\t\t\treturn random.generate( len, options );\n\t\t}\n\n\t\t/**\n\t\t* Fills an array with pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {*} param1 - first PRNG parameter\n\t\t* @param {*} param2 - second PRNG parameter\n\t\t* @param {*} param3 - third PRNG parameter\n\t\t* @param {Collection} out - output array\n\t\t* @throws {TypeError} third argument must be a collection\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction assign1( param1, param2, param3, out ) {\n\t\t\treturn random.assign( param1, param2, param3, out );\n\t\t}\n\n\t\t/**\n\t\t* Fills an array with pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {Collection} out - output array\n\t\t* @throws {TypeError} first argument must be a collection\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction assign2( out ) {\n\t\t\treturn random.assign( out );\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} seed\n\t\t*/\n\t\tfunction getSeed() {\n\t\t\treturn rand.PRNG.seed;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} seed length\n\t\t*/\n\t\tfunction getSeedLength() {\n\t\t\treturn rand.PRNG.seedLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state length\n\t\t*/\n\t\tfunction getStateLength() {\n\t\t\treturn rand.PRNG.stateLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state size (in bytes).\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state size (in bytes)\n\t\t*/\n\t\tfunction getStateSize() {\n\t\t\treturn rand.PRNG.byteLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the current pseudorandom number generator state.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} current state\n\t\t*/\n\t\tfunction getState() {\n\t\t\treturn rand.PRNG.state;\n\t\t}\n\n\t\t/**\n\t\t* Sets the pseudorandom number generator state.\n\t\t*\n\t\t* @private\n\t\t* @param {*} s - generator state\n\t\t* @throws {Error} must provide a valid state\n\t\t*/\n\t\tfunction setState( s ) {\n\t\t\trand.PRNG.state = s;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = createFactory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a factory function for generating pseudorandom values drawn from a ternary PRNG.\n*\n* @module @stdlib/random/array/tools/ternary-factory\n*\n* @example\n* var triangular = require( '@stdlib/random/base/triangular' );\n* var ternaryFactory = require( '@stdlib/random/array/tools/ternary-factory' );\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var factory = ternaryFactory( triangular, dtypes, 'float64' );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var x = random( 10, 2.0, 5.0, 3.33 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0, 1.3 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( alpha, s, m ) {\n\tif ( !isPositiveNumber( alpha ) || isnan( alpha ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a positive number and not NaN. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositiveNumber( s ) || isnan( s ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number and not NaN. Value: `%s`.', s ) );\n\t}\n\tif ( !isNumber( m ) || isnan( m ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Third argument must be a number and not NaN. Value: `%s`.', m ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Fr\u00E9chet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {number} pseudorandom number\n*/\nfunction frechet( rand, alpha, s, m ) {\n\treturn m + ( s * ( pow( -ln( rand() ), -1.0/alpha ) ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = frechet;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar frechet0 = require( './frechet.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers drawn from a Fr\u00E9chet distribution.\n*\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [s] - scale parameter\n* @param {number} [m] - location parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} `m` must be a number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var frechet = factory( 1.0, 1.0, 0.8 );\n* var v = frechet();\n* // returns <number>\n*\n* @example\n* var frechet = factory( 1.0, 1.0, -2.0, {\n*     'seed': 297\n* });\n* var v = frechet();\n* // returns <number>\n*/\nfunction factory() {\n\tvar alpha;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar s;\n\tvar m;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\talpha = arguments[ 0 ];\n\t\ts = arguments[ 1 ];\n\t\tm = arguments[ 2 ];\n\t\terr = validate( alpha, s, m );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 3 ) {\n\t\t\topts = arguments[ 3 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( alpha === void 0 ) {\n\t\tprng = frechet2;\n\t} else {\n\t\tprng = frechet1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'frechet' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( alpha === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ alpha, s, m ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Fr\u00E9chet distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = frechet1();\n\t* // returns <number>\n\t*/\n\tfunction frechet1() {\n\t\treturn frechet0( rand, alpha, s, m );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Fr\u00E9chet distribution with shape `alpha`, scale `s`, and location `m`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - shape parameter\n\t* @param {PositiveNumber} s - scale parameter\n\t* @param {number} m - location parameter\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = frechet2( 2.0, 1.0, 0.5 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = frechet2( 1.0, 1.0, 0.5 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = frechet2( 1.0, 2.0, NaN );\n\t* // returns NaN\n\t*/\n\tfunction frechet2( alpha, s, m ) {\n\t\tif (\n\t\t\tisnan( alpha ) ||\n\t\t\tisnan( s ) ||\n\t\t\tisnan( m ) ||\n\t\t\talpha <= 0.0 ||\n\t\t\ts <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn frechet0( rand, alpha, s, m );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Fr\u00E9chet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @name frechet\n* @type {PRNG}\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = frechet( 1.0, 1.0, 0.5 );\n* // returns <number>\n*/\nvar frechet = factory();\n\n\n// EXPORTS //\n\nmodule.exports = frechet;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fr\u00E9chet distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/frechet\n*\n* @example\n* var frechet = require( '@stdlib/random/base/frechet' );\n*\n* var v = frechet( 10.0, 10.0, 7.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/frechet' ).factory;\n*\n* var frechet = factory( 5.0, 5.0, 3.0, {\n*     'seed': 643361677\n* });\n*\n* var v = frechet();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/frechet' ).factory;\n*\n* var frechet = factory({\n*     'seed': 643361677\n* });\n*\n* var v = frechet( 5.0, 5.0, 3.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ternaryFactory = require( './../../../array/tools/ternary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/frechet' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a Fr\u00E9chet distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [s] - scale parameter\n* @param {number} [m] - location parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} `m` must be a number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var frechet = factory( 2.0, 5.0, 3.0 );\n* // returns <Function>\n*\n* var arr = frechet( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var frechet = factory( 2.0, 5.0, 3.0 );\n* // returns <Function>\n*\n* var arr = frechet( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = ternaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a Fr\u00E9chet distribution.\n*\n* @name frechet\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = frechet( 10, 2.0, 5.0, 3.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = frechet( 10, 2.0, 5.0, 3.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar frechet = factory();\n\n\n// EXPORTS //\n\nmodule.exports = frechet;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a Fr\u00E9chet distribution.\n*\n* @module @stdlib/random/array/frechet\n*\n* @example\n* var frechet = require( '@stdlib/random/array/frechet' );\n*\n* var arr = frechet( 10, 2.0, 5.0, 3.0 );\n* // returns <Float64Array>\n*\n* @example\n* var frechet = require( '@stdlib/random/array/frechet' );\n*\n* var arr = frechet( 10, 2.0, 5.0, 3.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var frechet = require( '@stdlib/random/array/frechet' );\n*\n* var rand = frechet.factory( 2.0, 5.0, 3.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var frechet = require( '@stdlib/random/array/frechet' );\n*\n* var rand = frechet.factory( 2.0, 5.0, 3.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/gamma' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a gamma distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [beta] - rate parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var gamma = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = gamma( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var gamma = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = gamma( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a gamma distribution.\n*\n* @name gamma\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = gamma( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = gamma( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar gamma = factory();\n\n\n// EXPORTS //\n\nmodule.exports = gamma;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a gamma distribution.\n*\n* @module @stdlib/random/array/gamma\n*\n* @example\n* var gamma = require( '@stdlib/random/array/gamma' );\n*\n* var arr = gamma( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var gamma = require( '@stdlib/random/array/gamma' );\n*\n* var arr = gamma( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var gamma = require( '@stdlib/random/array/gamma' );\n*\n* var rand = gamma.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var gamma = require( '@stdlib/random/array/gamma' );\n*\n* var rand = gamma.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a geometric distribution.\n*\n* ## Proof\n*\n* Consider\n*\n* ```tex\n* N = \\left \\lfloor \\ln (U) / \\ln (1-p) \\right \\rfloor\n* ```\n*\n* where \\\\( U \\\\) is uniform on the interval \\\\((0,1)\\\\). Accordingly, \\\\(N\\\\) must be a nonnegative integer, and, for every \\\\( n \\geq 0\\\\), the event \\\\(A_n = \\left \\{ N = n \\right \\}\\\\) is\n*\n* ```tex\n* A_n = \\left \\{(n+1) \\ln (1-p) < \\ln (U) \\leq n \\ln (1-p) \\right \\}\n* ```\n*\n* where \\\\(\\ln (1-p) < 0\\\\). Thus,\n*\n* ```tex\n* A_n = \\left \\{(1-p)^{n+1} < U \\leq (1-p)^n \\right \\}\n* ```\n*\n* For every \\\\(u < v\\\\) on the interval \\\\((0,1)\\\\),\n*\n* ```tex\n* P\\left \\[u < U \\leq v\\right \\] = v - u\n* ```\n*\n* Hence,\n*\n* ```tex\n* P\\left \\[N = n \\right \\] = P\\left \\[A_n\\right \\] = (1-p)^n - (1-p)^{n+1} = (1-p)^n(1-(1-p)) = p(1-p)^n\n* ```\n*\n* which proves that \\\\(N\\\\) is a geometric random variable.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction geometric( rand, p ) {\n\tvar u = rand();\n\tif ( u === 0.0 ) {\n\t\t// Drawing random variates from a PRNG (with period > 1) is effectively sampling without replacement. Thus, should not be possible to draw `0` twice in a row.\n\t\tu = rand();\n\t}\n\treturn floor( ln( u ) / ln( 1.0-p ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = geometric;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar geometric0 = require( './geometric.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating geometric distributed random numbers.\n*\n* @param {Probability} [p] - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `p` must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var geometric = factory( 0.5 );\n* var v = geometric();\n* // returns <number>\n*\n* @example\n* var geometric = factory( 0.8, {\n*     'seed': 297\n* });\n* var v = geometric();\n* // returns <number>\n*\n* @example\n* var geometric = factory();\n* var v = geometric( 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar p;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if (\n\t\targuments.length === 1 &&\n\t\tisObject( arguments[ 0 ] )\n\t) {\n\t\topts = arguments[ 0 ];\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tp = arguments[ 0 ];\n\t\tif ( !isProbability( p ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a probability. Value: `%s`.', p ) );\n\t\t}\n\t\tif ( arguments.length > 1 ) {\n\t\t\topts = arguments[ 1 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( p === void 0 ) {\n\t\tprng = geometric2;\n\t} else {\n\t\tprng = geometric1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'geometric' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( p === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ p ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a geometric distribution with bound parameter `p`.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = geometric1();\n\t* // returns <number>\n\t*/\n\tfunction geometric1() {\n\t\treturn geometric0( rand, p );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a geometric distribution with parameter `p`.\n\t*\n\t* @private\n\t* @param {Probability} p - success probability\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = geometric2( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction geometric2( p ) {\n\t\tif (\n\t\t\tisnan( p ) ||\n\t\t\tp < 0.0 ||\n\t\t\tp > 1.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn geometric0( rand, p );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom random number drawn from a geometric distribution with parameter `p`.\n*\n* @name geometric\n* @type {PRNG}\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} pseudorandom number\n*\n* @example\n* var v = geometric( 0.5 );\n* // returns <number>\n*\n* @example\n* var v = geometric( 3.14 );\n* // returns NaN\n*\n* @example\n* var v = geometric( -1.0 );\n* // returns NaN\n*\n* @example\n* var v = geometric( NaN );\n* // returns NaN\n*/\nvar geometric = factory();\n\n\n// EXPORTS //\n\nmodule.exports = geometric;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Geometric distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/geometric\n*\n* @example\n* var geometric = require( '@stdlib/random/base/geometric' );\n*\n* var v = geometric( 0.5 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/geometric' ).factory;\n*\n* var geometric = factory( 0.3, {\n*     'seed': 297\n* });\n*\n* var v = geometric();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/geometric' ).factory;\n*\n* var geometric = factory({\n*     'seed': 297\n* });\n*\n* var v = geometric( 0.5 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unaryFactory = require( './../../../array/tools/unary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/geometric' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a geometric distribution.\n*\n* @name factory\n* @type {Function}\n* @param {Probability} [p] - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `p` must be a probability (i.e., a number on the interval [0,1])\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var geometric = factory( 0.01 );\n* // returns <Function>\n*\n* var arr = geometric( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var geometric = factory( 0.01 );\n* // returns <Function>\n*\n* var arr = geometric( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = unaryFactory( base, DTYPES, defaults.get( 'dtypes.real' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a geometric distribution.\n*\n* @name geometric\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {Probability} p - success probability\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = geometric( 10, 0.01 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = geometric( 10, 0.01, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar geometric = factory();\n\n\n// EXPORTS //\n\nmodule.exports = geometric;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a geometric distribution.\n*\n* @module @stdlib/random/array/geometric\n*\n* @example\n* var geometric = require( '@stdlib/random/array/geometric' );\n*\n* var arr = geometric( 10, 0.01 );\n* // returns <Float64Array>\n*\n* @example\n* var geometric = require( '@stdlib/random/array/geometric' );\n*\n* var arr = geometric( 10, 0.01, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var geometric = require( '@stdlib/random/array/geometric' );\n*\n* var rand = geometric.factory( 0.01 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var geometric = require( '@stdlib/random/array/geometric' );\n*\n* var rand = geometric.factory( 0.01 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {number} mu - mean\n* @param {PositiveNumber} beta - shape parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( mu, beta ) {\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositive( beta ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Returns pseudorandom number drawn from a Gumbel distribution.\n*\n* @private\n* @param {PRNG} rand - PRNG for generating uniformly distributed numbers\n* @param {number} mu - mean\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} pseudorandom number\n*/\nfunction gumbel( rand, mu, beta ) {\n\treturn mu - ( beta*ln( -ln( rand() ) ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gumbel;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar gumbel0 = require( './gumbel.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers from a Gumbel distribution.\n*\n* @param {number} [mu] - mean\n* @param {PositiveNumber} [beta] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var gumbel = factory( 0.0, 1.0 );\n* var v = gumbel();\n* // returns <number>\n*\n* @example\n* var gumbel = factory( -3.0, 0.5, {\n*     'seed': 297\n* });\n* var v = gumbel();\n* // returns <number>\n*/\nfunction factory() {\n\tvar beta;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar mu;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tmu = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\terr = validate( mu, beta );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( mu === void 0 ) {\n\t\tprng = gumbel2;\n\t} else {\n\t\tprng = gumbel1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'gumbel' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( mu === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ mu, beta ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns pseudorandom number drawn from a Gumbel distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = gumbel1();\n\t* // returns <number>\n\t*/\n\tfunction gumbel1() {\n\t\treturn gumbel0( rand, mu, beta );\n\t}\n\n\t/**\n\t* Returns pseudorandom number drawn from a Gumbel distribution.\n\t*\n\t* @private\n\t* @param {number} mu - mean\n\t* @param {PositiveNumber} beta - scale parameter\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = gumbel2( 0.0, 2.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = gumbel2( 0.0, -1.0 );\n\t* // returns NaN\n\t*/\n\tfunction gumbel2( mu, beta ) {\n\t\tif (\n\t\t\tisnan( mu ) ||\n\t\t\tisnan( beta ) ||\n\t\t\tbeta <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn gumbel0( rand, mu, beta );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns pseudorandom number drawn from a Gumbel distribution.\n*\n* @name gumbel\n* @type {PRNG}\n* @param {number} mu - mean\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = gumbel( 0.0, 2.0 );\n* // returns <number>\n*\n* @example\n* var v = gumbel( 0.0, -1.0 );\n* // returns NaN\n*/\nvar gumbel = factory();\n\n\n// EXPORTS //\n\nmodule.exports = gumbel;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gumbel distribution pseudorandom numbers.\n*\n* @module @stdlib/random/base/gumbel\n*\n* @example\n* var gumbel = require( '@stdlib/random/base/gumbel' );\n*\n* var v = gumbel( 0.5, 1.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/gumbel' ).factory;\n*\n* var gumbel = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = gumbel();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/gumbel' ).factory;\n*\n* var gumbel = factory({\n*     'seed': 297\n* });\n*\n* var v = gumbel( 2.0, 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/gumbel' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a Gumbel distribution.\n*\n* @name factory\n* @type {Function}\n* @param {number} [mu] - mean\n* @param {PositiveNumber} [beta] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var gumbel = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = gumbel( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var gumbel = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = gumbel( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a Gumbel distribution.\n*\n* @name gumbel\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {number} mu - mean\n* @param {PositiveNumber} beta - scale parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = gumbel( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = gumbel( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar gumbel = factory();\n\n\n// EXPORTS //\n\nmodule.exports = gumbel;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a Gumbel distribution.\n*\n* @module @stdlib/random/array/gumbel\n*\n* @example\n* var gumbel = require( '@stdlib/random/array/gumbel' );\n*\n* var arr = gumbel( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var gumbel = require( '@stdlib/random/array/gumbel' );\n*\n* var arr = gumbel( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var gumbel = require( '@stdlib/random/array/gumbel' );\n*\n* var rand = gumbel.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var gumbel = require( '@stdlib/random/array/gumbel' );\n*\n* var rand = gumbel.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1, 2, 3 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( N, K, n ) {\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', N ) );\n\t}\n\tif ( !isNonNegativeInteger( K ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', K ) );\n\t}\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%s`.', n ) );\n\t}\n\tif ( n > N ) {\n\t\treturn new RangeError( format( 'invalid argument. Third argument must be less than or equal to the first argument. Value: `%u`.', n ) );\n\t}\n\tif ( K > N ) {\n\t\treturn new RangeError( format( 'invalid argument. Second argument must be less than or equal to the first argument. Value: `%u`.', K ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factorial = require( '@stdlib/math/base/special/factorial' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a hypergeometric distribution using the HIN algorithm, which is based on an inverse transformation method.\n*\n* ## References\n*\n* -   Fishman, George S. 1973. _Concepts and methods in discrete event digital simulation_. A Wiley-Interscience Publication. New York, NY, USA: Wiley.\n* -   Kachitvichyanukul, Voratas., and Burce Schmeiser. 1985. \"Computer generation of hypergeometric random variates.\" _Journal of Statistical Computation and Simulation_ 22 (2): 127\u201345. doi:[10.1080/00949658508810839][@kachitvichyanukul:1985].\n*\n* [@kachitvichyanukul:1985]: http://dx.doi.org/10.1080/00949658508810839\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {NonNegativeInteger} n1 - number of successes in population\n* @param {NonNegativeInteger} n2 - number of failures in population\n* @param {NonNegativeInteger} k - number of draws\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction hin( rand, n1, n2, k ) {\n\tvar p;\n\tvar u;\n\tvar x;\n\tif ( k < n2 ) {\n\t\tp = ( factorial( n2 ) * factorial( n1 + n2 - k ) ) /\n\t\t\t( factorial( n1 + n2 ) * factorial( n2 - k ) );\n\t\tx = 0;\n\t} else {\n\t\tp = ( factorial( n1 ) * factorial( k ) ) /\n\t\t\t( factorial( k - n2 ) * factorial( n1 + n2 ) );\n\t\tx = k - n2;\n\t}\n\tu = rand();\n\twhile ( u > p ) {\n\t\tu -= p;\n\t\tp *= ( n1 - x ) * ( k - x ) / ( ( x + 1 ) * ( n2 - k + 1 + x ) );\n\t\tx += 1;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hin;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hin = require( './hin.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a hypergeometric distribution.\n*\n* ## References\n*\n* -   Kachitvichyanukul, Voratas., and Burce Schmeiser. 1985. \"Computer generation of hypergeometric random variates.\" _Journal of Statistical Computation and Simulation_ 22 (2): 127\u201345. doi:[10.1080/00949658508810839][@kachitvichyanukul:1985].\n*\n* [@kachitvichyanukul:1985]: http://dx.doi.org/10.1080/00949658508810839\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction hypergeometric( rand, N, K, n ) {\n\tvar n1;\n\tvar n2;\n\tvar k;\n\tvar x;\n\n\tif ( n > N/2 ) {\n\t\tk = N - n;\n\t\tif ( 2*K <= N ) {\n\t\t\tn1 = K;\n\t\t\tn2 = N - K;\n\t\t\tx = hin( rand, n1, n2, k );\n\t\t\treturn K - x;\n\t\t}\n\t\tn2 = K;\n\t\tn1 = N - K;\n\t\tx = hin( rand, n1, n2, k );\n\t\treturn n - N + K + x;\n\t}\n\tk = n;\n\tif ( 2*K <= N ) {\n\t\tn1 = K;\n\t\tn2 = N - K;\n\t\tx = hin( rand, n1, n2, k );\n\t\treturn x;\n\t}\n\tn1 = N - K;\n\tn2 = K;\n\tx = hin( rand, n1, n2, k );\n\treturn n - x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hypergeometric;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar hypergeometric0 = require( './hypergeometric.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating hypergeometric distributed random numbers.\n*\n* @param {NonNegativeInteger} [N] - population size\n* @param {NonNegativeInteger} [K] - subpopulation size\n* @param {NonNegativeInteger} [n] - number of draws\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `N` must be a nonnegative integer\n* @throws {TypeError} `K` must be a nonnegative integer\n* @throws {TypeError} `n` must be a nonnegative integer\n* @throws {RangeError} `n` must be less than or equal to `N`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var hypergeometric = factory( 5, 3, 2 );\n* var v = hypergeometric();\n* // returns <number>\n*\n* @example\n* var hypergeometric = factory( 10, 10, 10, {\n*     'seed': 297\n* });\n* var v = hypergeometric();\n* // returns <number>\n*\n* @example\n* var hypergeometric = factory();\n* var v = hypergeometric( 5, 3, 2 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar N;\n\tvar K;\n\tvar n;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tN = arguments[ 0 ];\n\t\tK = arguments[ 1 ];\n\t\tn = arguments[ 2 ];\n\t\terr = validate( N, K, n );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 3 ) {\n\t\t\topts = arguments[ 3 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( N === void 0 ) {\n\t\tprng = hypergeometric2;\n\t} else {\n\t\tprng = hypergeometric1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'hypergeometric' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( N === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ N, K, n ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a random number drawn from a hypergeometric distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = hypergeometric1();\n\t* // returns <number>\n\t*/\n\tfunction hypergeometric1() {\n\t\treturn hypergeometric0( rand, N, K, n );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a hypergeometric distribution.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} N - population size\n\t* @param {NonNegativeInteger} K - subpopulation size\n\t* @param {NonNegativeInteger} n - number of draws\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = hypergeometric2( 5, 3, 2 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = hypergeometric2( NaN, NaN, NaN );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = hypergeometric2( 5.21, 3.14, 2.76 );\n\t* // returns NaN\n\t*/\n\tfunction hypergeometric2( N, K, n ) {\n\t\tif (\n\t\t\tN === PINF ||\n\t\t\tK === PINF ||\n\t\t\t!isNonNegativeInteger( N ) ||\n\t\t\t!isNonNegativeInteger( K ) ||\n\t\t\t!isNonNegativeInteger( n ) ||\n\t\t\tn > N\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn hypergeometric0( rand, N, K, n );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a hypergeometric distribution.\n*\n* @name hypergeometric\n* @type {PRNG}\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {NonNegativeInteger} pseudorandom number\n*\n* @example\n* var v = hypergeometric( 5, 3, 2 );\n* // returns <number>\n*\n* @example\n* var v = hypergeometric( -5, 3, 2 );\n* // returns NaN\n*\n* @example\n* var v = hypergeometric( 5, 3.14, 2 );\n* // returns NaN\n*\n* @example\n* var v = hypergeometric( 5, 3, 1.5 );\n* // returns NaN\n*\n* @example\n* var v = hypergeometric( NaN, NaN, NaN );\n* // returns NaN\n*/\nvar hypergeometric = factory();\n\n\n// EXPORTS //\n\nmodule.exports = hypergeometric;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Hypergeometric distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/hypergeometric\n*\n* @example\n* var hypergeometric = require( '@stdlib/random/base/hypergeometric' );\n*\n* var v = hypergeometric( 10, 10, 10 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/hypergeometric' ).factory;\n* var hypergeometric = factory( 5, 3, 2, {\n*     'seed': 297\n* });\n*\n* var v = hypergeometric();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/hypergeometric' ).factory;\n* var hypergeometric = factory();\n*\n* var v = hypergeometric( 10, 2, 2 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/hypergeometric' ).factory;\n* var hypergeometric = factory({\n*     'seed': 297\n* });\n*\n* var v = hypergeometric( 5, 3, 2 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ternaryFactory = require( './../../../array/tools/ternary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/hypergeometric' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a hypergeometric distribution.\n*\n* @name factory\n* @type {Function}\n* @param {NonNegativeInteger} [N] - population size\n* @param {NonNegativeInteger} [K] - subpopulation size\n* @param {NonNegativeInteger} [n] - number of draws\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `N` must be a nonnegative integer\n* @throws {TypeError} `K` must be a nonnegative integer\n* @throws {TypeError} `n` must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var hypergeometric = factory( 20, 10, 7 );\n* // returns <Function>\n*\n* var arr = hypergeometric( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var hypergeometric = factory( 20, 10, 7 );\n* // returns <Function>\n*\n* var arr = hypergeometric( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = ternaryFactory( base, DTYPES, defaults.get( 'dtypes.real' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a hypergeometric distribution.\n*\n* @name hypergeometric\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = hypergeometric( 10, 20, 10, 7 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = hypergeometric( 10, 20, 10, 7, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar hypergeometric = factory();\n\n\n// EXPORTS //\n\nmodule.exports = hypergeometric;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a hypergeometric distribution.\n*\n* @module @stdlib/random/array/hypergeometric\n*\n* @example\n* var hypergeometric = require( '@stdlib/random/array/hypergeometric' );\n*\n* var arr = hypergeometric( 10, 20, 10, 7 );\n* // returns <Float64Array>\n*\n* @example\n* var hypergeometric = require( '@stdlib/random/array/hypergeometric' );\n*\n* var arr = hypergeometric( 10, 20, 10, 7, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var hypergeometric = require( '@stdlib/random/array/hypergeometric' );\n*\n* var rand = hypergeometric.factory( 20, 10, 7 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var hypergeometric = require( '@stdlib/random/array/hypergeometric' );\n*\n* var rand = hypergeometric.factory( 20, 10, 7 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( alpha, beta ) {\n\tif ( !isPositive( alpha ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositive( beta ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar gamma = require( './../../../base/gamma' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating inverse gamma distributed random numbers.\n*\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [beta] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var invgamma = factory( 2.0, 1.0 );\n* var v = invgamma();\n* // returns <number>\n*\n* @example\n* var invgamma = factory( 2.0, 2.0, {\n*     'seed': 297\n* });\n* var v = invgamma();\n* // returns <number>\n*/\nfunction factory() {\n\tvar rgamma;\n\tvar alpha;\n\tvar beta;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\n\tif ( arguments.length === 0 ) {\n\t\trgamma = gamma();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trgamma = gamma({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trgamma = gamma( opts );\n\t\t}\n\t} else {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\terr = validate( alpha, beta );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trgamma = gamma( alpha, beta, {\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trgamma = gamma( alpha, beta, opts );\n\t\t\t}\n\t\t} else {\n\t\t\trgamma = gamma( alpha, beta );\n\t\t}\n\t}\n\tif ( alpha === void 0 ) {\n\t\tprng = invgamma2;\n\t} else {\n\t\tprng = invgamma1;\n\t}\n\trand = rgamma.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'invgamma' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( alpha === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ alpha, beta ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from an inverse gamma distribution.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = invgamma1();\n\t* // returns <number>\n\t*/\n\tfunction invgamma1() {\n\t\treturn 1.0 / rgamma();\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from an inverse gamma distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - shape parameter\n\t* @param {PositiveNumber} beta - scale parameter\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = invgamma2( 2.0, 1.0 );\n\t* // returns <number>\n\t*/\n\tfunction invgamma2( alpha, beta ) {\n\t\tif (\n\t\t\tisnan( alpha ) ||\n\t\t\tisnan( beta ) ||\n\t\t\talpha <= 0.0 ||\n\t\t\tbeta <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 1.0 / rgamma( alpha, beta );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a random number drawn from an inverse gamma distribution.\n*\n* ## Method\n*\n* When\n*\n* ```tex\n* X \\sim \\operatorname{Gamma}( \\alpha, \\beta )\n* ```\n*\n* then\n*\n* ```tex\n* \\frac{1}{X} \\sim \\operatorname{InvGamma}\\left( \\alpha, \\tfrac{1}{beta} \\right)\n* ```\n*\n* Hence, to generate a draw from an inverse gamma distribution with parameters \\\\( \\alpha \\\\) and \\\\( \\beta \\\\), sample `X` from a \\\\( \\operatorname{Gamma}\\left( \\alpha, \\tfrac{1}{\\beta} \\right) \\\\) distribution and return `1/X`.\n*\n* @name invgamma\n* @type {PRNG}\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = invgamma( 2.0, 1.0 );\n* // returns <number>\n*\n* @example\n* var v = invgamma( -2.0, 5.0 );\n* // returns NaN\n*/\nvar invgamma = factory();\n\n\n// EXPORTS //\n\nmodule.exports = invgamma;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Inverse gamma distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/invgamma\n*\n* @example\n* var invgamma = require( '@stdlib/random/base/invgamma' );\n*\n* var v = invgamma( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/invgamma' ).factory;\n* var invgamma = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = invgamma();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/invgamma' ).factory;\n* var invgamma = factory({\n*     'seed': 297\n* });\n*\n* var v = invgamma( 3.0, 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/invgamma' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from an inverse gamma distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [beta] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var invgamma = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = invgamma( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var invgamma = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = invgamma( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from an inverse gamma distribution.\n*\n* @name invgamma\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = invgamma( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = invgamma( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar invgamma = factory();\n\n\n// EXPORTS //\n\nmodule.exports = invgamma;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from an inverse gamma distribution.\n*\n* @module @stdlib/random/array/invgamma\n*\n* @example\n* var invgamma = require( '@stdlib/random/array/invgamma' );\n*\n* var arr = invgamma( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var invgamma = require( '@stdlib/random/array/invgamma' );\n*\n* var arr = invgamma( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var invgamma = require( '@stdlib/random/array/invgamma' );\n*\n* var rand = invgamma.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var invgamma = require( '@stdlib/random/array/invgamma' );\n*\n* var rand = invgamma.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( a, b ) {\n\tif ( !isPositive( a ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', a ) );\n\t}\n\tif ( !isPositive( b ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', b ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Returns a random number drawn from Kumaraswamy's double bounded distribution.\n*\n* @private\n* @param {PRNG} rand - pseudorandom number generator for uniformly distributed numbers\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( rand, a, b ) {\n\tvar u = rand();\n\treturn pow( 1.0 - pow( 1.0-u, 1.0/b ), 1.0/a );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar kumaraswamy0 = require( './kumaraswamy.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating Kumaraswamy's double bounded distributed random numbers.\n*\n* @param {PositiveNumber} [a] - first shape parameter\n* @param {PositiveNumber} [b] - second shape parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `a` must be a positive number\n* @throws {TypeError} `b` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var kumaraswamy = factory( 2.0, 1.0 );\n* var v = kumaraswamy();\n* // returns <number>\n*\n* @example\n* var kumaraswamy = factory( 2.0, 2.0, {\n*     'seed': 297\n* });\n* var v = kumaraswamy();\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar a;\n\tvar b;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\terr = validate( a, b );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( a === void 0 ) {\n\t\tprng = kumaraswamy2;\n\t} else {\n\t\tprng = kumaraswamy1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'kumaraswamy' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( a === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ a, b ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a random number drawn from a Kumaraswamy's double bounded distribution with bound parameter values.\n\t*\n\t* @private\n\t* @returns {Probability} pseudorandom number\n\t*\n\t* @example\n\t* var v = beta1();\n\t* // returns <number>\n\t*/\n\tfunction kumaraswamy1() {\n\t\treturn kumaraswamy0( rand, a, b );\n\t}\n\n\t/**\n\t* Returns a random number drawn from a Kumaraswamy's double bounded distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} a - first shape parameter\n\t* @param {PositiveNumber} b - second shape parameter\n\t* @returns {Probability} pseudorandom number\n\t*\n\t* @example\n\t* var v = kumaraswamy2( 2.0, 3.0 );\n\t* // returns <number>\n\t*/\n\tfunction kumaraswamy2( a, b ) {\n\t\tif (\n\t\t\tisnan( a ) ||\n\t\t\tisnan( b ) ||\n\t\t\ta <= 0.0 ||\n\t\t\tb <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn kumaraswamy0( rand, a, b );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Generates a Kumaraswamy's double bounded distributed random number.\n*\n* @name kumaraswamy\n* @type {PRNG}\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {Probability} pseudorandom number\n*\n* @example\n* var r = kumaraswamy( 2.0, 5.0 );\n* // returns <number>\n*\n* @example\n* var r = kumaraswamy( -2.0, 5.0 );\n* // returns NaN\n*/\nvar kumaraswamy = factory();\n\n\n// EXPORTS //\n\nmodule.exports = kumaraswamy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Kumaraswamy's double bounded distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/kumaraswamy\n*\n* @example\n* var kumaraswamy = require( '@stdlib/random/base/kumaraswamy' );\n*\n* var v = kumaraswamy( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/kumaraswamy' ).factory;\n*\n* var kumaraswamy = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = kumaraswamy();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/kumaraswamy' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from Kumaraswamy's double bounded distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [a] - first shape parameter\n* @param {PositiveNumber} [b] - second shape parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `a` must be a positive number\n* @throws {TypeError} `b` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var kumaraswamy = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = kumaraswamy( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var kumaraswamy = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = kumaraswamy( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from Kumaraswamy's double bounded distribution.\n*\n* @name kumaraswamy\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = kumaraswamy( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = kumaraswamy( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar kumaraswamy = factory();\n\n\n// EXPORTS //\n\nmodule.exports = kumaraswamy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from Kumaraswamy's double bounded distribution.\n*\n* @module @stdlib/random/array/kumaraswamy\n*\n* @example\n* var kumaraswamy = require( '@stdlib/random/array/kumaraswamy' );\n*\n* var arr = kumaraswamy( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var kumaraswamy = require( '@stdlib/random/array/kumaraswamy' );\n*\n* var arr = kumaraswamy( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var kumaraswamy = require( '@stdlib/random/array/kumaraswamy' );\n*\n* var rand = kumaraswamy.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var kumaraswamy = require( '@stdlib/random/array/kumaraswamy' );\n*\n* var rand = kumaraswamy.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {number} mu - mean\n* @param {PositiveNumber} b - scale parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( mu, b ) {\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositive( b ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', b ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sign = require( '@stdlib/math/base/special/signum' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Laplace (double exponential) distribution.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {number} mu - mean\n* @param {PositiveNumber} b - scale parameter\n* @returns {number} pseudorandom number\n*/\nfunction laplace( rand, mu, b ) {\n\tvar u = rand() - 0.5;\n\treturn mu - ( b*sign( u )*ln( 1.0 - (2.0*abs(u)) ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = laplace;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar laplace0 = require( './laplace.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers from a Laplace (double exponential) distribution.\n*\n* @param {number} [mu] - mean\n* @param {PositiveNumber} [b] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `b` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var laplace = factory( 0.0, 1.0 );\n* var v = laplace();\n* // returns <number>\n*\n* @example\n* var laplace = factory( -3.0, 0.5, {\n*     'seed': 297\n* });\n* var v = laplace();\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar mu;\n\tvar b;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tmu = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\terr = validate( mu, b );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( mu === void 0 ) {\n\t\tprng = laplace2;\n\t} else {\n\t\tprng = laplace1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'laplace' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( mu === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ mu, b ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Laplace (double exponential) distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = laplace1();\n\t* // returns <number>\n\t*/\n\tfunction laplace1() {\n\t\treturn laplace0( rand, mu, b );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Laplace (double exponential) distribution.\n\t*\n\t* @private\n\t* @param {number} mu - mean\n\t* @param {PositiveNumber} b - scale parameter\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = laplace2( 0.0, 2.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = laplace2( 0.0, -1.0 );\n\t* // returns NaN\n\t*/\n\tfunction laplace2( mu, b ) {\n\t\tif (\n\t\t\tisnan( mu ) ||\n\t\t\tisnan( b ) ||\n\t\t\tb <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn laplace0( rand, mu, b );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Laplace (double exponential) distribution.\n*\n* @name laplace\n* @type {PRNG}\n* @param {number} mu - mean\n* @param {PositiveNumber} b - scale parameter\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = laplace( 0.0, 2.0 );\n* // returns <number>\n*\n* @example\n* var v = laplace( 0.0, -1.0 );\n* // returns NaN\n*/\nvar laplace = factory();\n\n\n// EXPORTS //\n\nmodule.exports = laplace;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Laplace (double exponential) distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/laplace\n*\n* @example\n* var laplace = require( '@stdlib/random/base/laplace' );\n*\n* var v = laplace( 0.5, 1.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/laplace' ).factory;\n* var laplace = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = laplace();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/laplace' ).factory;\n* var laplace = factory({\n*     'seed': 297\n* });\n*\n* var v = laplace( 3.0, 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/laplace' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a Laplace (double exponential) distribution.\n*\n* @name factory\n* @type {Function}\n* @param {number} [mu] - mean\n* @param {PositiveNumber} [b] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `b` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var laplace = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = laplace( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var laplace = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = laplace( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a Laplace (double exponential) distribution.\n*\n* @name laplace\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {number} mu - mean\n* @param {PositiveNumber} b - scale parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = laplace( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = laplace( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar laplace = factory();\n\n\n// EXPORTS //\n\nmodule.exports = laplace;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a Laplace (double exponential) distribution.\n*\n* @module @stdlib/random/array/laplace\n*\n* @example\n* var laplace = require( '@stdlib/random/array/laplace' );\n*\n* var arr = laplace( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var laplace = require( '@stdlib/random/array/laplace' );\n*\n* var arr = laplace( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var laplace = require( '@stdlib/random/array/laplace' );\n*\n* var rand = laplace.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var laplace = require( '@stdlib/random/array/laplace' );\n*\n* var rand = laplace.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {number} mu - mean\n* @param {PositiveNumber} c - scale parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( mu, c ) {\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositive( c ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', c ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar normalQuantile = require( '@stdlib/stats/base/dists/normal/quantile' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a L\u00E9vy distribution.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {number} pseudorandom number\n*/\nfunction levy( rand, mu, c ) {\n\tvar z = normalQuantile( 1.0 - ( rand() / 2.0 ), 0.0, 1.0 );\n\treturn mu + ( c / ( z*z ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = levy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar levy0 = require( './levy.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers from a L\u00E9vy distribution.\n*\n* @param {number} [mu] - location parameter\n* @param {PositiveNumber} [c] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `c` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var levy = factory( 0.0, 1.0 );\n* var v = levy();\n* // returns <number>\n*\n* @example\n* var levy = factory( -3.0, 0.5, {\n*     'seed': 297\n* });\n* var v = levy();\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar mu;\n\tvar c;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tmu = arguments[ 0 ];\n\t\tc = arguments[ 1 ];\n\t\terr = validate( mu, c );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( mu === void 0 ) {\n\t\tprng = levy2;\n\t} else {\n\t\tprng = levy1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'levy' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( mu === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ mu, c ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a L\u00E9vy distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = levy1();\n\t* // returns <number>\n\t*/\n\tfunction levy1() {\n\t\treturn levy0( rand, mu, c );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a L\u00E9vy distribution.\n\t*\n\t* @private\n\t* @param {number} mu - location parameter\n\t* @param {PositiveNumber} c - scale parameter\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = levy2( 0.0, 2.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = levy2( 0.0, -1.0 );\n\t* // returns NaN\n\t*/\n\tfunction levy2( mu, c ) {\n\t\tif (\n\t\t\tisnan( mu ) ||\n\t\t\tisnan( c ) ||\n\t\t\tc <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn levy0( rand, mu, c );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a L\u00E9vy distribution.\n*\n* @name levy\n* @type {PRNG}\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = levy( 0.0, 2.0 );\n* // returns <number>\n*\n* @example\n* var v = levy( 0.0, -1.0 );\n* // returns NaN\n*/\nvar levy = factory();\n\n\n// EXPORTS //\n\nmodule.exports = levy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* L\u00E9vy distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/levy\n*\n* @example\n* var levy = require( '@stdlib/random/base/levy' );\n*\n* var v = levy( 0.5, 1.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/levy' ).factory;\n* var levy = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = levy();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/levy' ).factory;\n* var levy = factory({\n*     'seed': 297\n* });\n*\n* var v = levy( 3.0, 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/levy' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a L\u00E9vy distribution.\n*\n* @name factory\n* @type {Function}\n* @param {number} [mu] - location parameter\n* @param {PositiveNumber} [c] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `c` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var levy = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = levy( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var levy = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = levy( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a L\u00E9vy distribution.\n*\n* @name levy\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = levy( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = levy( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar levy = factory();\n\n\n// EXPORTS //\n\nmodule.exports = levy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a L\u00E9vy distribution.\n*\n* @module @stdlib/random/array/levy\n*\n* @example\n* var levy = require( '@stdlib/random/array/levy' );\n*\n* var arr = levy( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var levy = require( '@stdlib/random/array/levy' );\n*\n* var arr = levy( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var levy = require( '@stdlib/random/array/levy' );\n*\n* var rand = levy.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var levy = require( '@stdlib/random/array/levy' );\n*\n* var rand = levy.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {number} mu - mean\n* @param {PositiveNumber} s - scale parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( mu, s ) {\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositive( s ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', s ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Returns pseudorandom number drawn from a logistic distribution.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {number} mu - mean\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} pseudorandom number\n*/\nfunction logistic( rand, mu, s ) {\n\tvar u = rand();\n\treturn mu + ( s*ln( u / (1.0-u) ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = logistic;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar logistic0 = require( './logistic.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers from a logistic distribution.\n*\n* @param {number} [mu] - mean parameter\n* @param {PositiveNumber} [s] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var logistic = factory( 0.0, 1.0 );\n*\n* var v = logistic();\n* // returns <number>\n*\n* @example\n* var logistic = factory( -3.0, 0.5, {\n*     'seed': 297\n* });\n* var v = logistic();\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar mu;\n\tvar s;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tmu = arguments[ 0 ];\n\t\ts = arguments[ 1 ];\n\t\terr = validate( mu, s );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( mu === void 0 ) {\n\t\tprng = logistic2;\n\t} else {\n\t\tprng = logistic1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'logistic' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( mu === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ mu, s ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns pseudorandom number drawn from a logistic distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = logistic1();\n\t* // returns <number>\n\t*/\n\tfunction logistic1() {\n\t\treturn logistic0( rand, mu, s );\n\t}\n\n\t/**\n\t* Returns pseudorandom number drawn from a logistic distribution.\n\t*\n\t* @private\n\t* @param {number} mu - mean\n\t* @param {PositiveNumber} s - scale parameter\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = logistic2( 0.0, 2.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = logistic2( 0.0, -1.0 );\n\t* // returns NaN\n\t*/\n\tfunction logistic2( mu, s ) {\n\t\tif (\n\t\t\tisnan( mu ) ||\n\t\t\tisnan( s ) ||\n\t\t\ts <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn logistic0( rand, mu, s );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns pseudorandom number drawn from a logistic distribution.\n*\n* @name logistic\n* @type {PRNG}\n* @param {number} mu - mean\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = logistic( 0.0, 2.0 );\n* // returns <number>\n*\n* @example\n* var v = logistic( 0.0, -1.0 );\n* // returns NaN\n*/\nvar logistic = factory();\n\n\n// EXPORTS //\n\nmodule.exports = logistic;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Logistic distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/logistic\n*\n* @example\n* var logistic = require( '@stdlib/random/base/logistic' );\n*\n* var v = logistic( 0.5, 1.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/logistic' ).factory;\n* var logistic = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = logistic();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/logistic' ).factory;\n* var logistic = factory({\n*     'seed': 297\n* });\n*\n* var v = logistic( 3.0, 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/logistic' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a logistic distribution.\n*\n* @name factory\n* @type {Function}\n* @param {number} [mu] - mean parameter\n* @param {PositiveNumber} [s] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var logistic = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = logistic( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var logistic = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = logistic( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a logistic distribution.\n*\n* @name logistic\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {number} mu - mean parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = logistic( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = logistic( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar logistic = factory();\n\n\n// EXPORTS //\n\nmodule.exports = logistic;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a logistic distribution.\n*\n* @module @stdlib/random/array/logistic\n*\n* @example\n* var logistic = require( '@stdlib/random/array/logistic' );\n*\n* var arr = logistic( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var logistic = require( '@stdlib/random/array/logistic' );\n*\n* var arr = logistic( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var logistic = require( '@stdlib/random/array/logistic' );\n*\n* var rand = logistic.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var logistic = require( '@stdlib/random/array/logistic' );\n*\n* var rand = logistic.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale paramter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( mu, sigma ) {\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositive( sigma ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar exp = require( '@stdlib/math/base/special/exp' );\n\n\n// MAIN //\n\n/**\n* Returns a log-normally distributed pseudorandom number.\n*\n* @private\n* @param {PRNG} randn - PRNG for standard normally distributed numbers\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {PositiveNumber} pseudorandom number\n*/\nfunction lognormal( randn, mu, sigma ) {\n\treturn exp( mu + (sigma*randn()) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = lognormal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randn = require( './../../../base/improved-ziggurat' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar lognormal0 = require( './lognormal.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers from a lognormal distribution.\n*\n* @param {number} [mu] - location parameter\n* @param {PositiveNumber} [sigma] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var lognormal = factory( 0.0, 1.0 );\n*\n* var v = lognormal();\n* // returns <number>\n*\n* @example\n* var lognormal = factory( -3.0, 0.5, {\n*     'seed': 297\n* });\n* var v = lognormal();\n* // returns <number>\n*/\nfunction factory() {\n\tvar sigma;\n\tvar rnorm;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar mu;\n\n\tif ( arguments.length === 0 ) {\n\t\trnorm = randn();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trnorm = randn({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trnorm = randn( opts );\n\t\t}\n\t} else {\n\t\tmu = arguments[ 0 ];\n\t\tsigma = arguments[ 1 ];\n\t\terr = validate( mu, sigma );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trnorm = randn({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trnorm = randn( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trnorm = randn();\n\t\t}\n\t}\n\tif ( mu === void 0 ) {\n\t\tprng = lognormal2;\n\t} else {\n\t\tprng = lognormal1;\n\t}\n\trand = rnorm.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'lognormal' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( mu === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ mu, sigma ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a log-normally distributed pseudorandom number with bound parameters `mu` and `sigma`.\n\t*\n\t* @private\n\t* @returns {PositiveNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = lognormal1();\n\t* // returns <number>\n\t*/\n\tfunction lognormal1() {\n\t\treturn lognormal0( rnorm, mu, sigma );\n\t}\n\n\t/**\n\t* Returns a log-normally distributed pseudorandom number with parameters `mu` and `sigma`.\n\t*\n\t* @private\n\t* @param {number} mu - location parameter\n\t* @param {PositiveNumber} sigma - scale parameter\n\t* @returns {PositiveNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = lognormal2( -2.0, 4.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = lognormal2( 0.0, -1.0 );\n\t* // returns NaN\n\t*/\n\tfunction lognormal2( mu, sigma ) {\n\t\tif (\n\t\t\tisnan( mu ) ||\n\t\t\tisnan( sigma ) ||\n\t\t\tsigma <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn lognormal0( rnorm, mu, sigma );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a log-normally distributed pseudorandom number with parameters `mu` and `sigma`.\n*\n* @name lognormal\n* @type {PRNG}\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {PositiveNumber} pseudorandom number\n*\n* @example\n* var v = lognormal( -2.0, 4.0 );\n* // returns <number>\n*\n* @example\n* var v = lognormal( 0.0, -1.0 );\n* // returns NaN\n*/\nvar lognormal = factory();\n\n\n// EXPORTS //\n\nmodule.exports = lognormal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Log-normal distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/lognormal\n*\n* @example\n* var lognormal = require( '@stdlib/random/base/lognormal' );\n*\n* var v = lognormal( 0.0, 1.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/lognormal' ).factory;\n* var lognormal = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = lognormal();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/lognormal' ).factory;\n* var lognormal = factory({\n*     'seed': 297\n* });\n*\n* var v = lognormal( 3.0, 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/lognormal' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a lognormal distribution.\n*\n* @name factory\n* @type {Function}\n* @param {number} [mu] - location parameter\n* @param {PositiveNumber} [sigma] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var lognormal = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = lognormal( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var lognormal = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = lognormal( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a lognormal distribution.\n*\n* @name lognormal\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = lognormal( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = lognormal( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar lognormal = factory();\n\n\n// EXPORTS //\n\nmodule.exports = lognormal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a lognormal distribution.\n*\n* @module @stdlib/random/array/lognormal\n*\n* @example\n* var lognormal = require( '@stdlib/random/array/lognormal' );\n*\n* var arr = lognormal( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var lognormal = require( '@stdlib/random/array/lognormal' );\n*\n* var arr = lognormal( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var lognormal = require( '@stdlib/random/array/lognormal' );\n*\n* var rand = lognormal.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var lognormal = require( '@stdlib/random/array/lognormal' );\n*\n* var rand = lognormal.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar INT32_MAX = require( '@stdlib/constants/int32/max' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\nvar MAX = INT32_MAX - 1;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom integer on the interval \\\\([1, 2^{31}-1)\\\\).\n*\n* @private\n* @returns {PositiveInteger} pseudorandom integer\n*\n* @example\n* var v = randint32();\n* // returns <number>\n*/\nfunction randint32() {\n\tvar v = floor( 1.0 + (MAX*Math.random()) ); // eslint-disable-line stdlib/no-builtin-math\n\treturn v|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = randint32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isInt32Array = require( '@stdlib/assert/is-int32array' );\nvar format = require( '@stdlib/string/format' );\nvar INT32_MAX = require( '@stdlib/constants/int32/max' );\nvar Int32Array = require( '@stdlib/array/int32' );\nvar gcopy = require( '@stdlib/blas/base/gcopy' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar randint32 = require( './rand_int32.js' );\n\n\n// VARIABLES //\n\nvar NORMALIZATION_CONSTANT = (INT32_MAX - 1)|0; // asm type annotation\nvar MAX_SEED = (INT32_MAX - 1)|0; // asm type annotation\nvar A = 16807|0; // asm type annotation\n\n// Define the state array schema version:\nvar STATE_ARRAY_VERSION = 1; // NOTE: anytime the state array schema changes, this value should be incremented!!!\n\n// Define the number of sections in the state array:\nvar NUM_STATE_SECTIONS = 2; // state, seed\n\n// Define the index offset of the \"state\" section in the state array:\nvar STATE_SECTION_OFFSET = 2; // | version | num_sections | state_length | ...state | seed_length | ...seed |\n\n// Define the index offset of the seed section in the state array:\nvar SEED_SECTION_OFFSET = 4; // | version | num_sections | state_length | ...state | seed_length | ...seed |\n\n// Define the length of the \"fixed\" length portion of the state array:\nvar STATE_FIXED_LENGTH = 5; // 1 (version) + 1 (num_sections) + 1 (state_length) + 1 (state) + 1 (seed_length)\n\n\n// FUNCTIONS //\n\n/**\n* Verifies state array integrity.\n*\n* @private\n* @param {Int32Array} state - state array\n* @param {boolean} FLG - flag indicating whether the state array was provided as an option (true) or an argument (false)\n* @returns {(Error|null)} an error or `null`\n*/\nfunction verifyState( state, FLG ) {\n\tvar s1;\n\tif ( FLG ) {\n\t\ts1 = 'option';\n\t} else {\n\t\ts1 = 'argument';\n\t}\n\t// The state array must have a minimum length...\n\tif ( state.length < STATE_FIXED_LENGTH+1 ) {\n\t\treturn new RangeError( format( 'invalid %s. State array has insufficient length.', s1 ) );\n\t}\n\t// The first element of the state array must equal the supported state array schema version...\n\tif ( state[ 0 ] !== STATE_ARRAY_VERSION ) {\n\t\treturn new RangeError( format( 'invalid %s. State array has an incompatible schema version. Expected: `%s`. Actual: `%s`.', s1, STATE_ARRAY_VERSION, state[ 0 ] ) );\n\t}\n\t// The second element of the state array must contain the number of sections...\n\tif ( state[ 1 ] !== NUM_STATE_SECTIONS ) {\n\t\treturn new RangeError( format( 'invalid %s. State array has an incompatible number of sections. Expected: `%s`. Actual: `%s`.', s1, NUM_STATE_SECTIONS, state[ 1 ] ) );\n\t}\n\t// The length of the \"state\" section must equal `1`...\n\tif ( state[ STATE_SECTION_OFFSET ] !== 1 ) {\n\t\treturn new RangeError( format( 'invalid %s. State array has an incompatible state length. Expected: `%u`. Actual: `%u`.', s1, 1, state[ STATE_SECTION_OFFSET ] ) );\n\t}\n\t// The length of the \"seed\" section much match the empirical length...\n\tif ( state[ SEED_SECTION_OFFSET ] !== state.length-STATE_FIXED_LENGTH ) {\n\t\treturn new RangeError( format( 'invalid %s. State array length is incompatible with seed section length. Expected: `%u`. Actual: `%u`.', s1, state.length-STATE_FIXED_LENGTH, state[ SEED_SECTION_OFFSET ] ) );\n\t}\n\treturn null;\n}\n\n\n// MAIN //\n\n/**\n* Returns a linear congruential pseudorandom number generator (LCG) based on Park and Miller.\n*\n* @param {Options} [options] - options\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} a seed must be either a positive integer less than the maximum signed 32-bit integer or an array-like object containing integers less than the maximum signed 32-bit integer\n* @throws {RangeError} a numeric seed must be a positive integer less than the maximum signed 32-bit integer\n* @throws {TypeError} state must be an `Int32Array`\n* @throws {Error} must provide a valid state\n* @throws {TypeError} `copy` option must be a boolean\n* @returns {PRNG} LCG PRNG\n*\n* @example\n* var minstd = factory();\n*\n* var v = minstd();\n* // returns <number>\n*\n* @example\n* // Return a seeded LCG:\n* var minstd = factory({\n*     'seed': 1234\n* });\n*\n* var v = minstd();\n* // returns 20739838\n*/\nfunction factory( options ) {\n\tvar STATE;\n\tvar state;\n\tvar opts;\n\tvar seed;\n\tvar slen;\n\tvar err;\n\n\topts = {};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'state' ) ) {\n\t\t\tstate = options.state;\n\t\t\topts.state = true;\n\t\t\tif ( !isInt32Array( state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be an Int32Array. Option: `%s`.', 'state', state ) );\n\t\t\t}\n\t\t\terr = verifyState( state, true );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tSTATE = state;\n\t\t\t} else {\n\t\t\t\tSTATE = new Int32Array( state.length );\n\t\t\t\tgcopy( state.length, state, 1, STATE, 1 );\n\t\t\t}\n\t\t\t// Create a state \"view\":\n\t\t\tstate = new Int32Array( STATE.buffer, STATE.byteOffset+((STATE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), 1 );\n\n\t\t\t// Create a seed \"view\":\n\t\t\tseed = new Int32Array( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), state[ SEED_SECTION_OFFSET ] );\n\t\t}\n\t\t// If provided a PRNG state, we ignore the `seed` option...\n\t\tif ( seed === void 0 ) {\n\t\t\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\t\t\tseed = options.seed;\n\t\t\t\topts.seed = true;\n\t\t\t\tif ( isPositiveInteger( seed ) ) {\n\t\t\t\t\tif ( seed > MAX_SEED ) {\n\t\t\t\t\t\tthrow new RangeError( format( 'invalid option. `%s` option must be a positive integer less than the maximum signed 32-bit integer. Option: `%u`.', 'seed', seed ) );\n\t\t\t\t\t}\n\t\t\t\t\tseed |= 0; // asm type annotation\n\t\t\t\t} else if ( isCollection( seed ) && seed.length > 0 ) {\n\t\t\t\t\tslen = seed.length;\n\t\t\t\t\tSTATE = new Int32Array( STATE_FIXED_LENGTH+slen );\n\n\t\t\t\t\t// Initialize sections:\n\t\t\t\t\tSTATE[ 0 ] = STATE_ARRAY_VERSION;\n\t\t\t\t\tSTATE[ 1 ] = NUM_STATE_SECTIONS;\n\t\t\t\t\tSTATE[ STATE_SECTION_OFFSET ] = 1;\n\t\t\t\t\tSTATE[ SEED_SECTION_OFFSET ] = slen;\n\n\t\t\t\t\t// Copy the provided seed array to prevent external mutation, as mutation would lead to an inability to reproduce PRNG values according to the PRNG's stated seed:\n\t\t\t\t\tgcopy.ndarray( slen, seed, 1, 0, STATE, 1, SEED_SECTION_OFFSET+1 );\n\n\t\t\t\t\t// Create a state \"view\":\n\t\t\t\t\tstate = new Int32Array( STATE.buffer, STATE.byteOffset+((STATE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), 1 );\n\n\t\t\t\t\t// Create a seed \"view\":\n\t\t\t\t\tseed = new Int32Array( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), slen );\n\n\t\t\t\t\t// Initialize the internal PRNG state:\n\t\t\t\t\tstate[ 0 ] = seed[ 0 ];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than the maximum signed 32-bit integer or an array-like object containing integer values less than the maximum signed 32-bit integer. Option: `%s`.', 'seed', seed ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tseed = randint32()|0; // asm type annotation\n\t\t\t}\n\t\t}\n\t} else {\n\t\tseed = randint32()|0; // asm type annotation\n\t}\n\tif ( state === void 0 ) {\n\t\tSTATE = new Int32Array( STATE_FIXED_LENGTH+1 );\n\n\t\t// Initialize sections:\n\t\tSTATE[ 0 ] = STATE_ARRAY_VERSION;\n\t\tSTATE[ 1 ] = NUM_STATE_SECTIONS;\n\t\tSTATE[ STATE_SECTION_OFFSET ] = 1;\n\t\tSTATE[ SEED_SECTION_OFFSET ] = 1;\n\t\tSTATE[ SEED_SECTION_OFFSET+1 ] = seed;\n\n\t\t// Create a state \"view\":\n\t\tstate = new Int32Array( STATE.buffer, STATE.byteOffset+((STATE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), 1 );\n\n\t\t// Create a seed \"view\":\n\t\tseed = new Int32Array( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), 1 );\n\n\t\t// Initialize the internal PRNG state:\n\t\tstate[ 0 ] = seed[ 0 ];\n\t}\n\tsetReadOnly( minstd, 'NAME', 'minstd' );\n\tsetReadOnlyAccessor( minstd, 'seed', getSeed );\n\tsetReadOnlyAccessor( minstd, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( minstd, 'state', getState, setState );\n\tsetReadOnlyAccessor( minstd, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( minstd, 'byteLength', getStateSize );\n\tsetReadOnly( minstd, 'toJSON', toJSON );\n\tsetReadOnly( minstd, 'MIN', 1 );\n\tsetReadOnly( minstd, 'MAX', INT32_MAX-1 );\n\tsetReadOnly( minstd, 'normalized', normalized );\n\n\tsetReadOnly( normalized, 'NAME', minstd.NAME );\n\tsetReadOnlyAccessor( normalized, 'seed', getSeed );\n\tsetReadOnlyAccessor( normalized, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( normalized, 'state', getState, setState );\n\tsetReadOnlyAccessor( normalized, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( normalized, 'byteLength', getStateSize );\n\tsetReadOnly( normalized, 'toJSON', toJSON );\n\tsetReadOnly( normalized, 'MIN', (minstd.MIN-1.0) / NORMALIZATION_CONSTANT );\n\tsetReadOnly( normalized, 'MAX', (minstd.MAX-1.0) / NORMALIZATION_CONSTANT );\n\n\treturn minstd;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMINSTD} seed\n\t*/\n\tfunction getSeed() {\n\t\tvar len = STATE[ SEED_SECTION_OFFSET ];\n\t\treturn gcopy( len, seed, 1, new Int32Array( len ), 1 );\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn STATE[ SEED_SECTION_OFFSET ];\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn STATE.length;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn STATE.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* ## Notes\n\t*\n\t* -   The PRNG state array is comprised of a preamble followed by `2` sections:\n\t*\n\t*     0.  preamble (version + number of sections)\n\t*     1.  internal PRNG state\n\t*     2.  PRNG seed\n\t*\n\t* -   The first element of the PRNG state array preamble is the state array schema version.\n\t*\n\t* -   The second element of the PRNG state array preamble is the number of state array sections (i.e., `2`).\n\t*\n\t* -   The first element of each section following the preamble specifies the section length. The remaining section elements comprise the section contents.\n\t*\n\t* @private\n\t* @returns {PRNGStateMINSTD} current state\n\t*/\n\tfunction getState() {\n\t\tvar len = STATE.length;\n\t\treturn gcopy( len, STATE, 1, new Int32Array( len ), 1 );\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* ## Notes\n\t*\n\t* -   If PRNG state is \"shared\" (meaning a state array was provided during PRNG creation and **not** copied) and one sets the generator state to a state array having a different length, the PRNG does **not** update the existing shared state and, instead, points to the newly provided state array. In order to synchronize PRNG output according to the new shared state array, the state array for **each** relevant PRNG must be **explicitly** set.\n\t* -   If PRNG state is \"shared\" and one sets the generator state to a state array of the same length, the PRNG state is updated (along with the state of all other PRNGs sharing the PRNG's state array).\n\t*\n\t* @private\n\t* @param {PRNGStateMINSTD} s - generator state\n\t* @throws {TypeError} must provide an `Int32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tvar err;\n\t\tif ( !isInt32Array( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an Int32Array. Value: `%s`.', s ) );\n\t\t}\n\t\terr = verifyState( s, false );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( opts.copy === false ) {\n\t\t\tif ( opts.state && s.length === STATE.length ) {\n\t\t\t\tgcopy( s.length, s, 1, STATE, 1 ); // update current shared state\n\t\t\t} else {\n\t\t\t\tSTATE = s; // point to new shared state\n\t\t\t\topts.state = true; // setting this flag allows updating a shared state even if a state array was not provided at PRNG creation\n\t\t\t}\n\t\t} else {\n\t\t\t// Check if we can reuse allocated memory...\n\t\t\tif ( s.length !== STATE.length ) {\n\t\t\t\tSTATE = new Int32Array( s.length ); // reallocate\n\t\t\t}\n\t\t\tgcopy( s.length, s, 1, STATE, 1 );\n\t\t}\n\t\t// Create a new state \"view\":\n\t\tstate = new Int32Array( STATE.buffer, STATE.byteOffset+((STATE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), 1 );\n\n\t\t// Create a new seed \"view\":\n\t\tseed = new Int32Array( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), STATE[ SEED_SECTION_OFFSET ] );\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = minstd.NAME;\n\t\tout.state = typedarray2json( STATE );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n\n\t/**\n\t* Generates a pseudorandom integer on the interval \\\\( [1,2^{31}-1) \\\\).\n\t*\n\t* @private\n\t* @returns {integer32} pseudorandom integer\n\t*/\n\tfunction minstd() {\n\t\tvar s = state[ 0 ]|0; // asm type annotation\n\t\ts = ( (A*s)%INT32_MAX )|0; // asm type annotation\n\t\tstate[ 0 ] = s;\n\t\treturn s|0; // asm type annotation\n\t}\n\n\t/**\n\t* Generates a pseudorandom number on the interval \\\\( [0,1) \\\\).\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*/\n\tfunction normalized() {\n\t\treturn (minstd()-1) / NORMALIZATION_CONSTANT;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\nvar randint32 = require( './rand_int32.js' );\n\n\n// MAIN //\n\n/**\n* Generates a pseudorandom integer on the interval \\\\( [1,2^{31}-1) \\\\).\n*\n* ## Method\n*\n* Linear congruential generators (LCGs) use the recurrence relation\n*\n* ```tex\n* X_{n+1} = ( a \\cdot X_n + c ) \\operatorname{mod}(m)\n* ```\n*\n* where the modulus \\\\( m \\\\) is a prime number or power of a prime number and \\\\( a \\\\) is a primitive root modulo \\\\( m \\\\).\n*\n* <!-- <note> -->\n*\n* For an LCG to be a Lehmer RNG, the seed \\\\( X_0 \\\\) must be coprime to \\\\( m \\\\).\n*\n* <!-- </note> -->\n*\n* In this implementation, the constants \\\\( a \\\\), \\\\( c \\\\), and \\\\( m \\\\) have the values\n*\n* ```tex\n* \\begin{align*}\n* a &= 7^5 = 16807 \\\\\n* c &= 0 \\\\\n* m &= 2^{31} - 1 = 2147483647\n* \\end{align*}\n* ```\n*\n* <!-- <note> -->\n*\n* The constant \\\\( m \\\\) is a Mersenne prime (modulo \\\\(31\\\\)).\n*\n* <!-- </note> -->\n*\n* <!-- <note> -->\n*\n* The constant \\\\( a \\\\) is a primitive root (modulo \\\\(31\\\\)).\n*\n* <!-- </note> -->\n*\n* Accordingly, the maximum possible product is\n*\n* ```tex\n* 16807 \\cdot (m - 1) \\approx 2^{46}\n* ```\n*\n* The values for \\\\( a \\\\), \\\\( c \\\\), and \\\\( m \\\\) are taken from Park and Miller, \"Random Number Generators: Good Ones Are Hard To Find\". Park's and Miller's article is also the basis for a recipe in the second edition of _Numerical Recipes in C_.\n*\n*\n* ## Notes\n*\n* -   The generator has a period of approximately \\\\(2.1\\mbox{e}9\\\\) (see [Numerical Recipes in C, 2nd Edition](#references), p. 279).\n*\n*\n* ## References\n*\n* -   Park, S. K., and K. W. Miller. 1988. \"Random Number Generators: Good Ones Are Hard to Find.\" _Communications of the ACM_ 31 (10). New York, NY, USA: ACM: 1192\u20131201. doi:[10.1145/63039.63042](http://dx.doi.org/10.1145/63039.63042).\n* -   Press, William H., Brian P. Flannery, Saul A. Teukolsky, and William T. Vetterling. 1992. _Numerical Recipes in C: The Art of Scientific Computing, Second Edition_. Cambridge University Press.\n*\n*\n* @function minstd\n* @type {PRNG}\n* @returns {PositiveInteger} pseudorandom integer\n*\n* @example\n* var v = minstd();\n* // returns <number>\n*/\nvar minstd = factory({\n\t'seed': randint32()\n});\n\n\n// EXPORTS //\n\nmodule.exports = minstd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* A linear congruential pseudorandom number generator (LCG) based on Park and Miller.\n*\n* @module @stdlib/random/base/minstd\n*\n* @example\n* var minstd = require( '@stdlib/random/base/minstd' );\n*\n* var v = minstd();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/minstd' ).factory;\n*\n* var minstd = factory({\n*     'seed': 1234\n* });\n*\n* var v = minstd();\n* // returns 20739838\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"idtype\": \"float64\",\n  \"ndtype\": \"float64\"\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fdtypes = require( '@stdlib/array/typed-real-float-dtypes' );\nvar rdtypes = require( '@stdlib/array/typed-real-dtypes' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar RDTYPES = rdtypes();\nvar FDTYPES = fdtypes();\nRDTYPES.push( 'generic' );\nFDTYPES.push( 'generic' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* ## Notes\n*\n* -   Validation modes:\n*\n*     -   `0`: factory validation\n*     -   `1`: integer PRNG validation\n*     -   `2`: normalized PRNG validation\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dtype] - output array data type\n* @param {string} [options.idtype] - output array data type when generating integers\n* @param {string} [options.rdtype] - output array data type when generating normalized numbers\n* @param {integer} mode - validation mode\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, options, 0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options, mode ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( mode === 0 ) {\n\t\tif ( hasOwnProp( options, 'idtype' ) ) {\n\t\t\topts.idtype = options.idtype;\n\t\t\tif ( RDTYPES.indexOf( opts.idtype ) < 0 ) {\n\t\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'idtype', RDTYPES.join( '\", \"' ), opts.idtype ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'ndtype' ) ) {\n\t\t\topts.ndtype = options.ndtype;\n\t\t\tif ( FDTYPES.indexOf( opts.ndtype ) < 0 ) {\n\t\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'ndtype', FDTYPES.join( '\", \"' ), opts.ndtype ) );\n\t\t\t}\n\t\t}\n\t} else if ( mode === 1 && hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( RDTYPES.indexOf( opts.dtype ) < 0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', RDTYPES.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t} else if ( hasOwnProp( options, 'dtype' ) ) { // mode === 2\n\t\topts.dtype = options.dtype;\n\t\tif ( FDTYPES.indexOf( opts.dtype ) < 0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', FDTYPES.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar base = require( './../../../base/minstd' );\nvar ctors = require( '@stdlib/array/typed-real-ctors' );\nvar filledBy = require( '@stdlib/array/base/filled-by' );\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar format = require( '@stdlib/string/format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers generated using a linear congruential pseudorandom number generator (LCG).\n*\n* @param {Options} [options] - function options\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.idtype=\"float64\"] - default data type when generating integers\n* @param {string} [options.ndtype=\"float64\"] - default data type when generating normalized numbers\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var minstd = factory();\n* // returns <Function>\n*\n* var arr = minstd( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var minstd = factory();\n* // returns <Function>\n*\n* var arr = minstd( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var minstd = factory();\n* // returns <Function>\n*\n* var arr = minstd.normalized( 10 );\n* // returns <Float64Array>\n*/\nfunction factory() {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\n\topts = {\n\t\t'idtype': defaults.idtype,\n\t\t'ndtype': defaults.ndtype\n\t};\n\n\tnargs = arguments.length;\n\trand = minstd;\n\tif ( nargs === 0 ) {\n\t\tprng = base;\n\t} else if ( nargs === 1 ) {\n\t\toptions = arguments[ 0 ];\n\t\tprng = base.factory( options );\n\t\terr = validate( opts, options, 0 );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\tsetReadOnly( rand, 'PRNG', prng );\n\tsetReadOnly( rand, 'normalized', normalized );\n\treturn rand;\n\n\t/**\n\t* Returns an array containing pseudorandom integers on the interval `[1, 2147483646]`.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} len - array length\n\t* @param {Options} [options] - function options\n\t* @param {string} [options.dtype] - output array data type\n\t* @throws {TypeError} first argument must be a nonnegative integer\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {(Array|TypedArray)} output array\n\t*/\n\tfunction minstd( len, options ) {\n\t\tvar ctor;\n\t\tvar out;\n\t\tvar err;\n\t\tvar dt;\n\t\tvar o;\n\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t\t}\n\t\to = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( o, options, 1 );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tdt = o.dtype || opts.idtype;\n\t\tif ( dt === 'generic' ) {\n\t\t\treturn filledBy( len, prng );\n\t\t}\n\t\tctor = ctors( dt );\n\t\tout = new ctor( len );\n\t\tnullary( [ out ], [ len ], [ 1 ], prng );\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns an array containing pseudorandom numbers on the interval `[0, 1)`.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} len - array length\n\t* @param {Options} [options] - function options\n\t* @param {string} [options.dtype] - output array data type\n\t* @throws {TypeError} first argument must be a nonnegative integer\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {(Array|TypedArray)} output array\n\t*/\n\tfunction normalized( len, options ) {\n\t\tvar ctor;\n\t\tvar out;\n\t\tvar err;\n\t\tvar dt;\n\t\tvar o;\n\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t\t}\n\t\to = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( o, options, 2 );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tdt = o.dtype || opts.ndtype;\n\t\tif ( dt === 'generic' ) {\n\t\t\treturn filledBy( len, prng.normalized );\n\t\t}\n\t\tctor = ctors( dt );\n\t\tout = new ctor( len );\n\t\tnullary( [ out ], [ len ], [ 1 ], prng.normalized );\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {Int32Array} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {Int32Array} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {Int32Array} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom integers on the interval `[1, 2147483646]`.\n*\n* @name minstd\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = minstd( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = minstd.normalized( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = minstd( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar minstd = factory();\n\n\n// EXPORTS //\n\nmodule.exports = minstd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers generated using a linear congruential pseudorandom number generator (LCG).\n*\n* @module @stdlib/random/array/minstd\n*\n* @example\n* var minstd = require( '@stdlib/random/array/minstd' );\n*\n* var arr = minstd( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var minstd = require( '@stdlib/random/array/minstd' );\n*\n* var arr = minstd( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var minstd = require( '@stdlib/random/array/minstd' );\n*\n* var arr = minstd.normalized( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var minstd = require( '@stdlib/random/array/minstd' );\n*\n* var arr = minstd.normalized( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var minstd = require( '@stdlib/random/array/minstd' );\n*\n* var rand = minstd.factory();\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var minstd = require( '@stdlib/random/array/minstd' );\n*\n* var rand = minstd.factory();\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"normalized\": \"main.normalized\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// VARIABLES //\n\nvar NUM_WARMUPS = 8;\n\n\n// MAIN //\n\n/**\n* Initializes a shuffle table.\n*\n* @private\n* @param {PRNG} rand - pseudorandom number generator\n* @param {Int32Array} table - table\n* @param {PositiveInteger} N - table size\n* @throws {Error} PRNG returned `NaN`\n* @returns {NumberArray} shuffle table\n*/\nfunction createTable( rand, table, N ) {\n\tvar v;\n\tvar i;\n\n\t// \"warm-up\" the PRNG...\n\tfor ( i = 0; i < NUM_WARMUPS; i++ ) {\n\t\tv = rand();\n\n\t\t// Prevent the above loop from being discarded by the compiler...\n\t\tif ( isnan( v ) ) {\n\t\t\tthrow new Error( 'unexpected error. PRNG returned NaN.' );\n\t\t}\n\t}\n\t// Initialize the shuffle table...\n\tfor ( i = N-1; i >= 0; i-- ) {\n\t\ttable[ i ] = rand();\n\t}\n\treturn table;\n}\n\n\n// EXPORTS //\n\nmodule.exports = createTable;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar INT32_MAX = require( '@stdlib/constants/int32/max' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\nvar MAX = INT32_MAX - 1;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom integer on the interval \\\\([1, 2^{31}-1)\\\\).\n*\n* @private\n* @returns {PositiveInteger} pseudorandom integer\n*\n* @example\n* var v = randint32();\n* // returns <number>\n*/\nfunction randint32() {\n\tvar v = floor( 1.0 + (MAX*Math.random()) ); // eslint-disable-line stdlib/no-builtin-math\n\treturn v|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = randint32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isInt32Array = require( '@stdlib/assert/is-int32array' );\nvar gcopy = require( '@stdlib/blas/base/gcopy' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar Int32Array = require( '@stdlib/array/int32' );\nvar INT32_MAX = require( '@stdlib/constants/int32/max' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar createTable = require( './create_table.js' );\nvar randint32 = require( './rand_int32.js' );\n\n\n// VARIABLES //\n\nvar NORMALIZATION_CONSTANT = (INT32_MAX - 1)|0; // asm type annotation\nvar MAX_SEED = (INT32_MAX - 1)|0; // asm type annotation\nvar A = 16807|0; // asm type annotation\n\n// Define the number of elements in the shuffle table:\nvar TABLE_LENGTH = 32;\n\n// Define the state array schema version:\nvar STATE_ARRAY_VERSION = 1; // NOTE: anytime the state array schema changes, this value should be incremented!!!\n\n// Define the number of sections in the state array:\nvar NUM_STATE_SECTIONS = 3; // table, other, seed\n\n// Define the index offset of the \"table\" section in the state array:\nvar TABLE_SECTION_OFFSET = 2; // | version | num_sections | table_length | ...table | other_length | shuffle_state | prng_state | seed_length | ...seed |\n\n// Define the index offset of the \"state\" section in the state array:\nvar STATE_SECTION_OFFSET = TABLE_LENGTH + 3; // | version | num_sections | table_length | ...table | state_length | shuffle_state | prng_state | seed_length | ...seed |\n\n// Define the index offset of the seed section in the state array:\nvar SEED_SECTION_OFFSET = TABLE_LENGTH + 6; // | version | num_sections | table_length | ...table | state_length | shuffle_state | prng_state | seed_length | ...seed |\n\n// Define the length of the \"fixed\" length portion of the state array:\nvar STATE_FIXED_LENGTH = TABLE_LENGTH + 7; // 1 (version) + 1 (num_sections) + 1 (table_length) + TABLE_LENGTH (table) + 1 (state_length) + 1 (shuffle_state) + 1 (prng_state) + 1 (seed_length)\n\n// Define the indices for the shuffle table and PRNG states:\nvar SHUFFLE_STATE = STATE_SECTION_OFFSET + 1;\nvar PRNG_STATE = STATE_SECTION_OFFSET + 2;\n\n\n// FUNCTIONS //\n\n/**\n* Verifies state array integrity.\n*\n* @private\n* @param {Int32Array} state - state array\n* @param {boolean} FLG - flag indicating whether the state array was provided as an option (true) or an argument (false)\n* @returns {(Error|null)} an error or `null`\n*/\nfunction verifyState( state, FLG ) {\n\tvar s1;\n\tif ( FLG ) {\n\t\ts1 = 'option';\n\t} else {\n\t\ts1 = 'argument';\n\t}\n\t// The state array must have a minimum length...\n\tif ( state.length < STATE_FIXED_LENGTH+1 ) {\n\t\treturn new RangeError( format( 'invalid %s. State array has insufficient length.', s1 ) );\n\t}\n\t// The first element of the state array must equal the supported state array schema version...\n\tif ( state[ 0 ] !== STATE_ARRAY_VERSION ) {\n\t\treturn new RangeError( format( 'invalid %s. State array has an incompatible schema version. Expected: `%s`. Actual: `%s`.', s1, STATE_ARRAY_VERSION, state[ 0 ] ) );\n\t}\n\t// The second element of the state array must contain the number of sections...\n\tif ( state[ 1 ] !== NUM_STATE_SECTIONS ) {\n\t\treturn new RangeError( format( 'invalid %s. State array has an incompatible number of sections. Expected: `%s`. Actual: `%s`.', s1, NUM_STATE_SECTIONS, state[ 1 ] ) );\n\t}\n\t// The length of the \"table\" section must equal `TABLE_LENGTH`...\n\tif ( state[ TABLE_SECTION_OFFSET ] !== TABLE_LENGTH ) {\n\t\treturn new RangeError( format( 'invalid %s. State array has an incompatible table length. Expected: `%s`. Actual: `%s`.', s1, TABLE_LENGTH, state[ TABLE_SECTION_OFFSET ] ) );\n\t}\n\t// The length of the \"state\" section must equal `2`...\n\tif ( state[ STATE_SECTION_OFFSET ] !== 2 ) {\n\t\treturn new RangeError( format( 'invalid %s. State array has an incompatible state length. Expected: `%u`. Actual: `%u`.', s1, 2, state[ STATE_SECTION_OFFSET ] ) );\n\t}\n\t// The length of the \"seed\" section much match the empirical length...\n\tif ( state[ SEED_SECTION_OFFSET ] !== state.length-STATE_FIXED_LENGTH ) {\n\t\treturn new RangeError( format( 'invalid %s. State array length is incompatible with seed section length. Expected: `%u`. Actual: `%u`.', s1, state.length-STATE_FIXED_LENGTH, state[ SEED_SECTION_OFFSET ] ) );\n\t}\n\treturn null;\n}\n\n\n// MAIN //\n\n/**\n* Returns a linear congruential pseudorandom number generator (LCG) whose output is shuffled.\n*\n* @param {Options} [options] - options\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} a seed must be either a positive integer less than the maximum signed 32-bit integer or an array-like object containing integers less than the maximum signed 32-bit integer\n* @throws {RangeError} a numeric seed must be a positive integer less than the maximum signed 32-bit integer\n* @throws {TypeError} state must be an `Int32Array`\n* @throws {Error} must provide a valid state\n* @throws {TypeError} `copy` option must be a boolean\n* @returns {PRNG} shuffled LCG PRNG\n*\n* @example\n* var minstd = factory();\n*\n* var v = minstd();\n* // returns <number>\n*\n* @example\n* // Return a seeded LCG:\n* var minstd = factory({\n*     'seed': 1234\n* });\n*\n* var v = minstd();\n* // returns 1421600654\n*/\nfunction factory( options ) {\n\tvar STATE;\n\tvar state;\n\tvar opts;\n\tvar seed;\n\tvar slen;\n\tvar err;\n\n\topts = {};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'state' ) ) {\n\t\t\tstate = options.state;\n\t\t\topts.state = true;\n\t\t\tif ( !isInt32Array( state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be an Int32Array. Option: `%s`.', 'state', state ) );\n\t\t\t}\n\t\t\terr = verifyState( state, true );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tSTATE = state;\n\t\t\t} else {\n\t\t\t\tSTATE = new Int32Array( state.length );\n\t\t\t\tgcopy( state.length, state, 1, STATE, 1 );\n\t\t\t}\n\t\t\t// Create a state (table) \"view\":\n\t\t\tstate = new Int32Array( STATE.buffer, STATE.byteOffset+((TABLE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), TABLE_LENGTH );\n\n\t\t\t// Create a seed \"view\":\n\t\t\tseed = new Int32Array( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), state[ SEED_SECTION_OFFSET ] );\n\t\t}\n\t\t// If provided a PRNG state, we ignore the `seed` option...\n\t\tif ( seed === void 0 ) {\n\t\t\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\t\t\tseed = options.seed;\n\t\t\t\topts.seed = true;\n\t\t\t\tif ( isPositiveInteger( seed ) ) {\n\t\t\t\t\tif ( seed > MAX_SEED ) {\n\t\t\t\t\t\tthrow new RangeError( format( 'invalid option. `%s` option must be a positive integer less than the maximum signed 32-bit integer. Option: `%u`.', 'seed', seed ) );\n\t\t\t\t\t}\n\t\t\t\t\tseed |= 0; // asm type annotation\n\t\t\t\t} else if ( isCollection( seed ) && seed.length > 0 ) {\n\t\t\t\t\tslen = seed.length;\n\t\t\t\t\tSTATE = new Int32Array( STATE_FIXED_LENGTH+slen );\n\n\t\t\t\t\t// Initialize sections:\n\t\t\t\t\tSTATE[ 0 ] = STATE_ARRAY_VERSION;\n\t\t\t\t\tSTATE[ 1 ] = NUM_STATE_SECTIONS;\n\t\t\t\t\tSTATE[ TABLE_SECTION_OFFSET ] = TABLE_LENGTH;\n\t\t\t\t\tSTATE[ STATE_SECTION_OFFSET ] = 2;\n\t\t\t\t\tSTATE[ PRNG_STATE ] = seed[ 0 ];\n\t\t\t\t\tSTATE[ SEED_SECTION_OFFSET ] = slen;\n\n\t\t\t\t\t// Copy the provided seed array to prevent external mutation, as mutation would lead to an inability to reproduce PRNG values according to the PRNG's stated seed:\n\t\t\t\t\tgcopy.ndarray( slen, seed, 1, 0, STATE, 1, SEED_SECTION_OFFSET+1 );\n\n\t\t\t\t\t// Create a state (table) \"view\":\n\t\t\t\t\tstate = new Int32Array( STATE.buffer, STATE.byteOffset+((TABLE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), TABLE_LENGTH );\n\n\t\t\t\t\t// Create a seed \"view\":\n\t\t\t\t\tseed = new Int32Array( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), slen );\n\n\t\t\t\t\t// Initialize the internal PRNG state:\n\t\t\t\t\tstate = createTable( minstd, state, TABLE_LENGTH );\n\t\t\t\t\tSTATE[ SHUFFLE_STATE ] = state[ 0 ];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than the maximum signed 32-bit integer or an array-like object containing integer values less than the maximum signed 32-bit integer. Option: `%s`.', 'seed', seed ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tseed = randint32()|0; // asm type annotation\n\t\t\t}\n\t\t}\n\t} else {\n\t\tseed = randint32()|0; // asm type annotation\n\t}\n\tif ( state === void 0 ) {\n\t\tSTATE = new Int32Array( STATE_FIXED_LENGTH+1 );\n\n\t\t// Initialize sections:\n\t\tSTATE[ 0 ] = STATE_ARRAY_VERSION;\n\t\tSTATE[ 1 ] = NUM_STATE_SECTIONS;\n\t\tSTATE[ TABLE_SECTION_OFFSET ] = TABLE_LENGTH;\n\t\tSTATE[ STATE_SECTION_OFFSET ] = 2;\n\t\tSTATE[ PRNG_STATE ] = seed;\n\t\tSTATE[ SEED_SECTION_OFFSET ] = 1;\n\t\tSTATE[ SEED_SECTION_OFFSET+1 ] = seed;\n\n\t\t// Create a state (table) \"view\":\n\t\tstate = new Int32Array( STATE.buffer, STATE.byteOffset+((TABLE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), TABLE_LENGTH );\n\n\t\t// Create a seed \"view\":\n\t\tseed = new Int32Array( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), 1 );\n\n\t\t// Initialize the internal PRNG state:\n\t\tstate = createTable( minstd, state, TABLE_LENGTH );\n\t\tSTATE[ SHUFFLE_STATE ] = state[ 0 ];\n\t}\n\tsetReadOnly( minstdShuffle, 'NAME', 'minstd-shuffle' );\n\tsetReadOnlyAccessor( minstdShuffle, 'seed', getSeed );\n\tsetReadOnlyAccessor( minstdShuffle, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( minstdShuffle, 'state', getState, setState );\n\tsetReadOnlyAccessor( minstdShuffle, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( minstdShuffle, 'byteLength', getStateSize );\n\tsetReadOnly( minstdShuffle, 'toJSON', toJSON );\n\tsetReadOnly( minstdShuffle, 'MIN', 1 );\n\tsetReadOnly( minstdShuffle, 'MAX', INT32_MAX-1 );\n\tsetReadOnly( minstdShuffle, 'normalized', normalized );\n\n\tsetReadOnly( normalized, 'NAME', minstdShuffle.NAME );\n\tsetReadOnlyAccessor( normalized, 'seed', getSeed );\n\tsetReadOnlyAccessor( normalized, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( normalized, 'state', getState, setState );\n\tsetReadOnlyAccessor( normalized, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( normalized, 'byteLength', getStateSize );\n\tsetReadOnly( normalized, 'toJSON', toJSON );\n\tsetReadOnly( normalized, 'MIN', (minstdShuffle.MIN-1.0) / NORMALIZATION_CONSTANT );\n\tsetReadOnly( normalized, 'MAX', (minstdShuffle.MAX-1.0) / NORMALIZATION_CONSTANT );\n\n\treturn minstdShuffle;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMINSTD} seed\n\t*/\n\tfunction getSeed() {\n\t\tvar len = STATE[ SEED_SECTION_OFFSET ];\n\t\treturn gcopy( len, seed, 1, new Int32Array( len ), 1 );\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn STATE[ SEED_SECTION_OFFSET ];\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn STATE.length;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn STATE.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* ## Notes\n\t*\n\t* -   The PRNG state array is comprised of a preamble followed by `3` sections:\n\t*\n\t*     0.  preamble (version + number of sections)\n\t*     1.  shuffle table\n\t*     2.  internal PRNG state\n\t*     3.  PRNG seed\n\t*\n\t* -   The first element of the PRNG state array preamble is the state array schema version.\n\t*\n\t* -   The second element of the PRNG state array preamble is the number of state array sections (i.e., `3`).\n\t*\n\t* -   The first element of each section following the preamble specifies the section length. The remaining section elements comprise the section contents.\n\t*\n\t* @private\n\t* @returns {PRNGStateMINSTD} current state\n\t*/\n\tfunction getState() {\n\t\tvar len = STATE.length;\n\t\treturn gcopy( len, STATE, 1, new Int32Array( len ), 1 );\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* ## Notes\n\t*\n\t* -   If PRNG state is \"shared\" (meaning a state array was provided during PRNG creation and **not** copied) and one sets the generator state to a state array having a different length, the PRNG does **not** update the existing shared state and, instead, points to the newly provided state array. In order to synchronize PRNG output according to the new shared state array, the state array for **each** relevant PRNG must be **explicitly** set.\n\t* -   If PRNG state is \"shared\" and one sets the generator state to a state array of the same length, the PRNG state is updated (along with the state of all other PRNGs sharing the PRNG's state array).\n\t*\n\t* @private\n\t* @param {PRNGStateMINSTD} s - generator state\n\t* @throws {TypeError} must provide an `Int32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tvar err;\n\t\tif ( !isInt32Array( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an Int32Array. Value: `%s`.', s ) );\n\t\t}\n\t\terr = verifyState( s, false );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( opts.copy === false ) {\n\t\t\tif ( opts.state && s.length === STATE.length ) {\n\t\t\t\tgcopy( s.length, s, 1, STATE, 1 ); // update current shared state\n\t\t\t} else {\n\t\t\t\tSTATE = s; // point to new shared state\n\t\t\t\topts.state = true; // setting this flag allows updating a shared state even if a state array was not provided at PRNG creation\n\t\t\t}\n\t\t} else {\n\t\t\t// Check if we can reuse allocated memory...\n\t\t\tif ( s.length !== STATE.length ) {\n\t\t\t\tSTATE = new Int32Array( s.length ); // reallocate\n\t\t\t}\n\t\t\tgcopy( s.length, s, 1, STATE, 1 );\n\t\t}\n\t\t// Create a new state (table) \"view\":\n\t\tstate = new Int32Array( STATE.buffer, STATE.byteOffset+((TABLE_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), TABLE_LENGTH );\n\n\t\t// Create a new seed \"view\":\n\t\tseed = new Int32Array( STATE.buffer, STATE.byteOffset+((SEED_SECTION_OFFSET+1)*STATE.BYTES_PER_ELEMENT), STATE[ SEED_SECTION_OFFSET ] );\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = minstdShuffle.NAME;\n\t\tout.state = typedarray2json( STATE );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n\n\t/**\n\t* Generates a pseudorandom integer on the interval \\\\( [1,2^{31}-1) \\\\).\n\t*\n\t* @private\n\t* @returns {integer32} pseudorandom integer\n\t*/\n\tfunction minstd() {\n\t\tvar s = STATE[ PRNG_STATE ]|0; // asm type annotation\n\t\ts = ( (A*s)%INT32_MAX )|0; // asm type annotation\n\t\tSTATE[ PRNG_STATE ] = s;\n\t\treturn s|0; // asm type annotation\n\t}\n\n\t/**\n\t* Generates a pseudorandom integer on the interval \\\\( [1,2^{31}-1) \\\\).\n\t*\n\t* @private\n\t* @returns {integer32} pseudorandom integer\n\t*\n\t* @example\n\t* var v = minstd();\n\t* // returns <number>\n\t*/\n\tfunction minstdShuffle() {\n\t\tvar s;\n\t\tvar i;\n\n\t\ts = STATE[ SHUFFLE_STATE ];\n\t\ti = floor( TABLE_LENGTH * (s/INT32_MAX) );\n\n\t\t// Pull a state from the table:\n\t\ts = state[ i ];\n\n\t\t// Update the PRNG state:\n\t\tSTATE[ SHUFFLE_STATE ] = s;\n\n\t\t// Replace the pulled state:\n\t\tstate[ i ] = minstd();\n\n\t\treturn s;\n\t}\n\n\t/**\n\t* Generates a pseudorandom number on the interval \\\\( [0,1) \\\\).\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = normalized();\n\t* // returns <number>\n\t*/\n\tfunction normalized() {\n\t\treturn (minstdShuffle()-1) / NORMALIZATION_CONSTANT;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\nvar randint32 = require( './rand_int32.js' );\n\n\n// MAIN //\n\n/**\n* Generates a pseudorandom integer on the interval \\\\( [1,2^{31}-1) \\\\).\n*\n* ## Method\n*\n* Linear congruential generators (LCGs) use the recurrence relation\n*\n* ```tex\n* X_{n+1} = ( a \\cdot X_n + c ) \\operatorname{mod}(m)\n* ```\n*\n* where the modulus \\\\( m \\\\) is a prime number or power of a prime number and \\\\( a \\\\) is a primitive root modulo \\\\( m \\\\).\n*\n* <!-- <note> -->\n*\n* For an LCG to be a Lehmer RNG, the seed \\\\( X_0 \\\\) must be coprime to \\\\( m \\\\).\n*\n* <!-- </note> -->\n*\n* In this implementation, the constants \\\\( a \\\\), \\\\( c \\\\), and \\\\( m \\\\) have the values\n*\n* ```tex\n* \\begin{align*}\n* a &= 7^5 = 16807 \\\\\n* c &= 0 \\\\\n* m &= 2^{31} - 1 = 2147483647\n* \\end{align*}\n* ```\n*\n* <!-- <note> -->\n*\n* The constant \\\\( m \\\\) is a Mersenne prime (modulo \\\\(31\\\\)).\n*\n* <!-- </note> -->\n*\n* <!-- <note> -->\n*\n* The constant \\\\( a \\\\) is a primitive root (modulo \\\\(31\\\\)).\n*\n* <!-- </note> -->\n*\n* Accordingly, the maximum possible product is\n*\n* ```tex\n* 16807 \\cdot (m - 1) \\approx 2^{46}\n* ```\n*\n* The values for \\\\( a \\\\), \\\\( c \\\\), and \\\\( m \\\\) are taken from Park and Miller, \"Random Number Generators: Good Ones Are Hard To Find\". Park's and Miller's article is also the basis for a recipe in the second edition of _Numerical Recipes in C_.\n*\n* This implementation subsequently shuffles the output of a linear congruential pseudorandom number generator (LCG) using a shuffle table in accordance with the Bays-Durham algorithm.\n*\n* ## Notes\n*\n* -   The generator has a period of approximately \\\\(2.1\\mbox{e}9\\\\) (see [Numerical Recipes in C, 2nd Edition](#references), p. 279).\n*\n* ## References\n*\n* -   Bays, Carter, and S. D. Durham. 1976. \"Improving a Poor Random Number Generator.\" _ACM Transactions on Mathematical Software_ 2 (1). New York, NY, USA: ACM: 59\u201364. doi:[10.1145/355666.355670](http://dx.doi.org/10.1145/355666.355670).\n* -   Herzog, T.N., and G. Lord. 2002. _Applications of Monte Carlo Methods to Finance and Insurance_. ACTEX Publications. [https://books.google.com/books?id=vC7I\\\\\\_gdX-A0C](https://books.google.com/books?id=vC7I\\_gdX-A0C).\n* -   Press, William H., Brian P. Flannery, Saul A. Teukolsky, and William T. Vetterling. 1992. _Numerical Recipes in C: The Art of Scientific Computing, Second Edition_. Cambridge University Press.\n*\n* @function minstd\n* @type {PRNG}\n* @returns {PositiveInteger} pseudorandom integer\n*\n* @example\n* var v = minstd();\n* // returns <number>\n*/\nvar minstd = factory({\n\t'seed': randint32()\n});\n\n\n// EXPORTS //\n\nmodule.exports = minstd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* A linear congruential pseudorandom number generator (LCG) whose output is shuffled.\n*\n* @module @stdlib/random/base/minstd-shuffle\n*\n* @example\n* var minstd = require( '@stdlib/random/base/minstd-shuffle' );\n*\n* var v = minstd();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/minstd-shuffle' ).factory;\n*\n* var minstd = factory({\n*     'seed': 1234\n* });\n*\n* var v = minstd();\n* // returns 1421600654\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"idtype\": \"float64\",\n  \"ndtype\": \"float64\"\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fdtypes = require( '@stdlib/array/typed-real-float-dtypes' );\nvar rdtypes = require( '@stdlib/array/typed-real-dtypes' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar RDTYPES = rdtypes();\nvar FDTYPES = fdtypes();\nRDTYPES.push( 'generic' );\nFDTYPES.push( 'generic' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* ## Notes\n*\n* -   Validation modes:\n*\n*     -   `0`: factory validation\n*     -   `1`: integer PRNG validation\n*     -   `2`: normalized PRNG validation\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dtype] - output array data type\n* @param {string} [options.idtype] - output array data type when generating integers\n* @param {string} [options.rdtype] - output array data type when generating normalized numbers\n* @param {integer} mode - validation mode\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, options, 0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options, mode ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( mode === 0 ) {\n\t\tif ( hasOwnProp( options, 'idtype' ) ) {\n\t\t\topts.idtype = options.idtype;\n\t\t\tif ( RDTYPES.indexOf( opts.idtype ) < 0 ) {\n\t\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'idtype', RDTYPES.join( '\", \"' ), opts.idtype ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'ndtype' ) ) {\n\t\t\topts.ndtype = options.ndtype;\n\t\t\tif ( FDTYPES.indexOf( opts.ndtype ) < 0 ) {\n\t\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'ndtype', FDTYPES.join( '\", \"' ), opts.ndtype ) );\n\t\t\t}\n\t\t}\n\t} else if ( mode === 1 && hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( RDTYPES.indexOf( opts.dtype ) < 0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', RDTYPES.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t} else if ( hasOwnProp( options, 'dtype' ) ) { // mode === 2\n\t\topts.dtype = options.dtype;\n\t\tif ( FDTYPES.indexOf( opts.dtype ) < 0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', FDTYPES.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar base = require( './../../../base/minstd-shuffle' );\nvar ctors = require( '@stdlib/array/typed-real-ctors' );\nvar filledBy = require( '@stdlib/array/base/filled-by' );\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar format = require( '@stdlib/string/format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers generated using a linear congruential pseudorandom number generator (LCG) whose output is shuffled.\n*\n* @param {Options} [options] - function options\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.idtype=\"float64\"] - default data type when generating integers\n* @param {string} [options.ndtype=\"float64\"] - default data type when generating normalized numbers\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var minstd = factory();\n* // returns <Function>\n*\n* var arr = minstd( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var minstd = factory();\n* // returns <Function>\n*\n* var arr = minstd( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var minstd = factory();\n* // returns <Function>\n*\n* var arr = minstd.normalized( 10 );\n* // returns <Float64Array>\n*/\nfunction factory() {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\n\topts = {\n\t\t'idtype': defaults.idtype,\n\t\t'ndtype': defaults.ndtype\n\t};\n\n\tnargs = arguments.length;\n\trand = minstd;\n\tif ( nargs === 0 ) {\n\t\tprng = base;\n\t} else if ( nargs === 1 ) {\n\t\toptions = arguments[ 0 ];\n\t\tprng = base.factory( options );\n\t\terr = validate( opts, options, 0 );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\tsetReadOnly( rand, 'PRNG', prng );\n\tsetReadOnly( rand, 'normalized', normalized );\n\treturn rand;\n\n\t/**\n\t* Returns an array containing pseudorandom integers on the interval `[1, 2147483646]`.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} len - array length\n\t* @param {Options} [options] - function options\n\t* @param {string} [options.dtype] - output array data type\n\t* @throws {TypeError} first argument must be a nonnegative integer\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {(Array|TypedArray)} output array\n\t*/\n\tfunction minstd( len, options ) {\n\t\tvar ctor;\n\t\tvar out;\n\t\tvar err;\n\t\tvar dt;\n\t\tvar o;\n\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t\t}\n\t\to = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( o, options, 1 );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tdt = o.dtype || opts.idtype;\n\t\tif ( dt === 'generic' ) {\n\t\t\treturn filledBy( len, prng );\n\t\t}\n\t\tctor = ctors( dt );\n\t\tout = new ctor( len );\n\t\tnullary( [ out ], [ len ], [ 1 ], prng );\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns an array containing pseudorandom numbers on the interval `[0, 1)`.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} len - array length\n\t* @param {Options} [options] - function options\n\t* @param {string} [options.dtype] - output array data type\n\t* @throws {TypeError} first argument must be a nonnegative integer\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {(Array|TypedArray)} output array\n\t*/\n\tfunction normalized( len, options ) {\n\t\tvar ctor;\n\t\tvar out;\n\t\tvar err;\n\t\tvar dt;\n\t\tvar o;\n\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t\t}\n\t\to = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( o, options, 2 );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tdt = o.dtype || opts.ndtype;\n\t\tif ( dt === 'generic' ) {\n\t\t\treturn filledBy( len, prng.normalized );\n\t\t}\n\t\tctor = ctors( dt );\n\t\tout = new ctor( len );\n\t\tnullary( [ out ], [ len ], [ 1 ], prng.normalized );\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {Int32Array} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {Int32Array} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {Int32Array} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom integers on the interval `[1, 2147483646]`.\n*\n* @name minstd\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = minstd( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = minstd.normalized( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = minstd( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar minstd = factory();\n\n\n// EXPORTS //\n\nmodule.exports = minstd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers generated using a linear congruential pseudorandom number generator (LCG) whose output is shuffled.\n*\n* @module @stdlib/random/array/minstd-shuffle\n*\n* @example\n* var minstd = require( '@stdlib/random/array/minstd-shuffle' );\n*\n* var arr = minstd( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var minstd = require( '@stdlib/random/array/minstd-shuffle' );\n*\n* var arr = minstd( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var minstd = require( '@stdlib/random/array/minstd-shuffle' );\n*\n* var arr = minstd.normalized( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var minstd = require( '@stdlib/random/array/minstd-shuffle' );\n*\n* var arr = minstd.normalized( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var minstd = require( '@stdlib/random/array/minstd-shuffle' );\n*\n* var rand = minstd.factory();\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var minstd = require( '@stdlib/random/array/minstd-shuffle' );\n*\n* var rand = minstd.factory();\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"normalized\": \"main.normalized\" }\n", "{\n\t\"idtype\": \"float64\",\n  \"ndtype\": \"float64\"\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fdtypes = require( '@stdlib/array/typed-real-float-dtypes' );\nvar rdtypes = require( '@stdlib/array/typed-real-dtypes' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar RDTYPES = rdtypes();\nvar FDTYPES = fdtypes();\nRDTYPES.push( 'generic' );\nFDTYPES.push( 'generic' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* ## Notes\n*\n* -   Validation modes:\n*\n*     -   `0`: factory validation\n*     -   `1`: integer PRNG validation\n*     -   `2`: normalized PRNG validation\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dtype] - output array data type\n* @param {string} [options.idtype] - output array data type when generating integers\n* @param {string} [options.rdtype] - output array data type when generating normalized numbers\n* @param {integer} mode - validation mode\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, options, 0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options, mode ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( mode === 0 ) {\n\t\tif ( hasOwnProp( options, 'idtype' ) ) {\n\t\t\topts.idtype = options.idtype;\n\t\t\tif ( RDTYPES.indexOf( opts.idtype ) < 0 ) {\n\t\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'idtype', RDTYPES.join( '\", \"' ), opts.idtype ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'ndtype' ) ) {\n\t\t\topts.ndtype = options.ndtype;\n\t\t\tif ( FDTYPES.indexOf( opts.ndtype ) < 0 ) {\n\t\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'ndtype', FDTYPES.join( '\", \"' ), opts.ndtype ) );\n\t\t\t}\n\t\t}\n\t} else if ( mode === 1 && hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( RDTYPES.indexOf( opts.dtype ) < 0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', RDTYPES.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t} else if ( hasOwnProp( options, 'dtype' ) ) { // mode === 2\n\t\topts.dtype = options.dtype;\n\t\tif ( FDTYPES.indexOf( opts.dtype ) < 0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', FDTYPES.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar base = require( './../../../base/mt19937' );\nvar ctors = require( '@stdlib/array/typed-real-ctors' );\nvar filledBy = require( '@stdlib/array/base/filled-by' );\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar format = require( '@stdlib/string/format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers generated using a 32-bit Mersenne Twister pseudorandom number generator.\n*\n* @param {Options} [options] - function options\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.idtype=\"float64\"] - default data type when generating integers\n* @param {string} [options.ndtype=\"float64\"] - default data type when generating normalized numbers\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var mt19937 = factory();\n* // returns <Function>\n*\n* var arr = mt19937( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var mt19937 = factory();\n* // returns <Function>\n*\n* var arr = mt19937( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var mt19937 = factory();\n* // returns <Function>\n*\n* var arr = mt19937.normalized( 10 );\n* // returns <Float64Array>\n*/\nfunction factory() {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\n\topts = {\n\t\t'idtype': defaults.idtype,\n\t\t'ndtype': defaults.ndtype\n\t};\n\n\tnargs = arguments.length;\n\trand = mt19937;\n\tif ( nargs === 0 ) {\n\t\tprng = base;\n\t} else if ( nargs === 1 ) {\n\t\toptions = arguments[ 0 ];\n\t\tprng = base.factory( options );\n\t\terr = validate( opts, options, 0 );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\tsetReadOnly( rand, 'PRNG', prng );\n\tsetReadOnly( rand, 'normalized', normalized );\n\treturn rand;\n\n\t/**\n\t* Returns an array containing pseudorandom integers on the interval `[0, 4294967295]`.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} len - array length\n\t* @param {Options} [options] - function options\n\t* @param {string} [options.dtype] - output array data type\n\t* @throws {TypeError} first argument must be a nonnegative integer\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {(Array|TypedArray)} output array\n\t*/\n\tfunction mt19937( len, options ) {\n\t\tvar ctor;\n\t\tvar out;\n\t\tvar err;\n\t\tvar dt;\n\t\tvar o;\n\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t\t}\n\t\to = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( o, options, 1 );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tdt = o.dtype || opts.idtype;\n\t\tif ( dt === 'generic' ) {\n\t\t\treturn filledBy( len, prng );\n\t\t}\n\t\tctor = ctors( dt );\n\t\tout = new ctor( len );\n\t\tnullary( [ out ], [ len ], [ 1 ], prng );\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns an array containing pseudorandom numbers on the interval `[0, 1)` with 53-bit precision.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} len - array length\n\t* @param {Options} [options] - function options\n\t* @param {string} [options.dtype] - output array data type\n\t* @throws {TypeError} first argument must be a nonnegative integer\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {(Array|TypedArray)} output array\n\t*/\n\tfunction normalized( len, options ) {\n\t\tvar ctor;\n\t\tvar out;\n\t\tvar err;\n\t\tvar dt;\n\t\tvar o;\n\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t\t}\n\t\to = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( o, options, 2 );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tdt = o.dtype || opts.ndtype;\n\t\tif ( dt === 'generic' ) {\n\t\t\treturn filledBy( len, prng.normalized );\n\t\t}\n\t\tctor = ctors( dt );\n\t\tout = new ctor( len );\n\t\tnullary( [ out ], [ len ], [ 1 ], prng.normalized );\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {Uint32Array} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {Uint32Array} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {Uint32Array} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom integers on the interval `[0, 4294967295]`.\n*\n* @name mt19937\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = mt19937( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = mt19937.normalized( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = mt19937( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar mt19937 = factory();\n\n\n// EXPORTS //\n\nmodule.exports = mt19937;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers generated using a 32-bit Mersenne Twister pseudorandom number generator.\n*\n* @module @stdlib/random/array/mt19937\n*\n* @example\n* var mt19937 = require( '@stdlib/random/array/mt19937' );\n*\n* var arr = mt19937( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var mt19937 = require( '@stdlib/random/array/mt19937' );\n*\n* var arr = mt19937( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var mt19937 = require( '@stdlib/random/array/mt19937' );\n*\n* var arr = mt19937.normalized( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var mt19937 = require( '@stdlib/random/array/mt19937' );\n*\n* var arr = mt19937.normalized( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var mt19937 = require( '@stdlib/random/array/mt19937' );\n*\n* var rand = mt19937.factory();\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var mt19937 = require( '@stdlib/random/array/mt19937' );\n*\n* var rand = mt19937.factory();\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"normalized\": \"main.normalized\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar exp = require( '@stdlib/math/base/special/exp' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Poisson distribution.\n*\n* ## Notes\n*\n* -   Appropriate for \\\\(lambda < 30\\\\).\n*\n* ## References\n*\n* -   Knuth, Donald E. 1997. _The Art of Computer Programming, Volume 2 (3rd Ed.): Seminumerical Algorithms_. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.\n*\n* @private\n* @param {PRNG} rand - PRNG for generating uniformly distributed numbers\n* @param {PositiveNumber} lambda - mean\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction poisson( rand, lambda ) {\n\tvar p = rand();\n\tvar k = 1;\n\twhile ( p > exp( -lambda ) ) {\n\t\tk += 1;\n\t\tp *= rand();\n\t}\n\treturn k - 1;\n}\n\n\n// EXPORTS //\n\nmodule.exports = poisson;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factorialln = require( '@stdlib/math/base/special/factorialln' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar sign = require( '@stdlib/math/base/special/signum' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar ln = require( '@stdlib/math/base/special/ln' );\nvar LN_SQRT_TWO_PI = require( '@stdlib/constants/float64/ln-sqrt-two-pi' );\n\n\n// VARIABLES //\n\nvar ONE_12 = 1.0 / 12.0;\nvar ONE_360 = 1.0 / 360.0;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Poisson distribution with parameter `lambda`.\n*\n* ## References\n*\n* -   H\u00F6rmann, W. 1993. \"The transformed rejection method for generating Poisson random variables.\" _Insurance: Mathematics and Economics_ 12 (1): 39\u201345. doi:[10.1016/0167-6687(93)90997-4][@hormann:1993b].\n*\n* [@hormann:1993b]: http://dx.doi.org/10.1016/0167-6687(93)90997-4\n*\n* @private\n* @param {PRNG} rand - PRNG for generating uniformly distributed numbers\n* @param {PositiveNumber} lambda - mean\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction poisson( rand, lambda ) {\n\tvar slambda;\n\tvar ainv;\n\tvar urvr;\n\tvar us;\n\tvar vr;\n\tvar a;\n\tvar b;\n\tvar k;\n\tvar u;\n\tvar v;\n\n\tslambda = sqrt( lambda );\n\n\tb = (2.53*slambda) + 0.931;\n\ta = (0.02483*b) - 0.059;\n\n\tainv = (1.1328/(b-3.4)) + 1.1239;\n\tvr = (-3.6224/(b-2.0)) + 0.9277;\n\turvr = 0.86 * vr;\n\n\twhile ( true ) {\n\t\tv = rand();\n\t\tif ( v <= urvr ) {\n\t\t\tu = (v / vr) - 0.43;\n\t\t\tu *= (2.0*a / (0.5-abs(u))) + b;\n\t\t\tu += lambda + 0.445;\n\t\t\treturn floor( u );\n\t\t}\n\t\tif ( v >= vr ) {\n\t\t\tu = rand() - 0.5;\n\t\t} else {\n\t\t\tu = (v / vr) - 0.93;\n\t\t\tu = (sign( u )*0.5) - u;\n\t\t\tv = vr * rand();\n\t\t}\n\t\tus = 0.5 - abs( u );\n\t\tif (\n\t\t\tus >= 0.013 ||\n\t\t\tus >= v\n\t\t) {\n\t\t\tk = floor( (((2.0*a/us) + b)*u) + lambda + 0.445 );\n\t\t\tv *= ainv / ( (a/(us*us)) + b );\n\t\t\tu = (k+0.5) * ln( lambda/k );\n\t\t\tu += -lambda - LN_SQRT_TWO_PI + k;\n\t\t\tu -= ( ONE_12 - (ONE_360/(k*k)) ) / k;\n\t\t\tif (\n\t\t\t\tk >= 10 &&\n\t\t\t\tu >= ln( v*slambda )\n\t\t\t) {\n\t\t\t\treturn k;\n\t\t\t}\n\t\t\tu = (k*ln( lambda )) - lambda - factorialln( k );\n\t\t\tif (\n\t\t\t\tk >= 0 &&\n\t\t\t\tk <= 9 &&\n\t\t\t\tu >= ln( v )\n\t\t\t) {\n\t\t\t\treturn k;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = poisson;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar knuth = require( './knuth.js' );\nvar rejection = require( './rejection.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Poisson distribution with parameter `lambda`.\n*\n* @private\n* @param {PRNG} rand - PRNG for generating uniformly distributed numbers\n* @param {PositiveNumber} lambda - mean\n* @returns {NonNegativeInteger} pseudorandom number\n*/\nfunction poisson( rand, lambda ) {\n\tif ( lambda < 30.0 ) {\n\t\treturn knuth( rand, lambda );\n\t}\n\treturn rejection( rand, lambda );\n}\n\n\n// EXPORTS //\n\nmodule.exports = poisson;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar poisson0 = require( './poisson.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating Poisson distributed random numbers.\n*\n* @param {PositiveNumber} [lambda] - mean\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var poisson = factory( 5.0 );\n* var v = poisson();\n* // returns <number>\n*\n* @example\n* var poisson = factory( 8.0, {\n*     'seed': 297\n* });\n* var v = poisson();\n* // returns <number>\n*\n* @example\n* var poisson = factory();\n* var v = poisson( 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar lambda;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if (\n\t\targuments.length === 1 &&\n\t\tisObject( arguments[ 0 ] )\n\t) {\n\t\topts = arguments[ 0 ];\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tlambda = arguments[ 0 ];\n\t\tif ( !isPositive( lambda ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', lambda ) );\n\t\t}\n\t\tif ( arguments.length > 1 ) {\n\t\t\topts = arguments[ 1 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( lambda === void 0 ) {\n\t\tprng = poisson2;\n\t} else {\n\t\tprng = poisson1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'poisson' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( lambda === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ lambda ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Poisson distribution.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = poisson1();\n\t* // returns <number>\n\t*/\n\tfunction poisson1() {\n\t\treturn poisson0( rand, lambda );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Poisson distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} lambda - mean\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = poisson2( 0.5 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = poisson2( NaN );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = poisson2( -1.0 );\n\t* // returns NaN\n\t*/\n\tfunction poisson2( lambda ) {\n\t\tif (\n\t\t\tisnan( lambda ) ||\n\t\t\tlambda <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn poisson0( rand, lambda );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Poisson distribution with parameter `lambda`.\n*\n* ## Method\n*\n* -   When \\\\(\\lambda < 30\\\\), use Knuth's method.\n* -   When \\\\(lambda \\geq 30\\\\), use transformed rejection method as Knuth's method does not scale well with \\\\(\\lambda\\\\).\n*\n* ## References\n*\n* -   Knuth, Donald E. 1997. _The Art of Computer Programming, Volume 2 (3rd Ed.): Seminumerical Algorithms_. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.\n* -   H\u00F6rmann, W. 1993. \"The transformed rejection method for generating Poisson random variables.\" _Insurance: Mathematics and Economics_ 12 (1): 39\u201345. doi:[10.1016/0167-6687(93)90997-4][@hormann:1993b].\n*\n* [@hormann:1993b]: http://dx.doi.org/10.1016/0167-6687(93)90997-4\n*\n* @name poisson\n* @type {PRNG}\n* @param {PositiveNumber} lambda - mean\n* @returns {NonNegativeInteger} pseudorandom number\n*\n* @example\n* var v = poisson( 0.5 );\n* // returns <number>\n*\n* @example\n* var v = poisson( 0.0 );\n* // returns NaN\n*\n* @example\n* var v = poisson( NaN );\n* // returns NaN\n*/\nvar poisson = factory();\n\n\n// EXPORTS //\n\nmodule.exports = poisson;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Poisson distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/poisson\n*\n* @example\n* var poisson = require( '@stdlib/random/base/poisson' );\n*\n* var v = poisson( 4.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/poisson' ).factory;\n* var poisson = factory( 4.0, {\n*     'seed': 297\n* });\n*\n* var v = poisson();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/poisson' ).factory;\n* var poisson = factory({\n*     'seed': 297\n* });\n*\n* var v = poisson( 3.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {number} p - success probability\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 10, 0.5 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( r, p ) {\n\tif ( !isPositive( r ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', r ) );\n\t}\n\tif ( !isNumber( p ) || isnan( p ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a number and not NaN. Value: `%s`.', p ) );\n\t}\n\tif ( p <= 0.0 || p >= 1.0 ) {\n\t\treturn new RangeError( format( 'invalid argument. Second argument must be on the interval: (0, 1). Value: `%f`.', p ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isUint32Array = require( '@stdlib/assert/is-uint32array' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar poisson = require( './../../../base/poisson' ).factory;\nvar gamma = require( './../../../base/gamma' ).factory;\nvar gcopy = require( '@stdlib/blas/base/gcopy' );\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar assign = require( '@stdlib/object/assign' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating negative binomial distributed random numbers.\n*\n* @param {PositiveNumber} [r] - number of successes until experiment is stopped\n* @param {number} [p] - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `r` must be a positive number\n* @throws {TypeError} `p` must be number\n* @throws {RangeError} `p` must be a number on the interval `(0,1)`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var negativeBinomial = factory( 10, 0.5 );\n*\n* var v = negativeBinomial();\n* // returns <number>\n*\n* @example\n* var negativeBinomial = factory( 10, 0.8, {\n*     'seed': 297\n* });\n*\n* var v = negativeBinomial();\n* // returns <number>\n*\n* @example\n* var negativeBinomial = factory();\n*\n* var v = negativeBinomial( 10, 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar rgamma;\n\tvar STATE;\n\tvar rpois;\n\tvar opts;\n\tvar prng;\n\tvar rand;\n\tvar FLG;\n\tvar err;\n\tvar p;\n\tvar r;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trpois = poisson( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trpois = poisson({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t}\n\t\t\topts = assign( {}, opts );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trpois = poisson( opts );\n\t\t}\n\t} else {\n\t\tr = arguments[ 0 ];\n\t\tp = arguments[ 1 ];\n\t\terr = validate( r, p );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trpois = poisson({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t\t}\n\t\t\t\topts = assign( {}, opts );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trpois = poisson( opts );\n\t\t\t}\n\t\t} else {\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trpois = poisson( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\tif ( r === void 0 ) {\n\t\t\trgamma = gamma({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trgamma = gamma( r, p/(1-p), {\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rpois.state;\n\t\t\trpois.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\tif ( r === void 0 ) {\n\t\t\trgamma = gamma({\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t} else {\n\t\t\trgamma = gamma( r, p/(1-p), {\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t}\n\t}\n\tif ( r === void 0 ) {\n\t\tprng = negativeBinomial2;\n\t} else {\n\t\tprng = negativeBinomial1;\n\t}\n\trand = rpois.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'negative-binomial' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a Uint32Array. Value: `%s`.', s ) );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( r === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ r, p ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a negative binomial distribution with bound parameters `r` and `p`.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = negativeBinomial1();\n\t* // returns <number>\n\t*/\n\tfunction negativeBinomial1() {\n\t\treturn rpois( rgamma() );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a negative binomial distribution with parameters `r` and `p`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} r - number of successes until experiment is stopped\n\t* @param {number} p - success probability\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = negativeBinomial2( 10, 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction negativeBinomial2( r, p ) {\n\t\tif (\n\t\t\tisnan( r ) ||\n\t\t\tisnan( p ) ||\n\t\t\tp <= 0.0 ||\n\t\t\tp >= 1.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn rpois( rgamma( r, p/(1-p) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a negative binomial distribution.\n*\n* @name negativeBinomial\n* @type {PRNG}\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {number} p - success probability\n* @returns {NonNegativeInteger} pseudorandom number\n*\n* @example\n* var v = negativeBinomial( 10, 0.5 );\n* // returns <number>\n*/\nvar negativeBinomial = factory();\n\n\n// EXPORTS //\n\nmodule.exports = negativeBinomial;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Negative binomial distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/negative-binomial\n*\n* @example\n* var negativeBinomial = require( '@stdlib/random/base/negative-binomial' );\n*\n* var v = negativeBinomial( 20, 0.5 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/negative-binomial' ).factory;\n* var negativeBinomial = factory( 10, 0.3, {\n*     'seed': 297\n* });\n*\n* var v = negativeBinomial();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/negative-binomial' ).factory;\n* var negativeBinomial = factory({\n*     'seed': 297\n* });\n*\n* var v = negativeBinomial( 10, 0.67 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/negative-binomial' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a negative binomial distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [r] - number of successes until experiment is stopped\n* @param {Probability} [p] - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `r` must be a positive number\n* @throws {TypeError} `p` must be a probability (i.e., a number on the interval [0,1])\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var negativeBinomial = factory( 10, 0.5 );\n* // returns <Function>\n*\n* var arr = negativeBinomial( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var negativeBinomial = factory( 10, 0.5 );\n* // returns <Function>\n*\n* var arr = negativeBinomial( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a negative binomial distribution.\n*\n* @name negativeBinomial\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = negativeBinomial( 10, 10, 0.5 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = negativeBinomial( 10, 10, 0.5, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar negativeBinomial = factory();\n\n\n// EXPORTS //\n\nmodule.exports = negativeBinomial;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a negative binomial distribution.\n*\n* @module @stdlib/random/array/negative-binomial\n*\n* @example\n* var negativeBinomial = require( '@stdlib/random/array/negative-binomial' );\n*\n* var arr = negativeBinomial( 10, 10, 0.5 );\n* // returns <Float64Array>\n*\n* @example\n* var negativeBinomial = require( '@stdlib/random/array/negative-binomial' );\n*\n* var arr = negativeBinomial( 10, 10, 0.5, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var negativeBinomial = require( '@stdlib/random/array/negative-binomial' );\n*\n* var rand = negativeBinomial.factory( 10, 0.5 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var negativeBinomial = require( '@stdlib/random/array/negative-binomial' );\n*\n* var rand = negativeBinomial.factory( 10, 0.5 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( mu, sigma ) {\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositive( sigma ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns a pseudorandom number from a normal distribution with parameters `mu` and `sigma`.\n*\n* @private\n* @param {PRNG} rand - pseudorandom number generator\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {number} pseudorandom number\n*/\nfunction normal( rand, mu, sigma ) {\n\treturn mu + (sigma*rand());\n}\n\n\n// EXPORTS //\n\nmodule.exports = normal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randn = require( './../../../base/improved-ziggurat' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar normal0 = require( './normal.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating normally distributed random numbers.\n*\n* @param {number} [mu] - mean\n* @param {PositiveNumber} [sigma] - standard deviation\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var normal = factory( 0.0, 1.0 );\n* var v = normal();\n* // returns <number>\n*\n* @example\n* var normal = factory( -3.0, 0.5, {\n*     'seed': 297\n* });\n* var v = normal();\n* // returns <number>\n*/\nfunction factory() {\n\tvar sigma;\n\tvar rnorm;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar mu;\n\n\tif ( arguments.length === 0 ) {\n\t\trnorm = randn();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trnorm = randn({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trnorm = randn( opts );\n\t\t}\n\t} else {\n\t\tmu = arguments[ 0 ];\n\t\tsigma = arguments[ 1 ];\n\t\terr = validate( mu, sigma );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trnorm = randn({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trnorm = randn( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trnorm = randn();\n\t\t}\n\t}\n\tif ( mu === void 0 ) {\n\t\tprng = normal2;\n\t} else {\n\t\tprng = normal1;\n\t}\n\trand = rnorm.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'normal' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( mu === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ mu, sigma ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number from a normal distribution with bound parameters `mu` and `sigma`.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = normal1();\n\t* // returns <number>\n\t*/\n\tfunction normal1() {\n\t\treturn normal0( rnorm, mu, sigma );\n\t}\n\n\t/**\n\t* Returns a normally distributed pseudorandom number with mean `mu` and standard deviation `sigma`.\n\t*\n\t* @private\n\t* @param {number} mu - mean\n\t* @param {PositiveNumber} sigma - standard deviation\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = normal2( 0.0, 1.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = normal2( 0.0, -1.0 );\n\t* // returns NaN\n\t*/\n\tfunction normal2( mu, sigma ) {\n\t\tif (\n\t\t\tisnan( mu ) ||\n\t\t\tisnan( sigma ) ||\n\t\t\tsigma <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn normal0( rnorm, mu, sigma );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a normally distributed pseudorandom number with mean `mu` and standard deviation `sigma`.\n*\n* @name normal\n* @type {PRNG}\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = normal( 0.0, 1.0 );\n* // returns <number>\n*\n* @example\n* var v = normal( 0.0, -1.0 );\n* // returns NaN\n*/\nvar normal = factory();\n\n\n// EXPORTS //\n\nmodule.exports = normal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normally distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/normal\n*\n* @example\n* var normal = require( '@stdlib/random/base/normal' );\n*\n* var v = normal( 0.0, 1.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/normal' ).factory;\n* var normal = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = normal();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/normal' ).factory;\n* var normal = factory({\n*     'seed': 297\n* });\n*\n* var v = normal( -3.0, 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/normal' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a normal distribution.\n*\n* @name factory\n* @type {Function}\n* @param {number} [mu] - mean\n* @param {PositiveNumber} [sigma] - standard deviation\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var normal = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = normal( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var normal = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = normal( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a normal distribution.\n*\n* @name normal\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = normal( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = normal( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar normal = factory();\n\n\n// EXPORTS //\n\nmodule.exports = normal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a normal distribution.\n*\n* @module @stdlib/random/array/normal\n*\n* @example\n* var normal = require( '@stdlib/random/array/normal' );\n*\n* var arr = normal( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var normal = require( '@stdlib/random/array/normal' );\n*\n* var arr = normal( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var normal = require( '@stdlib/random/array/normal' );\n*\n* var rand = normal.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var normal = require( '@stdlib/random/array/normal' );\n*\n* var rand = normal.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( alpha, beta ) {\n\tif ( !isPositive( alpha ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositive( beta ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Pareto (Type I) distribution.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {NonNegativeNumber} pseudorandom number\n*/\nfunction pareto( rand, alpha, beta ) {\n\treturn beta / pow( rand(), 1.0/alpha );\n}\n\n\n// EXPORTS //\n\nmodule.exports = pareto;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar pareto0 = require( './pareto.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating Pareto (Type I) distributed random numbers.\n*\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [beta] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var pareto1 = factory( 2.0, 1.0 );\n*\n* var v = pareto1();\n* // returns <number>\n*\n* @example\n* var pareto1 = factory( 2.0, 2.0, {\n*     'seed': 297\n* });\n* var v = pareto1();\n* // returns <number>\n*/\nfunction factory() {\n\tvar alpha;\n\tvar beta;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\terr = validate( alpha, beta );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( alpha === void 0 ) {\n\t\tprng = pareto2;\n\t} else {\n\t\tprng = pareto1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'pareto-type1' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( alpha === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ alpha, beta ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Pareto (Type I) distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = pareto1();\n\t* // returns <number>\n\t*/\n\tfunction pareto1() {\n\t\treturn pareto0( rand, alpha, beta );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Pareto (Type I) distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - shape parameter\n\t* @param {PositiveNumber} beta - scale parameter\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = pareto2( 2.0, 3.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = pareto2( 3.0, 0.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = pareto2( 0.0, 2.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = pareto2( NaN, NaN );\n\t* // returns NaN\n\t*/\n\tfunction pareto2( alpha, beta ) {\n\t\tif (\n\t\t\tisnan( alpha ) ||\n\t\t\tisnan( beta ) ||\n\t\t\talpha <= 0.0 ||\n\t\t\tbeta <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn pareto0( rand, alpha, beta );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Pareto (Type I) distribution.\n*\n* @name pareto1\n* @type {PRNG}\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {NonNegativeNumber} pseudorandom number\n*\n* @example\n* var v = pareto1( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var v = pareto1( -2.0, 3.0 );\n* // returns NaN\n*/\nvar pareto1 = factory();\n\n\n// EXPORTS //\n\nmodule.exports = pareto1;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Pareto (Type I) distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/pareto-type1\n*\n* @example\n* var pareto1 = require( '@stdlib/random/base/pareto-type1' );\n*\n* var v = pareto1( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/pareto-type1' ).factory;\n* var pareto1 = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = pareto1();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/pareto-type1' ).factory;\n* var pareto1 = factory({\n*     'seed': 297\n* });\n*\n* var v = pareto1( 3.0, 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/pareto-type1' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a Pareto (Type I) distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [beta] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var pareto1 = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = pareto1( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var pareto1 = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = pareto1( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a Pareto (Type I) distribution.\n*\n* @name pareto1\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = pareto1( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = pareto1( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar pareto1 = factory();\n\n\n// EXPORTS //\n\nmodule.exports = pareto1;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a Pareto (Type I) distribution.\n*\n* @module @stdlib/random/array/pareto-type1\n*\n* @example\n* var pareto1 = require( '@stdlib/random/array/pareto-type1' );\n*\n* var arr = pareto1( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var pareto1 = require( '@stdlib/random/array/pareto-type1' );\n*\n* var arr = pareto1( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var pareto1 = require( '@stdlib/random/array/pareto-type1' );\n*\n* var rand = pareto1.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var pareto1 = require( '@stdlib/random/array/pareto-type1' );\n*\n* var rand = pareto1.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unaryFactory = require( './../../../array/tools/unary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/poisson' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a Poisson distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [lambda] - mean parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var poisson = factory( 2.0 );\n* // returns <Function>\n*\n* var arr = poisson( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var poisson = factory( 2.0 );\n* // returns <Function>\n*\n* var arr = poisson( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = unaryFactory( base, DTYPES, defaults.get( 'dtypes.real' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a Poisson distribution.\n*\n* @name poisson\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} lambda - mean parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = poisson( 10, 2.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = poisson( 10, 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar poisson = factory();\n\n\n// EXPORTS //\n\nmodule.exports = poisson;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a Poisson distribution.\n*\n* @module @stdlib/random/array/poisson\n*\n* @example\n* var poisson = require( '@stdlib/random/array/poisson' );\n*\n* var arr = poisson( 10, 2.0 );\n* // returns <Float64Array>\n*\n* @example\n* var poisson = require( '@stdlib/random/array/poisson' );\n*\n* var arr = poisson( 10, 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var poisson = require( '@stdlib/random/array/poisson' );\n*\n* var rand = poisson.factory( 2.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var poisson = require( '@stdlib/random/array/poisson' );\n*\n* var rand = poisson.factory( 2.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "{\n\t\"name\": \"mt19937\",\n\t\"copy\": true\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar minstd = require( './../../../base/minstd' );\nvar minstdShuffle = require( './../../../base/minstd-shuffle' );\nvar mt19937 = require( './../../../base/mt19937' );\n\n\n// MAIN //\n\nvar prngs = {};\n\nprngs[ 'minstd' ] = minstd;\nprngs[ 'minstd-shuffle' ] = minstdShuffle;\nprngs[ 'mt19937' ] = mt19937;\n\n\n// EXPORTS //\n\nmodule.exports = prngs;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar defaults = require( './defaults.json' );\nvar PRNGS = require( './prngs.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating uniformly distributed random numbers on the interval \\\\( [0,1) \\\\).\n*\n* @param {Options} [options] - function options\n* @param {string} [options.name='mt19937'] - name of pseudorandom number generator\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide the name of a supported pseudorandom number generator\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var uniform = factory();\n* var v = uniform();\n* // returns <number>\n*\n* @example\n* var uniform = factory({\n*     'name': 'minstd'\n* });\n* var v = uniform();\n* // returns <number>\n*\n* @example\n* var uniform = factory({\n*     'seed': 12345\n* });\n* var v = uniform();\n* // returns <number>\n*\n* @example\n* var uniform = factory({\n*     'name': 'minstd',\n*     'seed': 12345\n* });\n* var v = uniform();\n* // returns <number>\n*/\nfunction factory( options ) {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\n\topts = {\n\t\t'name': defaults.name,\n\t\t'copy': defaults.copy\n\t};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'name' ) ) {\n\t\t\topts.name = options.name;\n\t\t}\n\t\tif ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( opts.state === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option cannot be undefined. Option: `%s`.', 'state', opts.state ) );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option cannot be undefined. Option: `%s`.', 'seed', opts.seed ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t\t}\n\t\t}\n\t}\n\tprng = PRNGS[ opts.name ];\n\tif ( prng === void 0 ) {\n\t\tthrow new Error( format( 'invalid option. Unrecognized/unsupported PRNG. Option: `%s`.', opts.name ) );\n\t}\n\tif ( opts.state === void 0 ) {\n\t\tif ( opts.seed === void 0 ) {\n\t\t\trand = prng.factory();\n\t\t} else {\n\t\t\trand = prng.factory({\n\t\t\t\t'seed': opts.seed\n\t\t\t});\n\t\t}\n\t} else {\n\t\trand = prng.factory({\n\t\t\t'state': opts.state,\n\t\t\t'copy': opts.copy\n\t\t});\n\t}\n\tsetReadOnly( uniform, 'NAME', 'randu' );\n\tsetReadOnlyAccessor( uniform, 'seed', getSeed );\n\tsetReadOnlyAccessor( uniform, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( uniform, 'state', getState, setState );\n\tsetReadOnlyAccessor( uniform, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( uniform, 'byteLength', getStateSize );\n\tsetReadOnly( uniform, 'toJSON', toJSON );\n\tsetReadOnly( uniform, 'PRNG', rand );\n\tsetReadOnly( uniform, 'MIN', rand.normalized.MIN );\n\tsetReadOnly( uniform, 'MAX', rand.normalized.MAX );\n\n\treturn uniform;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {*} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {*} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {*} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = uniform.NAME + '-' + rand.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a uniformly distributed pseudorandom number on the interval \\\\( [0,1) \\\\).\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = uniform();\n\t* // returns <number>\n\t*/\n\tfunction uniform() {\n\t\treturn rand.normalized();\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a uniformly distributed random number on the interval \\\\( [0,1) \\\\).\n*\n* @name randu\n* @type {PRNG}\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = randu();\n* // returns <number>\n*/\nvar randu = factory();\n\n\n// EXPORTS //\n\nmodule.exports = randu;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Uniformly distributed pseudorandom numbers on the interval \\\\( [0,1) \\\\).\n*\n* @module @stdlib/random/base/randu\n*\n* @example\n* var randu = require( '@stdlib/random/base/randu' );\n*\n* var v = randu();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/randu' ).factory;\n*\n* var randu = factory({\n*     'name': 'minstd',\n*     'seed': 12345\n* });\n*\n* var v = randu();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"dtype\": \"float64\"\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dtypes = require( '@stdlib/array/typed-real-float-dtypes' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes();\nDTYPES.push( 'generic' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dtype] - output array data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( DTYPES.indexOf( opts.dtype ) < 0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', DTYPES.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar base = require( './../../../base/randu' );\nvar ctors = require( '@stdlib/array/typed-real-float-ctors' );\nvar filledBy = require( '@stdlib/array/base/filled-by' );\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar format = require( '@stdlib/string/format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing uniformly distributed pseudorandom numbers between `0` and `1`.\n*\n* @param {Options} [options] - function options\n* @param {string} [options.name='mt19937'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var randu = factory();\n* // returns <Function>\n*\n* var arr = randu( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var randu = factory();\n* // returns <Function>\n*\n* var arr = randu( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nfunction factory() {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\n\topts = {\n\t\t'dtype': defaults.dtype\n\t};\n\n\tnargs = arguments.length;\n\trand = randu;\n\tif ( nargs === 0 ) {\n\t\tprng = base;\n\t} else if ( nargs === 1 ) {\n\t\toptions = arguments[ 0 ];\n\t\tprng = base.factory( options );\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\tsetReadOnly( rand, 'PRNG', prng.PRNG );\n\treturn rand;\n\n\t/**\n\t* Returns an array containing pseudorandom numbers drawn from a randu distribution.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} len - array length\n\t* @param {Options} [options] - function options\n\t* @param {string} [options.dtype] - output array data type\n\t* @throws {TypeError} first argument must be a nonnegative integer\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {(Array|TypedArray)} output array\n\t*/\n\tfunction randu( len, options ) {\n\t\tvar ctor;\n\t\tvar out;\n\t\tvar err;\n\t\tvar dt;\n\t\tvar o;\n\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t\t}\n\t\to = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( o, options );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tdt = o.dtype || opts.dtype;\n\t\tif ( dt === 'generic' ) {\n\t\t\treturn filledBy( len, prng );\n\t\t}\n\t\tctor = ctors( dt );\n\t\tout = new ctor( len );\n\t\tnullary( [ out ], [ len ], [ 1 ], prng );\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {*} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {*} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {*} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing uniformly distributed pseudorandom numbers between `0` and `1`.\n*\n* @name randu\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = randu( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = randu( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar randu = factory();\n\n\n// EXPORTS //\n\nmodule.exports = randu;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing uniformly distributed pseudorandom numbers between `0` and `1`.\n*\n* @module @stdlib/random/array/randu\n*\n* @example\n* var randu = require( '@stdlib/random/array/randu' );\n*\n* var arr = randu( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var randu = require( '@stdlib/random/array/randu' );\n*\n* var arr = randu( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var randu = require( '@stdlib/random/array/randu' );\n*\n* var rand = randu.factory();\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var randu = require( '@stdlib/random/array/randu' );\n*\n* var rand = randu.factory();\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number from a Rayleigh distribution with scale parameter `sigma`.\n*\n* @private\n* @param {PRNG} rand - PRNG for generating uniformly distributed numbers\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {NonNegativeNumber} pseudorandom number\n*/\nfunction rayleigh( rand, sigma ) {\n\treturn sigma * sqrt( -2.0*ln( rand() ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = rayleigh;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar rayleigh0 = require( './rayleigh.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating Rayleigh distributed random numbers.\n*\n* @param {PositiveNumber} [sigma] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var rayleigh = factory( 1.0 );\n*\n* var v = rayleigh();\n* // returns <number>\n*\n* @example\n* var rayleigh = factory( 0.5, {\n*     'seed': 297\n* });\n* var v = rayleigh();\n* // returns <number>\n*\n* @example\n* var rayleigh = factory();\n* var v = rayleigh( 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar sigma;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if (\n\t\targuments.length === 1 &&\n\t\tisObject( arguments[ 0 ] )\n\t) {\n\t\topts = arguments[ 0 ];\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tsigma = arguments[ 0 ];\n\t\tif ( !isPositive( sigma ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', sigma ) );\n\t\t}\n\t\tif ( arguments.length > 1 ) {\n\t\t\topts = arguments[ 1 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( sigma === void 0 ) {\n\t\tprng = rayleigh2;\n\t} else {\n\t\tprng = rayleigh1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'rayleigh' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( sigma === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ sigma ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number from a Rayleigh distribution with bound scale parameter `sigma`.\n\t*\n\t* @private\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = rayleigh1();\n\t* // returns <number>\n\t*/\n\tfunction rayleigh1() {\n\t\treturn rayleigh0( rand, sigma );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number from a Rayleigh distribution with scale parameter `sigma`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} sigma - scale parameter\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = rayleigh2( 3.0 );\n\t* // returns <number>\n\t*/\n\tfunction rayleigh2( sigma ) {\n\t\tif (\n\t\t\tisnan( sigma ) ||\n\t\t\tsigma <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn rayleigh0( rand, sigma );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Rayleigh distribution with scale parameter `sigma`.\n*\n* @name rayleigh\n* @type {Function}\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {NonNegativeNumber} pseudorandom number\n*\n* @example\n* var v = rayleigh( 3.0 );\n* // returns <number>\n*\n* @example\n* var v = rayleigh( 0.0 );\n* // returns NaN\n*\n* @example\n* var v = rayleigh( NaN );\n* // returns NaN\n*/\nvar rayleigh = factory();\n\n\n// EXPORTS //\n\nmodule.exports = rayleigh;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Rayleigh distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/rayleigh\n*\n* @example\n* var rayleigh = require( '@stdlib/random/base/rayleigh' );\n*\n* var v = rayleigh( 2.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/rayleigh' ).factory;\n* var rayleigh = factory( 3.0, {\n*     'seed': 297\n* });\n*\n* var v = rayleigh();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/rayleigh' ).factory;\n* var rayleigh = factory({\n*     'seed': 297\n* });\n*\n* var v = rayleigh( 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unaryFactory = require( './../../../array/tools/unary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/rayleigh' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a Rayleigh distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [sigma] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var rayleigh = factory( 2.0 );\n* // returns <Function>\n*\n* var arr = rayleigh( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var rayleigh = factory( 2.0 );\n* // returns <Function>\n*\n* var arr = rayleigh( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = unaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a Rayleigh distribution.\n*\n* @name rayleigh\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} sigma - scale parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = rayleigh( 10, 2.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = rayleigh( 10, 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar rayleigh = factory();\n\n\n// EXPORTS //\n\nmodule.exports = rayleigh;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a Rayleigh distribution.\n*\n* @module @stdlib/random/array/rayleigh\n*\n* @example\n* var rayleigh = require( '@stdlib/random/array/rayleigh' );\n*\n* var arr = rayleigh( 10, 2.0 );\n* // returns <Float64Array>\n*\n* @example\n* var rayleigh = require( '@stdlib/random/array/rayleigh' );\n*\n* var arr = rayleigh( 10, 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var rayleigh = require( '@stdlib/random/array/rayleigh' );\n*\n* var rand = rayleigh.factory( 2.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var rayleigh = require( '@stdlib/random/array/rayleigh' );\n*\n* var rand = rayleigh.factory( 2.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isUint32Array = require( '@stdlib/assert/is-uint32array' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar chisquare = require( './../../../base/chisquare' ).factory;\nvar randn = require( './../../../base/improved-ziggurat' ).factory;\nvar gcopy = require( '@stdlib/blas/base/gcopy' );\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar assign = require( '@stdlib/object/assign' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating t-distributed random numbers.\n*\n* @param {PositiveNumber} [v] - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `v` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var t = factory( 1.0 );\n*\n* var v = t();\n* // returns <number>\n*\n* @example\n* var t = factory( 0.5, {\n*     'seed': 297\n* });\n* var v = t();\n* // returns <number>\n*\n* @example\n* var t = factory();\n* var v = t( 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar rchisq;\n\tvar STATE;\n\tvar rnorm;\n\tvar rand;\n\tvar opts;\n\tvar prng;\n\tvar FLG;\n\tvar v;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trnorm = randn( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isObject( arguments[ 0 ] ) ) {\n\t\t\topts = arguments[ 0 ];\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trnorm = randn({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t\t}\n\t\t\t\topts = assign( {}, opts );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trnorm = randn( opts );\n\t\t\t}\n\t\t} else {\n\t\t\tv = arguments[ 0 ];\n\t\t\tif ( !isPositive( v ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number or an options object. Value: `%s`.', v ) );\n\t\t\t}\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trnorm = randn( opts );\n\t\t}\n\t} else {\n\t\tv = arguments[ 0 ];\n\t\tif ( !isPositive( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', v ) );\n\t\t}\n\t\topts = arguments[ 1 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trnorm = randn({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t}\n\t\t\topts = assign( {}, opts );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trnorm = randn( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\tif ( v === void 0 ) {\n\t\t\trchisq = chisquare({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trchisq = chisquare( v, {\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rnorm.state;\n\t\t\trnorm.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\tif ( v === void 0 ) {\n\t\t\trchisq = chisquare({\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t} else {\n\t\t\trchisq = chisquare( v, {\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t}\n\t}\n\tif ( v === void 0 ) {\n\t\tprng = t2;\n\t} else {\n\t\tprng = t1;\n\t}\n\trand = rnorm.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 't' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a Uint32Array. Value: `%s`.', s ) );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( v === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ v ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Student's t-distribution with bound degrees of freedom `v`.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = t1();\n\t* // returns <number>\n\t*/\n\tfunction t1() {\n\t\treturn rnorm() / sqrt( rchisq() / v );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Student's t-distribution with degrees of freedom `v`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} v - degrees of freedom\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = t2( 3.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = t2( 0.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = t2( -1.5 );\n\t* // returns NaN\n\t*/\n\tfunction t2( v ) {\n\t\tif (\n\t\t\tisnan( v ) ||\n\t\t\tv <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn rnorm() / sqrt( rchisq( v ) / v );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Student's t-distribution with degrees of freedom `v`.\n*\n* @name t\n* @type {PRNG}\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = t( 3.0 );\n* // returns <number>\n*\n* @example\n* var v = t( 0.0 );\n* // returns NaN\n*\n* @example\n* var v = t( NaN );\n* // returns NaN\n*/\nvar t = factory();\n\n\n// EXPORTS //\n\nmodule.exports = t;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Student's t-distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/t\n*\n* @example\n* var t = require( '@stdlib/random/base/t' );\n*\n* var v = t( 2.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/t' ).factory;\n* var t = factory( 3.0, {\n*     'seed': 297\n* });\n*\n* var v = t();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/t' ).factory;\n* var t = factory({\n*     'seed': 297\n* });\n*\n* var v = t( 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unaryFactory = require( './../../../array/tools/unary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/t' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a Student's t-distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [v] - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `v` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var t = factory( 2.0 );\n* // returns <Function>\n*\n* var arr = t( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var t = factory( 2.0 );\n* // returns <Function>\n*\n* var arr = t( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = unaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a Student's t-distribution.\n*\n* @name t\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} v - degrees of freedom\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = t( 10, 2.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = t( 10, 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar t = factory();\n\n\n// EXPORTS //\n\nmodule.exports = t;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a Student's t-distribution.\n*\n* @module @stdlib/random/array/t\n*\n* @example\n* var t = require( '@stdlib/random/array/t' );\n*\n* var arr = t( 10, 2.0 );\n* // returns <Float64Array>\n*\n* @example\n* var t = require( '@stdlib/random/array/t' );\n*\n* var arr = t( 10, 2.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var t = require( '@stdlib/random/array/t' );\n*\n* var rand = t.factory( 2.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var t = require( '@stdlib/random/array/t' );\n*\n* var rand = t.factory( 2.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} c - mode\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0, 1.3 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( a, b, c ) {\n\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', a ) );\n\t}\n\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a number and not NaN. Value: `%s`.', b ) );\n\t}\n\tif ( !isNumber( c ) || isnan( c ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Third argument must be a number and not NaN. Value: `%s`.', c ) );\n\t}\n\tif ( !(a <= c && c <= b) ) {\n\t\treturn new RangeError( format( 'invalid arguments. Parameters must satisfy the following condition: %s. a: `%f`. b: `%f`. c: `%f`.', 'a <= c <= b', a, b, c ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a triangular distribution with minimum support `a`, maximum support `b` and mode `c`.\n*\n* @private\n* @param {PRNG} rand - PRNG for generating uniformly distributed numbers\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} c - mode\n* @returns {number} pseudorandom number\n*/\nfunction triangular( rand, a, b, c ) {\n\tvar fc;\n\tvar x;\n\tvar u;\n\tfc = (c - a) / (b - a);\n\tu = rand();\n\tif ( u < fc ) {\n\t\tx = (b - a) * (c - a);\n\t\treturn a + sqrt( x * u );\n\t}\n\tx = (b - a) * (b - c);\n\treturn b - sqrt( x * (1.0 - u) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = triangular;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar triangular0 = require( './triangular.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers drawn from a triangular distribution.\n*\n* @param {number} [a] - minimum support\n* @param {number} [b] - maximum support\n* @param {number} [c] - mode\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {TypeError} `c` must be a number\n* @throws {RangeError} arguments must satisfy `a <= c <= b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var triangular = factory( 0.0, 1.0, 0.8 );\n*\n* var v = triangular();\n* // returns <number>\n*\n* @example\n* var triangular = factory( -3.0, -1.0, -2.0, {\n*     'seed': 297\n* });\n* var v = triangular();\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar a;\n\tvar b;\n\tvar c;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tc = arguments[ 2 ];\n\t\terr = validate( a, b, c );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 3 ) {\n\t\t\topts = arguments[ 3 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( a === void 0 ) {\n\t\tprng = triangular2;\n\t} else {\n\t\tprng = triangular1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'triangular' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( a === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ a, b, c ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a triangular distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = triangular1();\n\t* // returns <number>\n\t*/\n\tfunction triangular1() {\n\t\treturn triangular0( rand, a, b, c );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a triangular distribution with minimum support `a`, maximum support `b`, and mode `c`.\n\t*\n\t* @private\n\t* @param {number} a - minimum support\n\t* @param {number} b - maximum support\n\t* @param {number} c - mode\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = triangular2( 0.0, 1.0, 0.5 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = triangular2( 1.0, 0.0, 0.5 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = triangular2( 1.0, 2.0, NaN );\n\t* // returns NaN\n\t*/\n\tfunction triangular2( a, b, c ) {\n\t\tif (\n\t\t\tisnan( a ) ||\n\t\t\tisnan( b ) ||\n\t\t\tisnan( c ) ||\n\t\t\t!(a <= c && c <= b)\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn triangular0( rand, a, b, c );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a triangular distribution with minimum support `a`, maximum support `b`, and mode `c`.\n*\n* @name triangular\n* @type {PRNG}\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} c - mode\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = triangular( 0.0, 1.0, 0.5 );\n* // returns <number>\n*/\nvar triangular = factory();\n\n\n// EXPORTS //\n\nmodule.exports = triangular;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Triangular distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/triangular\n*\n* @example\n* var triangular = require( '@stdlib/random/base/triangular' );\n*\n* var v = triangular( 0.0, 10.0, 7.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/triangular' ).factory;\n* var triangular = factory( -5.0, 5.0, 3.0, {\n*     'seed': 297\n* });\n*\n* var v = triangular();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/triangular' ).factory;\n* var triangular = factory({\n*     'seed': 297\n* });\n*\n* var v = triangular( -5.0, 5.0, 3.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ternaryFactory = require( './../../../array/tools/ternary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/triangular' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a triangular distribution.\n*\n* @name factory\n* @type {Function}\n* @param {number} [a] - minimum support\n* @param {number} [b] - maximum support\n* @param {number} [c] - mode\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {TypeError} `c` must be a number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var triangular = factory( 2.0, 5.0, 3.0 );\n* // returns <Function>\n*\n* var arr = triangular( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var triangular = factory( 2.0, 5.0, 3.0 );\n* // returns <Function>\n*\n* var arr = triangular( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = ternaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a triangular distribution.\n*\n* @name triangular\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} c - mode\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = triangular( 10, 2.0, 5.0, 3.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = triangular( 10, 2.0, 5.0, 3.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar triangular = factory();\n\n\n// EXPORTS //\n\nmodule.exports = triangular;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a triangular distribution.\n*\n* @module @stdlib/random/array/triangular\n*\n* @example\n* var triangular = require( '@stdlib/random/array/triangular' );\n*\n* var arr = triangular( 10, 2.0, 5.0, 3.0 );\n* // returns <Float64Array>\n*\n* @example\n* var triangular = require( '@stdlib/random/array/triangular' );\n*\n* var arr = triangular( 10, 2.0, 5.0, 3.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var triangular = require( '@stdlib/random/array/triangular' );\n*\n* var rand = triangular.factory( 2.0, 5.0, 3.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var triangular = require( '@stdlib/random/array/triangular' );\n*\n* var rand = triangular.factory( 2.0, 5.0, 3.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates values provided for minimum and maximum support.\n*\n* @private\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( a, b ) {\n\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', a ) );\n\t}\n\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a number and not NaN. Value: `%s`.', b ) );\n\t}\n\tif ( a >= b ) {\n\t\treturn new RangeError( format( 'invalid argument. Minimum support must be less than maximum support. Value: `[%f, %f]`.', a, b ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.\n*\n* @private\n* @param {PRNG} rand - pseudorandom number generator\n* @param {number} a - minimum support (inclusive)\n* @param {number} b - maximum support (exclusive)\n* @returns {number} pseudorandom number\n*/\nfunction uniform( rand, a, b ) {\n\tvar r = rand();\n\treturn ( b*r ) + ( (1.0-r)*a ); // equivalent to (b-a)*r + a\n}\n\n\n// EXPORTS //\n\nmodule.exports = uniform;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar uniform0 = require( './uniform.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating uniformly distributed random numbers.\n*\n* @param {number} [a] - minimum support (inclusive)\n* @param {number} [b] - maximum support (exclusive)\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {RangeError} `a` must be less than `b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var uniform = factory( 0.0, 1.0 );\n*\n* var v = uniform();\n* // returns <number>\n*\n* @example\n* var uniform = factory( -3.0, -1.0, {\n*     'seed': 297\n* });\n* var v = uniform();\n* // returns <number>\n*/\nfunction factory() {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar a;\n\tvar b;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\terr = validate( a, b );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( a === void 0 ) {\n\t\tprng = uniform2;\n\t} else {\n\t\tprng = uniform1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'uniform' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( a === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ a, b ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = uniform1();\n\t* // returns <number>\n\t*/\n\tfunction uniform1() {\n\t\treturn uniform0( rand, a, b );\n\t}\n\n\t/**\n\t* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.\n\t*\n\t* @private\n\t* @param {number} a - minimum support (inclusive)\n\t* @param {number} b - maximum support (exclusive)\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = uniform2( 0.0, 1.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = uniform2( 1.0, 0.0 );\n\t* // returns NaN\n\t*/\n\tfunction uniform2( a, b ) {\n\t\tif (\n\t\t\tisnan( a ) ||\n\t\t\tisnan( b ) ||\n\t\t\ta >= b\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn uniform0( rand, a, b );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.\n*\n* @name uniform\n* @type {PRNG}\n* @param {number} a - minimum support (inclusive)\n* @param {number} b - maximum support (exclusive)\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = uniform( 0.0, 1.0 );\n* // returns <number>\n*/\nvar uniform = factory();\n\n\n// EXPORTS //\n\nmodule.exports = uniform;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Uniform distribution pseudorandom numbers.\n*\n* @module @stdlib/random/base/uniform\n*\n* @example\n* var uniform = require( '@stdlib/random/base/uniform' );\n*\n* var v = uniform( 0.0, 1.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/uniform' ).factory;\n* var uniform = factory( -5.0, 5.0, {\n*     'seed': 297\n* });\n*\n* var v = uniform();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/uniform' ).factory;\n* var uniform = factory({\n*     'seed': 297\n* });\n*\n* var v = uniform( -5.0, 5.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/uniform' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a continuous uniform distribution.\n*\n* @name factory\n* @type {Function}\n* @param {number} [a] - minimum support\n* @param {number} [b] - maximum support\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var uniform = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = uniform( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var uniform = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = uniform( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a continuous uniform distribution.\n*\n* @name uniform\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = uniform( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = uniform( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar uniform = factory();\n\n\n// EXPORTS //\n\nmodule.exports = uniform;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a continuous uniform distribution.\n*\n* @module @stdlib/random/array/uniform\n*\n* @example\n* var uniform = require( '@stdlib/random/array/uniform' );\n*\n* var arr = uniform( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var uniform = require( '@stdlib/random/array/uniform' );\n*\n* var arr = uniform( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var uniform = require( '@stdlib/random/array/uniform' );\n*\n* var rand = uniform.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var uniform = require( '@stdlib/random/array/uniform' );\n*\n* var rand = uniform.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( k, lambda ) {\n\tif ( !isPositive( k ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', k ) );\n\t}\n\tif ( !isPositive( lambda ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Shape parameter must be a positive number. Value: `%s`.', lambda ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Weibull distribution.\n*\n* @private\n* @param {PRNG} rand - PRNG for generating uniformly distributed numbers\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {NonNegativeNumber} pseudorandom number\n*/\nfunction weibull( rand, k, lambda ) {\n\treturn lambda * pow( -ln( 1.0-rand() ), 1.0/k );\n}\n\n\n// EXPORTS //\n\nmodule.exports = weibull;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar randu = require( './../../../base/mt19937' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar weibull0 = require( './weibull.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating Weibull distributed random numbers.\n*\n* @param {PositiveNumber} [k] - scale parameter\n* @param {PositiveNumber} [lambda] - shape parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var weibull = factory( 2.0, 1.0 );\n*\n* var v = weibull();\n* // returns <number>\n*\n* @example\n* var weibull = factory( 2.0, 2.0, {\n*     'seed': 297\n* });\n* var v = weibull();\n* // returns <number>\n*/\nfunction factory() {\n\tvar lambda;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar k;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tk = arguments[ 0 ];\n\t\tlambda = arguments[ 1 ];\n\t\terr = validate( lambda, k );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( lambda === void 0 ) {\n\t\tprng = weibull2;\n\t} else {\n\t\tprng = weibull1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'weibull' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( k === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ k, lambda ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Weibull distribution.\n\t*\n\t* @private\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = weibull1();\n\t* // returns <number>\n\t*/\n\tfunction weibull1() {\n\t\treturn weibull0( rand, k, lambda );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Weibull distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} k - scale parameter\n\t* @param {PositiveNumber} lambda - shape parameter\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = weibull2( 2.0, 1.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = weibull2( 3.0, 0.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = weibull2( 0.0, 2.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = weibull2( NaN, NaN );\n\t* // returns NaN\n\t*/\n\tfunction weibull2( k, lambda ) {\n\t\tif (\n\t\t\tisnan( k ) ||\n\t\t\tisnan( lambda ) ||\n\t\t\tk <= 0.0 ||\n\t\t\tlambda <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn weibull0( rand, k, lambda );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Weibull distribution.\n*\n* @name weibull\n* @type {PRNG}\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {NonNegativeNumber} pseudorandom number\n*\n* @example\n* var v = weibull( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var v = weibull( -2.0, 3.0 );\n* // returns NaN\n*/\nvar weibull = factory();\n\n\n// EXPORTS //\n\nmodule.exports = weibull;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Weibull distributed pseudorandom numbers.\n*\n* @module @stdlib/random/base/weibull\n*\n* @example\n* var weibull = require( '@stdlib/random/base/weibull' );\n*\n* var v = weibull( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/weibull' ).factory;\n* var weibull = factory( 2.0, 3.0, {\n*     'seed': 297\n* });\n*\n* var v = weibull();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/weibull' ).factory;\n* var weibull = factory({\n*     'seed': 297\n* });\n*\n* var v = weibull( 2.0, 3.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binaryFactory = require( './../../../array/tools/binary-factory' );\nvar dtypes = require( '@stdlib/array/dtypes' );\nvar defaults = require( '@stdlib/array/defaults' );\nvar base = require( './../../../base/weibull' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes( 'real_floating_point_and_generic' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers drawn from a Weibull distribution.\n*\n* @name factory\n* @type {Function}\n* @param {PositiveNumber} [k] - scale parameter\n* @param {PositiveNumber} [lambda] - shape parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var weibull = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = weibull( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var weibull = factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = weibull( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar factory = binaryFactory( base, DTYPES, defaults.get( 'dtypes.real_floating_point' ) );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom numbers drawn from a Weibull distribution.\n*\n* @name weibull\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = weibull( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = weibull( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar weibull = factory();\n\n\n// EXPORTS //\n\nmodule.exports = weibull;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers drawn from a Weibull distribution.\n*\n* @module @stdlib/random/array/weibull\n*\n* @example\n* var weibull = require( '@stdlib/random/array/weibull' );\n*\n* var arr = weibull( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* var weibull = require( '@stdlib/random/array/weibull' );\n*\n* var arr = weibull( 10, 2.0, 5.0, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var weibull = require( '@stdlib/random/array/weibull' );\n*\n* var rand = weibull.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var weibull = require( '@stdlib/random/array/weibull' );\n*\n* var rand = weibull.factory( 2.0, 5.0 );\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"assign\": \"main.assign\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name arcsine\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/arcsine}\n*/\nsetReadOnly( ns, 'arcsine', require( './../../array/arcsine' ) );\n\n/**\n* @name bernoulli\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/bernoulli}\n*/\nsetReadOnly( ns, 'bernoulli', require( './../../array/bernoulli' ) );\n\n/**\n* @name beta\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/beta}\n*/\nsetReadOnly( ns, 'beta', require( './../../array/beta' ) );\n\n/**\n* @name betaprime\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/betaprime}\n*/\nsetReadOnly( ns, 'betaprime', require( './../../array/betaprime' ) );\n\n/**\n* @name binomial\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/binomial}\n*/\nsetReadOnly( ns, 'binomial', require( './../../array/binomial' ) );\n\n/**\n* @name cauchy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/cauchy}\n*/\nsetReadOnly( ns, 'cauchy', require( './../../array/cauchy' ) );\n\n/**\n* @name chi\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/chi}\n*/\nsetReadOnly( ns, 'chi', require( './../../array/chi' ) );\n\n/**\n* @name chisquare\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/chisquare}\n*/\nsetReadOnly( ns, 'chisquare', require( './../../array/chisquare' ) );\n\n/**\n* @name cosine\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/cosine}\n*/\nsetReadOnly( ns, 'cosine', require( './../../array/cosine' ) );\n\n/**\n* @name discreteUniform\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/discrete-uniform}\n*/\nsetReadOnly( ns, 'discreteUniform', require( './../../array/discrete-uniform' ) );\n\n/**\n* @name erlang\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/erlang}\n*/\nsetReadOnly( ns, 'erlang', require( './../../array/erlang' ) );\n\n/**\n* @name exponential\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/exponential}\n*/\nsetReadOnly( ns, 'exponential', require( './../../array/exponential' ) );\n\n/**\n* @name f\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/f}\n*/\nsetReadOnly( ns, 'f', require( './../../array/f' ) );\n\n/**\n* @name frechet\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/frechet}\n*/\nsetReadOnly( ns, 'frechet', require( './../../array/frechet' ) );\n\n/**\n* @name gamma\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/gamma}\n*/\nsetReadOnly( ns, 'gamma', require( './../../array/gamma' ) );\n\n/**\n* @name geometric\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/geometric}\n*/\nsetReadOnly( ns, 'geometric', require( './../../array/geometric' ) );\n\n/**\n* @name gumbel\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/gumbel}\n*/\nsetReadOnly( ns, 'gumbel', require( './../../array/gumbel' ) );\n\n/**\n* @name hypergeometric\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/hypergeometric}\n*/\nsetReadOnly( ns, 'hypergeometric', require( './../../array/hypergeometric' ) );\n\n/**\n* @name invgamma\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/invgamma}\n*/\nsetReadOnly( ns, 'invgamma', require( './../../array/invgamma' ) );\n\n/**\n* @name kumaraswamy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/kumaraswamy}\n*/\nsetReadOnly( ns, 'kumaraswamy', require( './../../array/kumaraswamy' ) );\n\n/**\n* @name laplace\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/laplace}\n*/\nsetReadOnly( ns, 'laplace', require( './../../array/laplace' ) );\n\n/**\n* @name levy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/levy}\n*/\nsetReadOnly( ns, 'levy', require( './../../array/levy' ) );\n\n/**\n* @name logistic\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/logistic}\n*/\nsetReadOnly( ns, 'logistic', require( './../../array/logistic' ) );\n\n/**\n* @name lognormal\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/lognormal}\n*/\nsetReadOnly( ns, 'lognormal', require( './../../array/lognormal' ) );\n\n/**\n* @name minstd\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/minstd}\n*/\nsetReadOnly( ns, 'minstd', require( './../../array/minstd' ) );\n\n/**\n* @name minstdShuffle\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/minstd-shuffle}\n*/\nsetReadOnly( ns, 'minstdShuffle', require( './../../array/minstd-shuffle' ) );\n\n/**\n* @name mt19937\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/mt19937}\n*/\nsetReadOnly( ns, 'mt19937', require( './../../array/mt19937' ) );\n\n/**\n* @name negativeBinomial\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/negative-binomial}\n*/\nsetReadOnly( ns, 'negativeBinomial', require( './../../array/negative-binomial' ) );\n\n/**\n* @name normal\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/normal}\n*/\nsetReadOnly( ns, 'normal', require( './../../array/normal' ) );\n\n/**\n* @name pareto1\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/pareto-type1}\n*/\nsetReadOnly( ns, 'pareto1', require( './../../array/pareto-type1' ) );\n\n/**\n* @name poisson\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/poisson}\n*/\nsetReadOnly( ns, 'poisson', require( './../../array/poisson' ) );\n\n/**\n* @name randu\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/randu}\n*/\nsetReadOnly( ns, 'randu', require( './../../array/randu' ) );\n\n/**\n* @name rayleigh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/rayleigh}\n*/\nsetReadOnly( ns, 'rayleigh', require( './../../array/rayleigh' ) );\n\n/**\n* @name t\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/t}\n*/\nsetReadOnly( ns, 't', require( './../../array/t' ) );\n\n/**\n* @name triangular\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/triangular}\n*/\nsetReadOnly( ns, 'triangular', require( './../../array/triangular' ) );\n\n/**\n* @name uniform\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/uniform}\n*/\nsetReadOnly( ns, 'uniform', require( './../../array/uniform' ) );\n\n/**\n* @name weibull\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/weibull}\n*/\nsetReadOnly( ns, 'weibull', require( './../../array/weibull' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar ln = require( '@stdlib/math/base/special/ln' );\nvar sin = require( '@stdlib/math/base/special/sin' );\nvar cos = require( '@stdlib/math/base/special/cos' );\nvar TWO_PI = require( '@stdlib/constants/float64/two-pi' );\n\n\n// MAIN //\n\n/**\n* Returns a function for generating standard normally distributed pseudorandom numbers using the Box-Muller algorithm.\n*\n* @private\n* @param {PRNG} rand - PRNG which returns standard uniformly distributed numbers\n* @returns {PRNG} PRNG\n*/\nfunction wrap( rand ) {\n\tvar flg;\n\tvar r;\n\n\t// Flag indicating whether to generate new normal random variates or return a cached normal random variate:\n\tflg = true;\n\n\treturn randn;\n\n\t/**\n\t* Generates a standard normally distributed pseudorandom number.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var r = randn();\n\t* // returns <number>\n\t*/\n\tfunction randn() {\n\t\tvar u1;\n\t\tvar u2;\n\t\tvar a;\n\t\tvar b;\n\t\tif ( flg ) {\n\t\t\t// Note: if `u1` is `0`, the natural log blows up, so we keep trying until we get a non-zero rand. Rarely should we need more than one iteration.\n\t\t\tdo {\n\t\t\t\tu1 = rand();\n\t\t\t\tu2 = rand();\n\t\t\t} while (\n\t\t\t\tu1 === 0.0\n\t\t\t);\n\t\t\ta = sqrt( -2.0 * ln(u1) );\n\t\t\tb = TWO_PI * u2;\n\t\t\tr = a * cos( b ); // cache for next call\n\t\t\tflg = false;\n\t\t\treturn a * sin( b );\n\t\t}\n\t\tflg = true;\n\t\treturn r;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = wrap;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar ln = require( '@stdlib/math/base/special/ln' );\nvar cos = require( '@stdlib/math/base/special/cos' );\nvar PI = require( '@stdlib/constants/float64/pi' );\n\n\n// VARIABLES //\n\nvar COS_PI = cos( PI ); // -1\n\n\n// MAIN //\n\n/**\n* Returns the minimum possible normally distributed pseudorandom number.\n*\n* @private\n* @param {number} min - minimum possible uniformly distributed pseudorandom number\n* @returns {number} minimum possible number\n*/\nfunction getMin( min ) {\n\tvar a = sqrt( -2.0 * ln( min ) );\n\treturn a * COS_PI;\n}\n\n\n// EXPORTS //\n\nmodule.exports = getMin;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar ln = require( '@stdlib/math/base/special/ln' );\nvar cos = require( '@stdlib/math/base/special/cos' );\nvar TWO_PI = require( '@stdlib/constants/float64/two-pi' );\n\n\n// MAIN //\n\n/**\n* Returns the maximum possible normally distributed pseudorandom number.\n*\n* @private\n* @param {number} min - minimum possible uniformly distributed pseudorandom number\n* @returns {number} maximum possible number\n*/\nfunction getMax( min ) {\n\tvar a = sqrt( -2.0 * ln( min ) );\n\tvar b = TWO_PI * min;\n\treturn a * cos( b );\n}\n\n\n// EXPORTS //\n\nmodule.exports = getMax;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isUint32Array = require( '@stdlib/assert/is-uint32array' );\nvar mt19937 = require( './../../../base/mt19937' ).factory;\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar randn0 = require( './randn.js' );\nvar getMin = require( './min.js' );\nvar getMax = require( './max.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator which implements the Box-Muller transform to generate standard normally distributed pseudorandom numbers.\n*\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var randn = factory();\n*\n* var r = randn();\n* // returns <number>\n*\n* @example\n* // Return a seeded PRNG:\n* var randn = factory({\n*     'seed': 12345\n* });\n*\n* var r = randn();\n* // returns <number>\n*/\nfunction factory( options ) {\n\tvar randu;\n\tvar randn;\n\tvar rand;\n\tvar opts;\n\n\topts = {\n\t\t'copy': true\n\t};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', options.prng ) );\n\t\t\t}\n\t\t\trandu = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\tif ( opts.state === void 0 ) {\n\t\tif ( randu === void 0 ) {\n\t\t\trand = mt19937( opts );\n\t\t\trandu = rand.normalized;\n\t\t} else {\n\t\t\topts.seed = null;\n\t\t}\n\t} else {\n\t\trand = mt19937( opts );\n\t\trandu = rand.normalized;\n\t}\n\trandn = randn0( randu );\n\n\tsetReadOnly( randn, 'NAME', 'box-muller' );\n\tif ( opts.seed === null ) {\n\t\tsetReadOnly( randn, 'seed', null );\n\t\tsetReadOnly( randn, 'seedLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( randn, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( randn, 'seedLength', getSeedLength );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadWriteAccessor( randn, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( randn, 'stateLength', null );\n\t\tsetReadOnly( randn, 'byteLength', null );\n\t\tsetReadOnly( randn, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadWriteAccessor( randn, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( randn, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( randn, 'byteLength', getStateSize );\n\t\tsetReadOnly( randn, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( randn, 'PRNG', randu );\n\n\tif ( hasOwnProp( randu, 'MIN' ) ) {\n\t\tsetReadOnly( randn, 'MIN', getMin( randu.MIN ) );\n\t\tsetReadOnly( randn, 'MAX', getMax( randu.MIN ) );\n\t} else {\n\t\tsetReadOnly( randn, 'MIN', null );\n\t\tsetReadOnly( randn, 'MAX', null );\n\t}\n\n\treturn randn;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = randn.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Generates a standard normally distributed random number.\n*\n* ## Method\n*\n* -   Given two independent uniformly distributed random variables \\\\( U_1 \\\\) and \\\\( U_2 \\\\) in the interval \\\\( [0,1) \\\\), let\n*\n*     ``` tex\n*     \\begin{align*}\n*     Z_1 &= R \\cos(\\theta) = \\sqrt{-2 \\ln(U_1)} \\cos(2\\pi U_2) \\\\\n*     Z_2 &= R \\sin(\\theta) = \\sqrt{-2 \\ln(U_1)} \\sin(2\\pi U_2)\n*     \\end{align*}\n*     ```\n*\n*     where \\\\( Z_1 \\\\) and \\\\( Z_2 \\\\) are independent random variables with a standard normal distribution.\n*\n* -   As two uniform random variates are mapped to two standard normal random variates, one of the random variates is cached and returned upon the following invocation.\n*\n* ## Notes\n*\n* -   The minimum and maximum pseudorandom numbers which can be generated are dependent on the number of bits an underlying uniform pseudorandom number generator (PRNG) uses. For instance, if a PRNG uses \\\\( 32 \\\\) bits, the smallest non-zero number that can be generated is \\\\( 2^{-32}). When \\\\( U_1 \\\\) equals this value and \\\\( U_2 \\\\) equals \\\\( 0 \\\\),\n*\n*     ``` tex\n*     r = \\sqrt{-2\\ln(2^{-32})} \\cos(2\\pi) \\approx 6.66\n*     ```\n*\n*     which means that the algorithm cannot produce random variates more than \\\\( 6.66 \\\\) standard deviations from the mean.\n*\n*     <!-- <note> -->\n*\n*     This corresponds to a \\\\( 2.74 \\times 10^{-11} \\\\) loss due to tail truncation.\n*\n*     <!-- </note> -->\n*\n* ## References\n*\n* -   Box, G. E. P., and Mervin E. Muller. 1958. \"A Note on the Generation of Random Normal Deviates.\" _The Annals of Mathematical Statistics_ 29 (2). The Institute of Mathematical Statistics: 610\u201311. doi:[10.1214/aoms/1177706645](http://dx.doi.org/10.1214/aoms/1177706645).\n* -   Bell, James R. 1968. \"Algorithm 334: Normal Random Deviates.\" _Communications of the ACM_ 11 (7). New York, NY, USA: ACM: 498. doi:[10.1145/363397.363547](http://dx.doi.org/10.1145/363397.363547).\n* -   Knop, R. 1969. \"Remark on Algorithm 334 \\[G5]: Normal Random Deviates.\" _Communications of the ACM_ 12 (5). New York, NY, USA: ACM: 281. doi:[10.1145/362946.362996](http://dx.doi.org/10.1145/362946.362996).\n* -   Marsaglia, G., and T. A. Bray. 1964. \"A Convenient Method for Generating Normal Variables.\" _SIAM Review_ 6 (3). Society for Industrial; Applied Mathematics: 260\u201364. doi:[10.1137/1006063](http://dx.doi.org/10.1137/1006063).\n* -   Thomas, David B., Wayne Luk, Philip H.W. Leong, and John D. Villasenor. 2007. \"Gaussian Random Number Generators.\" _ACM Computing Surveys_ 39 (4). New York, NY, USA: ACM. doi:[10.1145/1287620.1287622](http://dx.doi.org/10.1145/1287620.1287622).\n*\n* @name randn\n* @type {PRNG}\n* @returns {number} pseudorandom number\n*\n* @example\n* var r = randn();\n* // returns <number>\n*/\nvar randn = factory();\n\n\n// EXPORTS //\n\nmodule.exports = randn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normally distributed pseudorandom numbers using the Box-Muller transform.\n*\n* @module @stdlib/random/base/box-muller\n*\n* @example\n* var randn = require( '@stdlib/random/base/box-muller' );\n*\n* var r = randn();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/box-muller' ).factory;\n*\n* var randn = factory({\n*     'seed': 12345\n* });\n*\n* var r = randn();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"name\": \"mt19937\",\n\t\"copy\": true\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar minstd = require( './../../../base/minstd' );\nvar minstdShuffle = require( './../../../base/minstd-shuffle' );\nvar mt19937 = require( './../../../base/mt19937' );\n\n\n// MAIN //\n\nvar prngs = {};\n\nprngs[ 'minstd' ] = minstd;\nprngs[ 'minstd-shuffle' ] = minstdShuffle;\nprngs[ 'mt19937' ] = mt19937;\n\n\n// EXPORTS //\n\nmodule.exports = prngs;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar format = require( '@stdlib/string/format' );\nvar defaults = require( './defaults.json' );\nvar PRNGS = require( './prngs.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers having integer values.\n*\n* @param {Options} [options] - function options\n* @param {string} [options.name='mt19937'] - name of pseudorandom number generator\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide the name of a supported pseudorandom number generator\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var randi = factory();\n* var v = randi();\n* // returns <number>\n*\n* @example\n* var randi = factory({\n*     'name': 'minstd'\n* });\n* var v = randi();\n* // returns <number>\n*\n* @example\n* var randi = factory({\n*     'seed': 12345\n* });\n* var v = randi();\n* // returns <number>\n*\n* @example\n* var randi = factory({\n*     'name': 'minstd',\n*     'seed': 12345\n* });\n* var v = randi();\n* // returns <number>\n*/\nfunction factory( options ) {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\n\topts = {\n\t\t'name': defaults.name,\n\t\t'copy': defaults.copy\n\t};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'name' ) ) {\n\t\t\topts.name = options.name;\n\t\t}\n\t\tif ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( opts.state === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option cannot be undefined. Option: `%s`.', 'state', opts.state ) );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option cannot be undefined. Option: `%s`.', 'seed', opts.seed ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t\t}\n\t\t}\n\t}\n\tprng = PRNGS[ opts.name ];\n\tif ( prng === void 0 ) {\n\t\tthrow new Error( format( 'invalid option. Unrecognized/unsupported PRNG. Option: `%s`.', opts.name ) );\n\t}\n\tif ( opts.state === void 0 ) {\n\t\tif ( opts.seed === void 0 ) {\n\t\t\trand = prng.factory();\n\t\t} else {\n\t\t\trand = prng.factory({\n\t\t\t\t'seed': opts.seed\n\t\t\t});\n\t\t}\n\t} else {\n\t\trand = prng.factory({\n\t\t\t'state': opts.state,\n\t\t\t'copy': opts.copy\n\t\t});\n\t}\n\tsetReadOnly( randi, 'NAME', 'randi' );\n\tsetReadOnlyAccessor( randi, 'seed', getSeed );\n\tsetReadOnlyAccessor( randi, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( randi, 'state', getState, setState );\n\tsetReadOnlyAccessor( randi, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( randi, 'byteLength', getStateSize );\n\tsetReadOnly( randi, 'toJSON', toJSON );\n\tsetReadOnly( randi, 'PRNG', rand );\n\tsetReadOnly( randi, 'MIN', rand.MIN );\n\tsetReadOnly( randi, 'MAX', rand.MAX );\n\n\treturn randi;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {*} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {*} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {*} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = randi.NAME + '-' + rand.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number having an integer value.\n\t*\n\t* @private\n\t* @returns {integer} pseudorandom number\n\t*\n\t* @example\n\t* var v = randi();\n\t* // returns <number>\n\t*/\n\tfunction randi() {\n\t\treturn rand();\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number having an integer value.\n*\n* @name randi\n* @type {PRNG}\n* @returns {integer} pseudorandom number\n*\n* @example\n* var v = randi();\n* // returns <number>\n*/\nvar randi = factory();\n\n\n// EXPORTS //\n\nmodule.exports = randi;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Pseudorandom numbers having integer values.\n*\n* @module @stdlib/random/base/randi\n*\n* @example\n* var randi = require( '@stdlib/random/base/randi' );\n*\n* var v = randi();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/randi' ).factory;\n*\n* var randi = factory({\n*     'name': 'minstd',\n*     'seed': 12345\n* });\n*\n* var v = randi();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"name\": \"improved-ziggurat\",\n\t\"copy\": true\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar boxMuller = require( './../../../base/box-muller' );\nvar improvedZiggurat = require( './../../../base/improved-ziggurat' );\n\n\n// MAIN //\n\nvar prngs = {};\n\nprngs[ 'box-muller' ] = boxMuller;\nprngs[ 'improved-ziggurat' ] = improvedZiggurat;\n\n\n// EXPORTS //\n\nmodule.exports = prngs;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar format = require( '@stdlib/string/format' );\nvar noop = require( '@stdlib/utils/noop' );\nvar typedarray2json = require( '@stdlib/array/to-json' );\nvar defaults = require( './defaults.json' );\nvar PRNGS = require( './prngs.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for numbers from a standard normal distribution.\n*\n* @param {Options} [options] - function options\n* @param {string} [options.name='improved-ziggurat'] - name of pseudorandom number generator\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide the name of a supported pseudorandom number generator\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var randn = factory();\n*\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var randn = factory({\n*     'name': 'box-muller'\n* });\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var randn = factory({\n*     'seed': 12345\n* });\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var randn = factory({\n*     'name': 'box-muller',\n*     'seed': 12345\n* });\n* var v = randn();\n* // returns <number>\n*/\nfunction factory( options ) {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\n\topts = {\n\t\t'name': defaults.name,\n\t\t'copy': defaults.copy\n\t};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'name' ) ) {\n\t\t\topts.name = options.name;\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\topts.prng = options.prng;\n\t\t\tif ( opts.prng === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option cannot be undefined. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( opts.state === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option cannot be undefined. Option: `%s`.', 'state', opts.state ) );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option cannot be undefined. Option: `%s`.', 'seed', opts.seed ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t\t}\n\t\t}\n\t}\n\tprng = PRNGS[ opts.name ];\n\tif ( prng === void 0 ) {\n\t\tthrow new Error( format( 'invalid option. Unrecognized/unsupported PRNG. Option: `%s`.', opts.name ) );\n\t}\n\tif ( opts.prng === void 0 ) {\n\t\tif ( opts.state === void 0 ) {\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\trand = prng.factory();\n\t\t\t} else {\n\t\t\t\trand = prng.factory({\n\t\t\t\t\t'seed': opts.seed\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\trand = prng.factory({\n\t\t\t\t'state': opts.state,\n\t\t\t\t'copy': opts.copy\n\t\t\t});\n\t\t}\n\t} else {\n\t\trand = prng.factory({\n\t\t\t'prng': opts.prng\n\t\t});\n\t}\n\tsetReadOnly( normal, 'NAME', 'randn' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts.prng ) {\n\t\tsetReadOnly( normal, 'seed', null );\n\t\tsetReadOnly( normal, 'seedLength', null );\n\t\tsetReadWriteAccessor( normal, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( normal, 'stateLength', null );\n\t\tsetReadOnly( normal, 'byteLength', null );\n\t\tsetReadOnly( normal, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( normal, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( normal, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( normal, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( normal, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( normal, 'byteLength', getStateSize );\n\t\tsetReadOnly( normal, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( normal, 'PRNG', rand.PRNG );\n\treturn normal;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {*} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {*} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {*} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = normal.NAME + '-' + rand.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a standard normal distribution.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = normal();\n\t* // returns <number>\n\t*/\n\tfunction normal() {\n\t\treturn rand();\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a standard normal random number.\n*\n* @name normal\n* @type {PRNG}\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = normal();\n* // returns <number>\n*/\nvar normal = factory();\n\n\n// EXPORTS //\n\nmodule.exports = normal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Standard normal pseudorandom numbers.\n*\n* @module @stdlib/random/base/randn\n*\n* @example\n* var randn = require( '@stdlib/random/base/randn' );\n*\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random/base/randn' ).factory;\n*\n* var randn = factory({\n*     'name': 'box-muller',\n*     'seed': 12345\n* });\n*\n* var v = randn();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n// This file is generated using `scripts/build.js`.\n\n'use strict';\n\n// MODULES //\n\nvar prng0 = require( './../../../base/arcsine' );\nvar prng1 = require( './../../../base/bernoulli' );\nvar prng2 = require( './../../../base/beta' );\nvar prng3 = require( './../../../base/betaprime' );\nvar prng4 = require( './../../../base/binomial' );\nvar prng5 = require( './../../../base/box-muller' );\nvar prng6 = require( './../../../base/cauchy' );\nvar prng7 = require( './../../../base/chi' );\nvar prng8 = require( './../../../base/chisquare' );\nvar prng9 = require( './../../../base/cosine' );\nvar prng10 = require( './../../../base/discrete-uniform' );\nvar prng11 = require( './../../../base/erlang' );\nvar prng12 = require( './../../../base/exponential' );\nvar prng13 = require( './../../../base/f' );\nvar prng14 = require( './../../../base/frechet' );\nvar prng15 = require( './../../../base/gamma' );\nvar prng16 = require( './../../../base/geometric' );\nvar prng17 = require( './../../../base/gumbel' );\nvar prng18 = require( './../../../base/hypergeometric' );\nvar prng19 = require( './../../../base/improved-ziggurat' );\nvar prng20 = require( './../../../base/invgamma' );\nvar prng21 = require( './../../../base/kumaraswamy' );\nvar prng22 = require( './../../../base/laplace' );\nvar prng23 = require( './../../../base/levy' );\nvar prng24 = require( './../../../base/logistic' );\nvar prng25 = require( './../../../base/lognormal' );\nvar prng26 = require( './../../../base/minstd' );\nvar prng27 = require( './../../../base/minstd-shuffle' );\nvar prng28 = require( './../../../base/mt19937' );\nvar prng29 = require( './../../../base/negative-binomial' );\nvar prng30 = require( './../../../base/normal' );\nvar prng31 = require( './../../../base/pareto-type1' );\nvar prng32 = require( './../../../base/poisson' );\nvar prng33 = require( './../../../base/randi' );\nvar prng34 = require( './../../../base/randn' );\nvar prng35 = require( './../../../base/randu' );\nvar prng36 = require( './../../../base/rayleigh' );\nvar prng37 = require( './../../../base/t' );\nvar prng38 = require( './../../../base/triangular' );\nvar prng39 = require( './../../../base/uniform' );\nvar prng40 = require( './../../../base/weibull' );\n\n\n// MAIN //\n\nvar prngs = {};\nprngs[ 'arcsine' ] = prng0.factory;\nprngs[ 'bernoulli' ] = prng1.factory;\nprngs[ 'beta' ] = prng2.factory;\nprngs[ 'betaprime' ] = prng3.factory;\nprngs[ 'binomial' ] = prng4.factory;\nprngs[ 'box-muller' ] = prng5.factory;\nprngs[ 'cauchy' ] = prng6.factory;\nprngs[ 'chi' ] = prng7.factory;\nprngs[ 'chisquare' ] = prng8.factory;\nprngs[ 'cosine' ] = prng9.factory;\nprngs[ 'discrete-uniform' ] = prng10.factory;\nprngs[ 'erlang' ] = prng11.factory;\nprngs[ 'exponential' ] = prng12.factory;\nprngs[ 'f' ] = prng13.factory;\nprngs[ 'frechet' ] = prng14.factory;\nprngs[ 'gamma' ] = prng15.factory;\nprngs[ 'geometric' ] = prng16.factory;\nprngs[ 'gumbel' ] = prng17.factory;\nprngs[ 'hypergeometric' ] = prng18.factory;\nprngs[ 'improved-ziggurat' ] = prng19.factory;\nprngs[ 'invgamma' ] = prng20.factory;\nprngs[ 'kumaraswamy' ] = prng21.factory;\nprngs[ 'laplace' ] = prng22.factory;\nprngs[ 'levy' ] = prng23.factory;\nprngs[ 'logistic' ] = prng24.factory;\nprngs[ 'lognormal' ] = prng25.factory;\nprngs[ 'minstd' ] = prng26.factory;\nprngs[ 'minstd-shuffle' ] = prng27.factory;\nprngs[ 'mt19937' ] = prng28.factory;\nprngs[ 'negative-binomial' ] = prng29.factory;\nprngs[ 'normal' ] = prng30.factory;\nprngs[ 'pareto-type1' ] = prng31.factory;\nprngs[ 'poisson' ] = prng32.factory;\nprngs[ 'randi' ] = prng33.factory;\nprngs[ 'randn' ] = prng34.factory;\nprngs[ 'randu' ] = prng35.factory;\nprngs[ 'rayleigh' ] = prng36.factory;\nprngs[ 't' ] = prng37.factory;\nprngs[ 'triangular' ] = prng38.factory;\nprngs[ 'uniform' ] = prng39.factory;\nprngs[ 'weibull' ] = prng40.factory;\n\n\n// EXPORTS //\n\nmodule.exports = prngs;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isArray = require( '@stdlib/assert/is-array' );\nvar contains = require( '@stdlib/assert/contains' );\nvar Int32Array = require( '@stdlib/array/int32' );\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar table = require( './prngs.js' );\n\n\n// VARIABLES //\n\nvar TYPED_ARRAY_CTORS = {\n\t'Int32Array': Int32Array,\n\t'Uint32Array': Uint32Array\n};\nvar PRNG_WRAPPERS = [ 'randi', 'randn', 'randu' ];\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized pseudorandom number generator.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {(*|Function)} value or PRNG\n*\n* @example\n* var parseJSON = require( '@stdlib/utils/parse-json' );\n* var mt19937 = require( '@stdlib/random/base/mt19937' );\n*\n* var str = JSON.stringify( mt19937 );\n* var rand = parseJSON( str, reviveBasePRNG );\n* // returns <Function>\n*/\nfunction reviveBasePRNG( key, value ) {\n\tvar factory;\n\tvar opts;\n\tvar args;\n\tvar ctor;\n\tvar tmp;\n\tif (\n\t\tvalue &&\n\t\tvalue.type === 'PRNG' &&\n\t\tisString( value.name ) &&\n\t\tisObject( value.state ) &&\n\t\tisArray( value.params ) &&\n\t\tisString( value.state.type ) &&\n\t\tisArray( value.state.data )\n\t) {\n\t\topts = {};\n\t\tfactory = table[ value.name ];\n\t\tif ( factory === void 0 ) {\n\t\t\ttmp = value.name.split( '-' );\n\t\t\tif ( contains( PRNG_WRAPPERS, tmp[ 0 ] ) ) {\n\t\t\t\tfactory = table[ tmp[ 0 ] ];\n\t\t\t\topts.name = tmp.slice( 1 ).join( '-' );\n\t\t\t}\n\t\t}\n\t\tif ( factory ) {\n\t\t\tctor = TYPED_ARRAY_CTORS[ value.state.type ];\n\t\t\tif ( ctor ) {\n\t\t\t\topts.state = new ctor( value.state.data );\n\n\t\t\t\targs = value.params.slice();\n\t\t\t\targs.push( opts );\n\n\t\t\t\ttry {\n\t\t\t\t\treturn factory.apply( null, args );\n\t\t\t\t} catch ( error ) { // eslint-disable-line no-unused-vars\n\t\t\t\t\t// Return the original JSON value...\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reviveBasePRNG;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Revive a JSON-serialized pseudorandom generator.\n*\n* @module @stdlib/random/base/reviver\n*\n* @example\n* var parseJSON = require( '@stdlib/utils/parse-json' );\n* var mt19937 = require( '@stdlib/random/base/mt19937' );\n* var reviveBasePRNG = require( '@stdlib/random/base/reviver' );\n*\n* var str = JSON.stringify( mt19937 );\n* var rand = parseJSON( str, reviveBasePRNG );\n* // returns <Function>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace random\n*/\nvar random = {};\n\n/**\n* @name arcsine\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/arcsine}\n*/\nsetReadOnly( random, 'arcsine', require( './../../base/arcsine' ) );\n\n/**\n* @name bernoulli\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/bernoulli}\n*/\nsetReadOnly( random, 'bernoulli', require( './../../base/bernoulli' ) );\n\n/**\n* @name beta\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/beta}\n*/\nsetReadOnly( random, 'beta', require( './../../base/beta' ) );\n\n/**\n* @name betaprime\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/betaprime}\n*/\nsetReadOnly( random, 'betaprime', require( './../../base/betaprime' ) );\n\n/**\n* @name binomial\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/binomial}\n*/\nsetReadOnly( random, 'binomial', require( './../../base/binomial' ) );\n\n/**\n* @name boxMuller\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/box-muller}\n*/\nsetReadOnly( random, 'boxMuller', require( './../../base/box-muller' ) );\n\n/**\n* @name cauchy\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/cauchy}\n*/\nsetReadOnly( random, 'cauchy', require( './../../base/cauchy' ) );\n\n/**\n* @name chi\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/chi}\n*/\nsetReadOnly( random, 'chi', require( './../../base/chi' ) );\n\n/**\n* @name chisquare\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/chisquare}\n*/\nsetReadOnly( random, 'chisquare', require( './../../base/chisquare' ) );\n\n/**\n* @name cosine\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/cosine}\n*/\nsetReadOnly( random, 'cosine', require( './../../base/cosine' ) );\n\n/**\n* @name discreteUniform\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/discrete-uniform}\n*/\nsetReadOnly( random, 'discreteUniform', require( './../../base/discrete-uniform' ) );\n\n/**\n* @name erlang\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/erlang}\n*/\nsetReadOnly( random, 'erlang', require( './../../base/erlang' ) );\n\n/**\n* @name exponential\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/exponential}\n*/\nsetReadOnly( random, 'exponential', require( './../../base/exponential' ) );\n\n/**\n* @name f\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/f}\n*/\nsetReadOnly( random, 'f', require( './../../base/f' ) );\n\n/**\n* @name frechet\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/frechet}\n*/\nsetReadOnly( random, 'frechet', require( './../../base/frechet' ) );\n\n/**\n* @name gamma\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/gamma}\n*/\nsetReadOnly( random, 'gamma', require( './../../base/gamma' ) );\n\n/**\n* @name geometric\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/geometric}\n*/\nsetReadOnly( random, 'geometric', require( './../../base/geometric' ) );\n\n/**\n* @name gumbel\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/gumbel}\n*/\nsetReadOnly( random, 'gumbel', require( './../../base/gumbel' ) );\n\n/**\n* @name hypergeometric\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/hypergeometric}\n*/\n\nsetReadOnly( random, 'hypergeometric', require( './../../base/hypergeometric' ) );\n\n/**\n* @name improvedZiggurat\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/improved-ziggurat}\n*/\nsetReadOnly( random, 'improvedZiggurat', require( './../../base/improved-ziggurat' ) );\n\n/**\n* @name invgamma\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/invgamma}\n*/\nsetReadOnly( random, 'invgamma', require( './../../base/invgamma' ) );\n\n/**\n* @name kumaraswamy\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/kumaraswamy}\n*/\nsetReadOnly( random, 'kumaraswamy', require( './../../base/kumaraswamy' ) );\n\n/**\n* @name laplace\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/laplace}\n*/\nsetReadOnly( random, 'laplace', require( './../../base/laplace' ) );\n\n/**\n* @name levy\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/levy}\n*/\nsetReadOnly( random, 'levy', require( './../../base/levy' ) );\n\n/**\n* @name logistic\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/logistic}\n*/\nsetReadOnly( random, 'logistic', require( './../../base/logistic' ) );\n\n/**\n* @name lognormal\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/lognormal}\n*/\nsetReadOnly( random, 'lognormal', require( './../../base/lognormal' ) );\n\n/**\n* @name minstd\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/minstd}\n*/\nsetReadOnly( random, 'minstd', require( './../../base/minstd' ) );\n\n/**\n* @name minstdShuffle\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/minstd-shuffle}\n*/\nsetReadOnly( random, 'minstdShuffle', require( './../../base/minstd-shuffle' ) );\n\n/**\n* @name mt19937\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/mt19937}\n*/\nsetReadOnly( random, 'mt19937', require( './../../base/mt19937' ) );\n\n/**\n* @name negativeBinomial\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/negative-binomial}\n*/\nsetReadOnly( random, 'negativeBinomial', require( './../../base/negative-binomial' ) );\n\n/**\n* @name normal\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/normal}\n*/\nsetReadOnly( random, 'normal', require( './../../base/normal' ) );\n\n/**\n* @name pareto1\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/pareto-type1}\n*/\nsetReadOnly( random, 'pareto1', require( './../../base/pareto-type1' ) );\n\n/**\n* @name poisson\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/poisson}\n*/\nsetReadOnly( random, 'poisson', require( './../../base/poisson' ) );\n\n/**\n* @name randi\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/randi}\n*/\nsetReadOnly( random, 'randi', require( './../../base/randi' ) );\n\n/**\n* @name randn\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/randn}\n*/\nsetReadOnly( random, 'randn', require( './../../base/randn' ) );\n\n/**\n* @name randu\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/randu}\n*/\nsetReadOnly( random, 'randu', require( './../../base/randu' ) );\n\n/**\n* @name rayleigh\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/rayleigh}\n*/\nsetReadOnly( random, 'rayleigh', require( './../../base/rayleigh' ) );\n\n/**\n* @name reviveBasePRNG\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/reviver}\n*/\nsetReadOnly( random, 'reviveBasePRNG', require( './../../base/reviver' ) );\n\n/**\n* @name t\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/t}\n*/\nsetReadOnly( random, 't', require( './../../base/t' ) );\n\n/**\n* @name triangular\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/triangular}\n*/\nsetReadOnly( random, 'triangular', require( './../../base/triangular' ) );\n\n/**\n* @name uniform\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/uniform}\n*/\nsetReadOnly( random, 'uniform', require( './../../base/uniform' ) );\n\n/**\n* @name weibull\n* @memberof random\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/base/weibull}\n*/\nsetReadOnly( random, 'weibull', require( './../../base/weibull' ) );\n\n\n// EXPORTS //\n\nmodule.exports = random;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rarcsine = require( './../../../base/arcsine' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from an arcsine distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {RangeError} `a` must be less than `b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( a, b, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', a ) );\n\t}\n\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number and not NaN. Value: `%s`.', b ) );\n\t}\n\tif ( a >= b ) {\n\t\tthrow new RangeError( format( 'invalid argument. Minimum support must be less than maximum support. Value: `[%f, %f]`.', a, b ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rarcsine( a, b, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rarcsine( a, b );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( a, b, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from an arcsine distribution.\n*\n* @module @stdlib/random/iter/arcsine\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/arcsine' );\n*\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rbern = require( './../../../base/bernoulli' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a Bernoulli distribution.\n*\n* @param {Probability} p - success probability\n* @param {Options} [options] - function options\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} first argument must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 0.3 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( p, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isProbability( p ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a probability. Value: `%s`.', p ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rbern( p, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rbern( p );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( p, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a Bernoulli distribution.\n*\n* @module @stdlib/random/iter/bernoulli\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/bernoulli' );\n*\n* var iter = iterator( 0.3 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rbeta = require( './../../../base/beta' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a beta distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( alpha, beta, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositiveNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositiveNumber( beta ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rbeta( alpha, beta, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rbeta( alpha, beta );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( alpha, beta, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a beta distribution.\n*\n* @module @stdlib/random/iter/beta\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/beta' );\n*\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rbetaprime = require( './../../../base/betaprime' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a beta prime distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta  - second shape parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( alpha, beta, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositiveNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositiveNumber( beta ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rbetaprime( alpha, beta, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rbetaprime( alpha, beta );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( alpha, beta, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a beta prime distribution.\n*\n* @module @stdlib/random/iter/betaprime\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/betaprime' );\n*\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rbinom = require( './../../../base/binomial' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a binomial distribution.\n*\n* @param {PositiveInteger} n - number of trials\n* @param {Probability} p - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 8, 0.3 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( n, p, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositiveInteger( n ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', n ) );\n\t}\n\tif ( !isProbability( p ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a probability. Value: `%s`.', p ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rbinom( n, p, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rbinom( n, p );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( n, p, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a binomial distribution.\n*\n* @module @stdlib/random/iter/binomial\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/binomial' );\n*\n* var iter = iterator( 10, 0.3 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rnorm = require( './../../../base/box-muller' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a standard normal distribution using the Box-Muller transform.\n*\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rnorm( opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rnorm();\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a standard normal distribution using the Box-Muller transform.\n*\n* @module @stdlib/random/iter/box-muller\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/box-muller' );\n*\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rcauchy = require( './../../../base/cauchy' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a Cauchy distribution.\n*\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `x0` must be a number\n* @throws {TypeError} `gamma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( x0, gamma, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isNumber( x0 ) || isnan( x0 ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', x0 ) );\n\t}\n\tif ( !isPositive( gamma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', gamma ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rcauchy( x0, gamma, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rcauchy( x0, gamma );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( x0, gamma, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a Cauchy distribution.\n*\n* @module @stdlib/random/iter/cauchy\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/cauchy' );\n*\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rchi = require( './../../../base/chi' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a chi distribution.\n*\n* @param {PositiveNumber} k - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} first argument must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( k, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositive( k ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', k ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rchi( k, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rchi( k );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( k, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a chi distribution.\n*\n* @module @stdlib/random/iter/chi\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/chi' );\n*\n* var iter = iterator( 1.5 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rchisq = require( './../../../base/chisquare' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a chi-square distribution.\n*\n* @param {PositiveNumber} k - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} first argument must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( k, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositive( k ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', k ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rchisq( k, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rchisq( k );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( k, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a chi-square distribution.\n*\n* @module @stdlib/random/iter/chisquare\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/chisquare' );\n*\n* var iter = iterator( 1.5 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rcosine = require( './../../../base/cosine' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a raised cosine distribution.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( mu, s, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositive( s ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', s ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rcosine( mu, s, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rcosine( mu, s );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( mu, s, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a raised cosine distribution.\n*\n* @module @stdlib/random/iter/cosine\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/cosine' );\n*\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isInteger = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar runif = require( './../../../base/discrete-uniform' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a discrete uniform distribution.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `a` must be an integer\n* @throws {TypeError} `b` must be an integer\n* @throws {RangeError} `a` must be less than or equal to `b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2, 6 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( a, b, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isInteger( a ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', a ) );\n\t}\n\tif ( !isInteger( b ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', b ) );\n\t}\n\tif ( a > b ) {\n\t\tthrow new RangeError( format( 'invalid argument. Minimum support must be less than or equal to maximum support. Value: `[%d,%d]`.', a, b ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = runif( a, b, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = runif( a, b );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( a, b, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a discrete uniform distribution.\n*\n* @module @stdlib/random/iter/discrete-uniform\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/discrete-uniform' );\n*\n* var iter = iterator( -1, 2 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rerlang = require( './../../../base/erlang' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from an Erlang distribution.\n*\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda  - rate parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `k` must be a positive integer\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( k, lambda, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositiveInteger( k ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', k ) );\n\t}\n\tif ( !isPositiveNumber( lambda ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', lambda ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rerlang( k, lambda, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rerlang( k, lambda );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( k, lambda, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from an Erlang distribution.\n*\n* @module @stdlib/random/iter/erlang\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/erlang' );\n*\n* var iter = iterator( 2, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rexp = require( './../../../base/exponential' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from an exponential distribution.\n*\n* @param {PositiveNumber} lambda - rate parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} first argument must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( lambda, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositive( lambda ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', lambda ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rexp( lambda, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rexp( lambda );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( lambda, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from an exponential distribution.\n*\n* @module @stdlib/random/iter/exponential\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/exponential' );\n*\n* var iter = iterator( 1.5 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rf = require( './../../../base/f' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from an F distribution.\n*\n* @param {PositiveNumber} d1 - degrees of freedom\n* @param {PositiveNumber} d2 - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `d1` must be a positive number\n* @throws {TypeError} `d2` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( d1, d2, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositiveNumber( d1 ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', d1 ) );\n\t}\n\tif ( !isPositiveNumber( d2 ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', d2 ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rf( d1, d2, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rf( d1, d2 );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( d1, d2, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from an F distribution.\n*\n* @module @stdlib/random/iter/f\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/f' );\n*\n* var iter = iterator( 2.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rfrechet = require( './../../../base/frechet' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a Fr\u00E9chet distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s  - rate parameter\n* @param {number} m - location parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} `m` must be a number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0, 5.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( alpha, s, m, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositiveNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositiveNumber( s ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', s ) );\n\t}\n\tif ( !isNumber( m ) || isnan( m ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a number. Value: `%s`.', m ) );\n\t}\n\tif ( arguments.length > 3 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rfrechet( alpha, s, m, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rfrechet( alpha, s, m );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( alpha, s, m, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a Fr\u00E9chet distribution.\n*\n* @module @stdlib/random/iter/frechet\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/frechet' );\n*\n* var iter = iterator( 2.0, 5.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rgamma = require( './../../../base/gamma' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta  - rate parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( alpha, beta, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositiveNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositiveNumber( beta ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rgamma( alpha, beta, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rgamma( alpha, beta );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( alpha, beta, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a gamma distribution.\n*\n* @module @stdlib/random/iter/gamma\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/gamma' );\n*\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rgeom = require( './../../../base/geometric' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a geometric distribution.\n*\n* @param {Probability} p - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} first argument must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 0.3 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( p, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isProbability( p ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a probability. Value: `%s`.', p ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rgeom( p, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rgeom( p );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( p, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a geometric distribution.\n*\n* @module @stdlib/random/iter/geometric\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/geometric' );\n*\n* var iter = iterator( 0.3 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rgumbel = require( './../../../base/gumbel' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a Gumbel distribution.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} beta - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( mu, beta, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositive( beta ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rgumbel( mu, beta, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rgumbel( mu, beta );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( mu, beta, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a Gumbel distribution.\n*\n* @module @stdlib/random/iter/gumbel\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/gumbel' );\n*\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rhypergeom = require( './../../../base/hypergeometric' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a hypergeometric distribution.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a nonnegative integer\n* @throws {RangeError} number of draws must be less than or equal to the population size\n* @throws {RangeError} subpopulation size must be less than or equal to the population size\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 10, 5, 3 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( N, K, n, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', N ) );\n\t}\n\tif ( !isNonNegativeInteger( K ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', K ) );\n\t}\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%s`.', n ) );\n\t}\n\tif ( n > N ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of draws must be less than or equal to the population size. Value: `%u`.', n ) );\n\t}\n\tif ( K > N ) {\n\t\tthrow new RangeError( format( 'invalid argument. Subpopulation size must be less than or equal to the population size. Value: `%u`.', K ) );\n\t}\n\tif ( arguments.length > 3 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rhypergeom( N, K, n, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rhypergeom( N, K, n );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( N, K, n, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a hypergeometric distribution.\n*\n* @module @stdlib/random/iter/hypergeometric\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/hypergeometric' );\n*\n* var iter = iterator( 10, 5, 6 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rnorm = require( './../../../base/improved-ziggurat' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a standard normal distribution using the Improved Ziggurat algorithm.\n*\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rnorm( opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rnorm();\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a standard normal distribution using the Improved Ziggurat algorithm.\n*\n* @module @stdlib/random/iter/improved-ziggurat\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/improved-ziggurat' );\n*\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rinvgamma = require( './../../../base/invgamma' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from an inverse gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta  - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0, 2.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( alpha, beta, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositiveNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositiveNumber( beta ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rinvgamma( alpha, beta, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rinvgamma( alpha, beta );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( alpha, beta, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from an inverse gamma distribution.\n*\n* @module @stdlib/random/iter/invgamma\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/invgamma' );\n*\n* var iter = iterator( 2.0, 2.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rkumaraswamy = require( './../../../base/kumaraswamy' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a Kumaraswamy's double bounded distribution.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b  - second shape parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `a` must be a positive number\n* @throws {TypeError} `b` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( a, b, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositiveNumber( a ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', a ) );\n\t}\n\tif ( !isPositiveNumber( b ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', b ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rkumaraswamy( a, b, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rkumaraswamy( a, b );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( a, b, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a Kumaraswamy's double bounded distribution.\n*\n* @module @stdlib/random/iter/kumaraswamy\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/kumaraswamy' );\n*\n* var iter = iterator( 2.0, 1.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rlaplace = require( './../../../base/laplace' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a Laplace (double exponential) distribution.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} b - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `b` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( mu, b, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositive( b ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', b ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rlaplace( mu, b, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rlaplace( mu, b );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( mu, b, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a Laplace (double exponential) distribution.\n*\n* @module @stdlib/random/iter/laplace\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/laplace' );\n*\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rlevy = require( './../../../base/levy' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a L\u00E9vy distribution.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} c - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `c` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( mu, c, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositive( c ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', c ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rlevy( mu, c, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rlevy( mu, c );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( mu, c, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a L\u00E9vy distribution.\n*\n* @module @stdlib/random/iter/levy\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/levy' );\n*\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rlogis = require( './../../../base/logistic' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a logistic distribution.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} s - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( mu, s, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositive( s ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', s ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rlogis( mu, s, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rlogis( mu, s );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( mu, s, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a logistic distribution.\n*\n* @module @stdlib/random/iter/logistic\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/logistic' );\n*\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rlognorm = require( './../../../base/lognormal' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a lognormal distribution.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( mu, sigma, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositive( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rlognorm( mu, sigma, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rlognorm( mu, sigma );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( mu, sigma, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a lognormal distribution.\n*\n* @module @stdlib/random/iter/lognormal\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/lognormal' );\n*\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar assign = require( '@stdlib/object/assign' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar minstd = require( './../../../base/minstd' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers via a linear congruential pseudorandom number generator (LCG) based on Park and Miller.\n*\n* @param {Options} [options] - function options\n* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'normalized' ) ) {\n\t\t\tif ( !isBoolean( opts.normalized ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'normalized', opts.normalized ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = minstd( opts );\n\t\tif ( opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = minstd();\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\tif ( opts.normalized ) {\n\t\trand = rand.normalized;\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMINSTD} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMINSTD} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMINSTD} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for a linear congruential pseudorandom number generator (LCG) based on Park and Miller.\n*\n* @module @stdlib/random/iter/minstd\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/minstd' );\n*\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar assign = require( '@stdlib/object/assign' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar minstd = require( './../../../base/minstd-shuffle' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers via a linear congruential pseudorandom number generator (LCG) whose output is shuffled.\n*\n* @param {Options} [options] - function options\n* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'normalized' ) ) {\n\t\t\tif ( !isBoolean( opts.normalized ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'normalized', opts.normalized ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = minstd( opts );\n\t\tif ( opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = minstd();\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\tif ( opts.normalized ) {\n\t\trand = rand.normalized;\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMINSTD} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMINSTD} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMINSTD} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for a linear congruential pseudorandom number generator (LCG) whose output is shuffled.\n*\n* @module @stdlib/random/iter/minstd-shuffle\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/minstd-shuffle' );\n*\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar assign = require( '@stdlib/object/assign' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar mt19937 = require( './../../../base/mt19937' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers via a 32-bit Mersenne Twister pseudorandom number generator.\n*\n* @param {Options} [options] - function options\n* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'normalized' ) ) {\n\t\t\tif ( !isBoolean( opts.normalized ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'normalized', opts.normalized ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = mt19937( opts );\n\t\tif ( opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = mt19937();\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\tif ( opts.normalized ) {\n\t\trand = rand.normalized;\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for a 32-bit Mersenne Twister pseudorandom number generator.\n*\n* @module @stdlib/random/iter/mt19937\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/mt19937' );\n*\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rnbinom = require( './../../../base/negative-binomial' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a negative binomial distribution.\n*\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} first argument must be a positive number\n* @throws {TypeError} second argument must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 8, 0.3 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( r, p, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositiveNumber( r ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', r ) );\n\t}\n\tif ( !isProbability( p ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a probability. Value: `%s`.', p ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rnbinom( r, p, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rnbinom( r, p );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( r, p, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a negative binomial distribution.\n*\n* @module @stdlib/random/iter/negative-binomial\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/negative-binomial' );\n*\n* var iter = iterator( 10, 0.3 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rnorm = require( './../../../base/normal' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a normal distribution.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( mu, sigma, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositive( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rnorm( mu, sigma, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rnorm( mu, sigma );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( mu, sigma, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a normal distribution.\n*\n* @module @stdlib/random/iter/normal\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/normal' );\n*\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rpareto = require( './../../../base/pareto-type1' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a Pareto (Type I) distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta  - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( alpha, beta, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositiveNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositiveNumber( beta ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rpareto( alpha, beta, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rpareto( alpha, beta );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( alpha, beta, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a Pareto (Type I) distribution.\n*\n* @module @stdlib/random/iter/pareto-type1\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/pareto-type1' );\n*\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rpois = require( './../../../base/poisson' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a Poisson distribution.\n*\n* @param {PositiveNumber} lambda - mean\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} first argument must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( lambda, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositive( lambda ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', lambda ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rpois( lambda, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rpois( lambda );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( lambda, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a Poisson distribution.\n*\n* @module @stdlib/random/iter/poisson\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/poisson' );\n*\n* var iter = iterator( 1.5 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar assign = require( '@stdlib/object/assign' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar randi = require( './../../../base/randi' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers having integer values.\n*\n* @param {Options} [options] - function options\n* @param {string} [options.name='mt19937'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = randi( opts );\n\t\tif ( opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = randi();\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {*} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {*} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {*} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers having integer values.\n*\n* @module @stdlib/random/iter/randi\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/randi' );\n*\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar randn = require( './../../../base/randn' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a standard normal distribution.\n*\n* @param {Options} [options] - function options\n* @param {string} [options.name='improved-ziggurat'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = randn( opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = randn();\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a standard normal distribution.\n*\n* @module @stdlib/random/iter/randn\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/randn' );\n*\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar assign = require( '@stdlib/object/assign' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar randu = require( './../../../base/randu' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating uniformly distributed pseudorandom numbers between 0 and 1.\n*\n* @param {Options} [options] - function options\n* @param {string} [options.name='mt19937'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = randu( opts );\n\t\tif ( opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = randu();\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {*} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {*} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {*} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating uniformly distributed pseudorandom numbers between 0 and 1.\n*\n* @module @stdlib/random/iter/randu\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/randu' );\n*\n* var iter = iterator();\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rrayleigh = require( './../../../base/rayleigh' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a Rayleigh distribution.\n*\n* @param {PositiveNumber} sigma - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} first argument must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( sigma, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositive( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rrayleigh( sigma, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rrayleigh( sigma );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( sigma, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a Rayleigh distribution.\n*\n* @module @stdlib/random/iter/rayleigh\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/rayleigh' );\n*\n* var iter = iterator( 1.5 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rt = require( './../../../base/t' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a Student's t distribution.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} first argument must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( v, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositive( v ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', v ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rt( v, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rt( v );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( v, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a Student's t distribution.\n*\n* @module @stdlib/random/iter/t\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/t' );\n*\n* var iter = iterator( 1.5 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rtriangular = require( './../../../base/triangular' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a triangular distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} c - mode\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {RangeError} arguments must satisfy `a <= c <= b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0, 5.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( a, b, c, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', a ) );\n\t}\n\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number and not NaN. Value: `%s`.', b ) );\n\t}\n\tif ( !isNumber( c ) || isnan( c ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a number and not NaN. Value: `%s`.', c ) );\n\t}\n\tif ( !(a <= c && c <= b) ) {\n\t\tthrow new RangeError( format( 'invalid arguments. Parameters must satisfy the following condition: %s. a: `%f`. b: `%f`. c: `%f`.', 'a <= c <= b', a, b, c ) );\n\t}\n\tif ( arguments.length > 3 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rtriangular( a, b, c, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rtriangular( a, b, c );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( a, b, c, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a triangular distribution.\n*\n* @module @stdlib/random/iter/triangular\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/triangular' );\n*\n* var iter = iterator( 2.0, 5.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar runif = require( './../../../base/uniform' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a continuous uniform distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {RangeError} `a` must be less than `b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( a, b, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', a ) );\n\t}\n\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number and not NaN. Value: `%s`.', b ) );\n\t}\n\tif ( a >= b ) {\n\t\tthrow new RangeError( format( 'invalid argument. Minimum support must be less than maximum support. Value: `[%f, %f]`.', a, b ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = runif( a, b, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = runif( a, b );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( a, b, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a continuous uniform distribution.\n*\n* @module @stdlib/random/iter/uniform\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/uniform' );\n*\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar assign = require( '@stdlib/object/assign' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar MAX_VALUE = require( '@stdlib/constants/float64/max' );\nvar rweibull = require( './../../../base/weibull' ).factory;\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a Weibull distribution.\n*\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda  - shape parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( k, lambda, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isPositiveNumber( k ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', k ) );\n\t}\n\tif ( !isPositiveNumber( lambda ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', lambda ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rweibull( k, lambda, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rweibull( k, lambda );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( k, lambda, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator for generating pseudorandom numbers drawn from a Weibull distribution.\n*\n* @module @stdlib/random/iter/weibull\n*\n* @example\n* var iterator = require( '@stdlib/random/iter/weibull' );\n*\n* var iter = iterator( 2.0, 5.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name arcsine\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/arcsine}\n*/\nsetReadOnly( ns, 'arcsine', require( './../../iter/arcsine' ) );\n\n/**\n* @name bernoulli\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/bernoulli}\n*/\nsetReadOnly( ns, 'bernoulli', require( './../../iter/bernoulli' ) );\n\n/**\n* @name beta\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/beta}\n*/\nsetReadOnly( ns, 'beta', require( './../../iter/beta' ) );\n\n/**\n* @name betaprime\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/betaprime}\n*/\nsetReadOnly( ns, 'betaprime', require( './../../iter/betaprime' ) );\n\n/**\n* @name binomial\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/binomial}\n*/\nsetReadOnly( ns, 'binomial', require( './../../iter/binomial' ) );\n\n/**\n* @name boxMuller\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/box-muller}\n*/\nsetReadOnly( ns, 'boxMuller', require( './../../iter/box-muller' ) );\n\n/**\n* @name cauchy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/cauchy}\n*/\nsetReadOnly( ns, 'cauchy', require( './../../iter/cauchy' ) );\n\n/**\n* @name chi\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/chi}\n*/\nsetReadOnly( ns, 'chi', require( './../../iter/chi' ) );\n\n/**\n* @name chisquare\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/chisquare}\n*/\nsetReadOnly( ns, 'chisquare', require( './../../iter/chisquare' ) );\n\n/**\n* @name cosine\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/cosine}\n*/\nsetReadOnly( ns, 'cosine', require( './../../iter/cosine' ) );\n\n/**\n* @name discreteUniform\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/discrete-uniform}\n*/\nsetReadOnly( ns, 'discreteUniform', require( './../../iter/discrete-uniform' ) );\n\n/**\n* @name erlang\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/erlang}\n*/\nsetReadOnly( ns, 'erlang', require( './../../iter/erlang' ) );\n\n/**\n* @name exponential\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/exponential}\n*/\nsetReadOnly( ns, 'exponential', require( './../../iter/exponential' ) );\n\n/**\n* @name f\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/f}\n*/\nsetReadOnly( ns, 'f', require( './../../iter/f' ) );\n\n/**\n* @name frechet\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/frechet}\n*/\nsetReadOnly( ns, 'frechet', require( './../../iter/frechet' ) );\n\n/**\n* @name gamma\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/gamma}\n*/\nsetReadOnly( ns, 'gamma', require( './../../iter/gamma' ) );\n\n/**\n* @name geometric\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/geometric}\n*/\nsetReadOnly( ns, 'geometric', require( './../../iter/geometric' ) );\n\n/**\n* @name gumbel\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/gumbel}\n*/\nsetReadOnly( ns, 'gumbel', require( './../../iter/gumbel' ) );\n\n/**\n* @name hypergeometric\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/hypergeometric}\n*/\nsetReadOnly( ns, 'hypergeometric', require( './../../iter/hypergeometric' ) );\n\n/**\n* @name improvedZiggurat\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/improved-ziggurat}\n*/\nsetReadOnly( ns, 'improvedZiggurat', require( './../../iter/improved-ziggurat' ) );\n\n/**\n* @name invgamma\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/invgamma}\n*/\nsetReadOnly( ns, 'invgamma', require( './../../iter/invgamma' ) );\n\n/**\n* @name kumaraswamy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/kumaraswamy}\n*/\nsetReadOnly( ns, 'kumaraswamy', require( './../../iter/kumaraswamy' ) );\n\n/**\n* @name laplace\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/laplace}\n*/\nsetReadOnly( ns, 'laplace', require( './../../iter/laplace' ) );\n\n/**\n* @name levy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/levy}\n*/\nsetReadOnly( ns, 'levy', require( './../../iter/levy' ) );\n\n/**\n* @name logistic\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/logistic}\n*/\nsetReadOnly( ns, 'logistic', require( './../../iter/logistic' ) );\n\n/**\n* @name lognormal\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/lognormal}\n*/\nsetReadOnly( ns, 'lognormal', require( './../../iter/lognormal' ) );\n\n/**\n* @name minstd\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/minstd}\n*/\nsetReadOnly( ns, 'minstd', require( './../../iter/minstd' ) );\n\n/**\n* @name minstdShuffle\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/minstd-shuffle}\n*/\nsetReadOnly( ns, 'minstdShuffle', require( './../../iter/minstd-shuffle' ) );\n\n/**\n* @name mt19937\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/mt19937}\n*/\nsetReadOnly( ns, 'mt19937', require( './../../iter/mt19937' ) );\n\n/**\n* @name negativeBinomial\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/negative-binomial}\n*/\nsetReadOnly( ns, 'negativeBinomial', require( './../../iter/negative-binomial' ) );\n\n/**\n* @name normal\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/normal}\n*/\nsetReadOnly( ns, 'normal', require( './../../iter/normal' ) );\n\n/**\n* @name pareto1\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/pareto-type1}\n*/\nsetReadOnly( ns, 'pareto1', require( './../../iter/pareto-type1' ) );\n\n/**\n* @name poisson\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/poisson}\n*/\nsetReadOnly( ns, 'poisson', require( './../../iter/poisson' ) );\n\n/**\n* @name randi\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/randi}\n*/\nsetReadOnly( ns, 'randi', require( './../../iter/randi' ) );\n\n/**\n* @name randn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/randn}\n*/\nsetReadOnly( ns, 'randn', require( './../../iter/randn' ) );\n\n/**\n* @name randu\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/randu}\n*/\nsetReadOnly( ns, 'randu', require( './../../iter/randu' ) );\n\n/**\n* @name rayleigh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/rayleigh}\n*/\nsetReadOnly( ns, 'rayleigh', require( './../../iter/rayleigh' ) );\n\n/**\n* @name t\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/t}\n*/\nsetReadOnly( ns, 't', require( './../../iter/t' ) );\n\n/**\n* @name triangular\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/triangular}\n*/\nsetReadOnly( ns, 'triangular', require( './../../iter/triangular' ) );\n\n/**\n* @name uniform\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/uniform}\n*/\nsetReadOnly( ns, 'uniform', require( './../../iter/uniform' ) );\n\n/**\n* @name weibull\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/iter/weibull}\n*/\nsetReadOnly( ns, 'weibull', require( './../../iter/weibull' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Samples from a discrete uniform distribution (equal probabilities and with replacement).\n*\n* @private\n* @param {ArrayLike} x - array-like object from which to sample\n* @param {NonNegativeInteger} size - sample size\n* @param {Function} rand - PRNG for generating uniformly distributed numbers\n* @returns {Array} sample\n*/\nfunction discreteUniform( x, size, rand ) {\n\tvar pos;\n\tvar out;\n\tvar N;\n\tvar i;\n\n\tN = x.length;\n\tout = new Array( size );\n\tfor ( i = 0; i < size; i++ ) {\n\t\tpos = floor( N * rand() );\n\t\tout[ i ] = x[ pos ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = discreteUniform;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Samples without replacement from a discrete set using custom probabilities.\n*\n* ## Notes\n*\n* -   After each draw, the probabilities of the remaining observations are renormalized so that they sum to one.\n*\n* @private\n* @param {ArrayLike} x - array-like object from which to sample\n* @param {NonNegativeInteger} size - sample size\n* @param {Function} rand - PRNG for generating uniformly distributed numbers\n* @param {ProbabilityArray} probabilities - element probabilities\n* @returns {Array} sample\n*/\nfunction renormalizing( x, size, rand, probabilities ) {\n\tvar probs;\n\tvar psum;\n\tvar out;\n\tvar N;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar u;\n\n\tN = x.length;\n\tprobs = new Array( N );\n\tfor ( i = 0; i < N; i++ ) {\n\t\tprobs[ i ] = probabilities[ i ];\n\t}\n\tout = new Array( size );\n\tfor ( i = 0; i < size; i++ ) {\n\t\tu = rand();\n\t\tpsum = 0;\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tpsum += probs[ j ];\n\t\t\tif ( u < psum ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tif ( k === j ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprobs[ k ] /= 1.0 - probs[ j ];\n\t\t}\n\t\tprobs[ j ] = 0.0;\n\t\tout[ i ] = x[ j ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = renormalizing;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// FUNCTIONS //\n\nvar slice = Array.prototype.slice;\n\n\n// MAIN //\n\n/**\n* Samples uniformly without replacement using the Fisher-Yates shuffle.\n*\n* ## References\n*\n* -   Knuth, Donald E. 1997. _The Art of Computer Programming, Volume 2 (3rd Ed.): Seminumerical Algorithms_. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.\n*\n* @private\n* @param {ArrayLike} x - array-like object from which to sample\n* @param {NonNegativeInteger} size - sample size\n* @param {Function} rand - PRNG for generating uniformly distributed numbers\n* @returns {Array} sample\n*/\nfunction fisherYates( x, size, rand ) {\n\tvar tmp;\n\tvar N;\n\tvar i;\n\tvar j;\n\n\tN = x.length;\n\n\t// Note: we skip the first element, as no further swaps are possible given that all other indices are excluded from swapping...\n\tfor ( i = N-1; i > 0; i-- ) {\n\t\t// Generate an integer index on the interval: [0,i]\n\t\tj = floor( rand()*(i+1) );\n\n\t\t// Swap elements:\n\t\ttmp = x[ i ];\n\t\tx[ i ] = x[ j ];\n\t\tx[ j ] = tmp;\n\t}\n\treturn slice.call( x, 0, size );\n}\n\n\n// EXPORTS //\n\nmodule.exports = fisherYates;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Samples with replacement and non-uniform probabilities using Vose's [alias method][alias-method].\n*\n* ## References\n*\n* -   Vose, Michael D. 1991. \"A linear algorithm for generating random numbers with a given distribution.\" _IEEE Transactions on Software Engineering_ 17 (9): 972\u201375. doi:[10.1109/32.92917][@vose:1991].\n*\n* [alias-method]: http://keithschwarz.com/darts-dice-coins/\n* [@vose:1991]: https://doi.org/10.1109/32.92917\n*\n* @private\n* @param {ArrayLike} x - array-like object from which to sample\n* @param {NonNegativeInteger} size - sample size\n* @param {Function} rand - PRNG for generating uniformly distributed numbers\n* @param {ProbabilityArray} probabilities - element probabilities\n* @returns {Array} sample\n*/\nfunction vose( x, size, rand, probabilities ) {\n\tvar small;\n\tvar large;\n\tvar probs;\n\tvar alias;\n\tvar out;\n\tvar N;\n\tvar p;\n\tvar g;\n\tvar i;\n\tvar l;\n\n\tprobs = probabilities.slice();\n\tN = x.length;\n\n\tsmall = [];\n\tlarge = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tprobs[ i ] *= N;\n\t\tif ( probs[ i ] < 1.0 ) {\n\t\t\tsmall.push( i );\n\t\t} else {\n\t\t\tlarge.push( i );\n\t\t}\n\t}\n\talias = new Array( N );\n\tp = new Array( N );\n\twhile ( small.length !== 0 && large.length !== 0 ) {\n\t\tl = small.shift();\n\t\tg = large.shift();\n\t\tp[ l ] = probs[ l ];\n\t\talias[ l ] = g;\n\t\tprobs[ g ] = probs[ g ] + probs[ l ] - 1.0;\n\t\tif ( probs[ g ] < 1.0 ) {\n\t\t\tsmall.push( g );\n\t\t} else {\n\t\t\tlarge.push( g );\n\t\t}\n\t}\n\tfor ( i = 0; i < large.length; i++ ) {\n\t\tp[ large[ i ] ] = 1.0;\n\t}\n\tfor ( i = 0; i < small.length; i++ ) {\n\t\tp[ small[ i ] ] = 1.0;\n\t}\n\tout = new Array( size );\n\tfor ( i = 0; i < size; i++ ) {\n\t\tl = floor( N*rand() );\n\t\tif ( rand() < p[ l ] ) {\n\t\t\tout[ i ] = x[ l ];\n\t\t} else {\n\t\t\tout[ i ] = x[ alias[ l ] ];\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = vose;\n", "{\n\t\"mutate\": false,\n\t\"replace\": true\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );\nvar isUnityProbabilityArray = require( '@stdlib/assert/is-unity-probability-array' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.size] - sample size\n* @param {ProbabilityArray} [options.probs] - element probabilities\n* @param {boolean} [options.replace] - boolean indicating whether to sample with replacement\n* @param {boolean} [options.mutate] - boolean indicating whether to mutate the `pool` when sampling without replacement\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'size': 10,\n*     'replace': false,\n*     'mutate': true,\n*     'probs': [ 0.7, 0.3 ]\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'size' ) ) {\n\t\topts.size = options.size;\n\t\tif ( !isNonNegativeInteger( opts.size ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'size', opts.size ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'probs' ) ) {\n\t\topts.probs = options.probs;\n\t\tif ( !isUnityProbabilityArray( opts.probs ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of probabilities that sum to one. Option: `%s`.', 'probs', opts.probs ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mutate' ) ) {\n\t\topts.mutate = options.mutate;\n\t\tif ( !isBoolean( opts.mutate ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'mutate', opts.mutate ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'replace' ) ) {\n\t\topts.replace = options.replace;\n\t\tif ( !isBoolean( opts.replace ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'replace', opts.replace ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isArrayLike = require( '@stdlib/assert/is-array-like' );\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar randu = require( './../../base/mt19937' ).factory;\nvar copy = require( '@stdlib/utils/copy' );\nvar discreteUniform = require( './discrete_uniform.js' );\nvar renormalizing = require( './renormalizing.js' );\nvar fisherYates = require( './fisher_yates.js' );\nvar vose = require( './vose.js' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// FUNCTIONS //\n\nvar slice = Array.prototype.slice;\n\n\n// MAIN //\n\n/**\n* Returns a function to sample elements from an array-like object.\n*\n* @param {(ArrayLike|TypedArrayLike)} [pool] - array-like object from which to sample\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.seed] - integer-valued seed\n* @param {NonNegativeInteger} [options.size] - sample size\n* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement\n* @param {boolean} [options.mutate=false] - boolean indicating whether to mutate the `pool` when sampling without replacement\n* @throws {TypeError} `pool` must be an array-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} function to sample elements from an array-like object\n*\n* @example\n* var sample = factory({\n*     'seed': 232\n* });\n* var out = sample( 'abcdefg' );\n* // e.g., returns [ 'g', 'd', 'g', 'f', 'c', 'e', 'f' ]\n*\n* @example\n* var sample = factory( [ 1, 2, 3, 4, 5, 6 ], {\n*     'seed': 232,\n*     'size': 2\n* });\n* var out = sample();\n* // e.g., returns [ 6, 4 ]\n*\n* out = sample();\n* // e.g., returns [ 6, 5 ]\n*\n* @example\n* var sample = factory( [ 1, 2, 3, 4, 5, 6 ], {\n*     'seed': 474,\n*     'size': 3,\n*     'mutate': true,\n*     'replace': false\n* });\n* var out = sample();\n* // e.g., returns [ 4, 3, 6 ]\n*\n* out = sample();\n* // e.g., returns [ 1, 5, 2 ]\n*\n* out = sample();\n* // returns null\n*\n* @example\n* var sample = factory( [ 0, 1 ], {\n*     'size': 2\n* });\n*\n* var out = sample();\n* // e.g., returns [ 1, 1 ]\n*\n* out = sample({\n*     'size': 10\n* });\n* // e.g., returns [ 0, 1, 1, 1, 0, 1, 0, 0, 1, 1 ]\n*\n* @example\n* var sample = factory( [ 0, 1 ], {\n*     'size': 2\n* });\n*\n* var out = sample();\n* // e.g., returns [ 1, 1 ]\n*\n* out = sample({\n*     'replace': false\n* });\n* // e.g., returns [ 0, 1 ] or [ 1, 0 ]\n*\n* out = sample();\n* // e.g., returns [ 1, 1 ]\n*\n* @example\n* var sample = factory( [ 0, 1 ], {\n*     'size': 2,\n*     'mutate': true\n* });\n*\n* var out = sample();\n* // e.g., returns [ 1, 1 ]\n*\n* out = sample({\n*     'replace': false\n* });\n* // e.g., returns [ 0, 1 ] or [ 1, 0 ]\n*\n* out = sample();\n* // returns null\n*/\nfunction factory() {\n\tvar config;\n\tvar pool;\n\tvar conf;\n\tvar rand;\n\tvar err;\n\tvar fcn;\n\n\tconf = copy( defaults );\n\tif ( arguments.length === 1 ) {\n\t\tif ( isArrayLike( arguments[ 0 ] ) || isTypedArrayLike( arguments[ 0 ] ) ) { // eslint-disable-line max-len\n\t\t\tpool = arguments[ 0 ];\n\t\t} else {\n\t\t\tconfig = arguments[ 0 ];\n\t\t\terr = validate( conf, config );\n\t\t}\n\t} else if ( arguments.length > 1 ) {\n\t\tpool = arguments[ 0 ];\n\t\tconfig = arguments[ 1 ];\n\t\tif ( !( isArrayLike( pool ) || isTypedArrayLike( pool ) ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. `%s` argument must be array-like. Value: `%s`.', 'pool', pool ) );\n\t\t}\n\t\terr = validate( conf, config );\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( config && config.seed ) {\n\t\trand = randu({\n\t\t\t'seed': config.seed\n\t\t});\n\t} else {\n\t\trand = randu();\n\t}\n\tif ( pool === void 0 ) {\n\t\tfcn = sample1;\n\t} else {\n\t\tif ( isString( pool ) ) {\n\t\t\tpool = pool.split( '' );\n\t\t} else {\n\t\t\tpool = copy( pool );\n\t\t}\n\t\tfcn = sample2;\n\t}\n\tsetReadOnly( fcn, 'seed', rand.seed );\n\tsetReadOnly( fcn, 'PRNG', rand );\n\n\trand = rand.normalized;\n\n\treturn fcn;\n\n\t/**\n\t* Samples elements from an array-like object.\n\t*\n\t* @private\n\t* @param {(ArrayLike|TypedArrayLike)} x - array-like object from which to sample elements\n\t* @param {Options} [options] - function options\n\t* @param {NonNegativeInteger} [options.size] - sample size\n\t* @param {ProbabilityArray} [options.probs] - element probabilities\n\t* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement\n\t* @throws {TypeError} first argument must be array-like\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {RangeError} `size` option must be less than or equal to the length of `x` when the `replace` option is `false`\n\t* @returns {Array} sample\n\t*/\n\tfunction sample1( x, options ) {\n\t\tvar replace;\n\t\tvar xcopy;\n\t\tvar probs;\n\t\tvar opts;\n\t\tvar size;\n\t\tvar err;\n\n\t\tif ( !( isArrayLike( x ) || isTypedArrayLike( x ) ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be array-like. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( isString( x ) ) {\n\t\t\tx = x.split( '' );\n\t\t}\n\t\topts = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( opts, options );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tif ( opts.replace === void 0 ) {\n\t\t\treplace = conf.replace;\n\t\t} else {\n\t\t\treplace = opts.replace;\n\t\t}\n\t\tif ( opts.probs !== void 0 ) {\n\t\t\tprobs = opts.probs;\n\t\t}\n\t\tif ( opts.size ) {\n\t\t\tsize = opts.size;\n\t\t} else if ( conf.size ) {\n\t\t\tsize = conf.size;\n\t\t} else {\n\t\t\tsize = x.length;\n\t\t}\n\t\tif (\n\t\t\treplace === false &&\n\t\t\tsize > x.length\n\t\t) {\n\t\t\tthrow new RangeError( format( 'invalid option. `size` option must be less than or equal to the length of `x` when `replace` is `false`. Option: `%s`.', size ) );\n\t\t}\n\t\t// Custom probabilities...\n\t\tif ( probs ) {\n\t\t\tif ( replace ) {\n\t\t\t\treturn vose( x, size, rand, probs );\n\t\t\t}\n\t\t\treturn renormalizing( x, size, rand, probs );\n\t\t}\n\t\t// All elements equally likely...\n\t\tif ( replace ) {\n\t\t\treturn discreteUniform( x, size, rand );\n\t\t}\n\t\txcopy = slice.call( x );\n\t\treturn fisherYates( xcopy, size, rand );\n\t}\n\n\t/**\n\t* Samples elements from a population.\n\t*\n\t* @private\n\t* @param {Options} [options] - function options\n\t* @param {NonNegativeInteger} [options.size] - sample size\n\t* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement\n\t* @param {boolean} [options.mutate=false] - boolean indicating whether to mutate the `pool` when sampling without replacement\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {RangeError} `size` option must be less than or equal to the population when the `replace` option is `false`\n\t* @returns {Array} sample\n\t*/\n\tfunction sample2( options ) {\n\t\tvar replace;\n\t\tvar mutate;\n\t\tvar opts;\n\t\tvar size;\n\t\tvar err;\n\t\tvar out;\n\n\t\tif ( pool.length === 0 ) {\n\t\t\treturn null;\n\t\t}\n\t\topts = {};\n\t\tif ( arguments.length ) {\n\t\t\terr = validate( opts, options );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tif ( opts.mutate === void 0 ) {\n\t\t\tmutate = conf.mutate;\n\t\t} else {\n\t\t\tmutate = opts.mutate;\n\t\t}\n\t\tif ( opts.replace === void 0 ) {\n\t\t\treplace = conf.replace;\n\t\t} else {\n\t\t\treplace = opts.replace;\n\t\t}\n\t\tif ( opts.size ) {\n\t\t\tsize = opts.size;\n\t\t} else if ( conf.size ) {\n\t\t\tsize = conf.size;\n\t\t} else {\n\t\t\tsize = pool.length;\n\t\t}\n\t\tif (\n\t\t\treplace === false &&\n\t\t\tsize > pool.length\n\t\t) {\n\t\t\tthrow new RangeError( format( 'invalid option. `size` option must be less than or equal to the population size when `replace` is `false`. Option: `%s`.', size ) );\n\t\t}\n\t\tif ( replace ) {\n\t\t\treturn discreteUniform( pool, size, rand );\n\t\t}\n\t\tout = fisherYates( pool, size, rand );\n\t\tif ( mutate ) {\n\t\t\t// Remove the sample observations:\n\t\t\tpool = pool.slice( size, pool.length );\n\t\t}\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Samples elements from an array-like object.\n*\n* @name sample\n* @type {Function}\n* @param {ArrayLike} x - array-like object from which to sample\n* @param {Options} [options] - function options\n* @param {NonNegativeInteger} [options.size] - sample size\n* @param {ProbabilityArray} [options.probs] - element probabilities\n* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement\n* @throws {TypeError} first argument must be array-like\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} `size` option must be less than or equal to the length of `x` when the `replace` option is `false`\n* @returns {Array} sample\n*\n* @example\n* var out = sample( [ 3, null, NaN, 'abc', function(){} ] );\n* // e.g., returns [ 3, 'abc', null, 3, null ]\n*/\nvar sample = factory();\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sample elements from an array-like object.\n*\n* @module @stdlib/random/sample\n*\n* @example\n* var sample = require( '@stdlib/random/sample' );\n*\n* var out = sample( 'abc' );\n* // e.g., returns [ 'a', 'a', 'b' ]\n*\n* out = sample( [ 3, 6, 9 ] );\n* // e.g., returns [ 3, 9, 6 ]\n*\n* var bool = ( out.length === 3 );\n* // returns true\n*\n* @example\n* var sample = require( '@stdlib/random/sample' );\n*\n* var mysample = sample.factory({\n*     'seed': 323\n* });\n* var out = mysample( [ 3, 6, 9 ], {\n*     'size': 10\n* });\n* // e.g., returns [ 3, 9, 3, 3, 3, 6, 3, 3, 3, 6 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"copy\": \"shallow\"\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar indexOf = require( '@stdlib/utils/index-of' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar COPY_OPTIONS = [ 'deep', 'shallow', 'none' ];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {string} [options.copy] - string denoting whether to return a copy (`deep`, `shallow` or `none`)\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'copy': 'shallow'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t\tif ( !isString( opts.copy ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'copy', opts.copy ) );\n\t\t}\n\t\tif ( indexOf( COPY_OPTIONS, opts.copy ) === -1 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'copy', COPY_OPTIONS.join( '\", \"' ), opts.copy ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isArrayLike = require( '@stdlib/assert/is-array-like' );\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar deepCopy = require( '@stdlib/utils/copy' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar randu = require( './../../base/mt19937' ).factory;\nvar format = require( '@stdlib/string/format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function to create a random permutation of elements from an array-like object.\n*\n* @param {Options} [config] - function options\n* @param {PositiveInteger} [config.seed] - integer-valued seed\n* @param {string} [config.copy=\"shallow\"] - default copy option (`deep`, `shallow` or `none`)\n* @throws {TypeError} options argument must be an object\n* @returns {Function} shuffle function\n*\n* @example\n* var shuffle = factory({\n*     'seed': 249\n* });\n* var data = [ 3, 8, 4, 8 ];\n* var out = shuffle( data );\n* // e.g., returns [ 4, 3, 8, 8 ]\n*/\nfunction factory( config ) {\n\tvar conf;\n\tvar rand;\n\tvar err;\n\n\tconf = deepCopy( defaults );\n\tif ( arguments.length ) {\n\t\terr = validate( conf, config );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( config && config.seed ) {\n\t\trand = randu({\n\t\t\t'seed': config.seed\n\t\t});\n\t} else {\n\t\trand = randu();\n\t}\n\tsetReadOnly( shuffle, 'seed', rand.seed );\n\tsetReadOnly( shuffle, 'PRNG', rand );\n\n\trand = rand.normalized;\n\n\treturn shuffle;\n\n\t/**\n\t* Returns a random permutation of elements in `arr`.\n\t*\n\t* @private\n\t* @param {(ArrayLike|TypedArrayLike)} arr - array-like object to shuffle\n\t* @param {Options} [options] - function options\n\t* @param {string} [options.copy] - string indicating whether to return a copy (`deep`,`shallow` or `none`)\n\t* @throws {TypeError} first argument must be array-like\n\t* @throws {TypeError} options must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ArrayLike} the shuffled array-like object\n\t*\n\t* @example\n\t* var data = [ 1, 2, 3 ];\n\t* var out = shuffle( data );\n\t* // e.g., returns [ 3, 1, 2 ]\n\t*\n\t* @example\n\t* var data = [ 1, 2, 3 ];\n\t* var out = shuffle( data, {\n\t*     'copy': 'none'\n\t* });\n\t* var bool = ( data === out );\n\t* // returns true\n\t*/\n\tfunction shuffle( arr, options ) {\n\t\tvar strflg;\n\t\tvar level;\n\t\tvar copy;\n\t\tvar opts;\n\t\tvar err;\n\t\tvar out;\n\t\tvar tmp;\n\t\tvar N;\n\t\tvar i;\n\t\tvar j;\n\n\t\tif ( !( isArrayLike( arr ) || isTypedArrayLike( arr ) ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be array-like. Value: `%s`.', arr ) );\n\t\t}\n\t\tif ( arguments.length > 1 ) {\n\t\t\topts = {};\n\t\t\terr = validate( opts, options );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tcopy = ( opts && opts.copy ) ? opts.copy : conf.copy;\n\n\t\tstrflg = isString( arr );\n\t\tif ( strflg ) {\n\t\t\tarr = arr.split( '' );\n\t\t\tcopy = 'none';\n\t\t}\n\n\t\tlevel = 0;\n\t\tif ( copy === 'shallow' ) {\n\t\t\tlevel += 1;\n\t\t} else if ( copy === 'deep' ) {\n\t\t\tlevel += 2;\n\t\t}\n\t\tN = arr.length;\n\t\tout = deepCopy( arr, level );\n\n\t\t// Note: we skip the first element, as no further swaps are possible given that all other indices are excluded from swapping...\n\t\tfor ( i = N - 1; i > 0; i-- ) {\n\t\t\t// Generate an integer index on the interval [0,i]:\n\t\t\tj = floor( rand() * (i+1.0) );\n\n\t\t\t// Swap elements:\n\t\t\ttmp = out[ i ];\n\t\t\tout[ i ] = out[ j ];\n\t\t\tout[ j ] = tmp;\n\t\t}\n\n\t\tif ( strflg ) {\n\t\t\tout = arr.join( '' );\n\t\t}\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a random permutation of elements in `arr`.\n*\n* @name shuffle\n* @type {Function}\n* @param {ArrayLike} arr - array-like object to shuffle\n* @param {Options} [options] - function options\n* @param {string} [options.copy=\"shallow\"] - string indicating whether to return a copy (`deep`,`shallow` or `none`)\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ArrayLike} the shuffled array-like object\n*\n* @example\n* var data = [ 1, 2, 3 ];\n* var out = shuffle( data );\n* // e.g., returns [ 3, 1, 2 ]\n*\n* @example\n* var data = [ 1, 2, 3 ];\n* var out = shuffle( data, {\n*     'copy': 'none'\n* });\n* var bool = ( data === out );\n* // returns true\n*/\nvar shuffle = factory();\n\n\n// EXPORTS //\n\nmodule.exports = shuffle;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a random permutation of elements from an array-like object.\n*\n* @module @stdlib/random/shuffle\n*\n* @example\n* var shuffle = require( '@stdlib/random/shuffle' );\n*\n* var data = [ 1, 2, 3 ];\n* var out = shuffle( data );\n* // e.g., returns [ 3, 1, 2 ]\n*\n* out = shuffle( data, {\n*     'copy': 'none'\n* });\n*\n* var bool = ( data === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:arcsine' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rarcsine = require( './../../../base/arcsine' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from an arcsine distribution.\n*\n* @constructor\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {RangeError} `a` must be less than `b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( a, b, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( a, b, options );\n\t\t}\n\t\treturn new RandomStream( a, b );\n\t}\n\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', a ) );\n\t}\n\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number and not NaN. Value: `%s`.', b ) );\n\t}\n\tif ( a >= b ) {\n\t\tthrow new RangeError( format( 'invalid argument. Minimum support must be less than maximum support. Value: `[%f, %f]`.', a, b ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rarcsine( a, b, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar assign = require( '@stdlib/object/assign' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from an arcsine distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {RangeError} `a` must be less than `b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( a, b, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( a, b, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from an arcsine distribution.\n*\n* @param {number} [a] - minimum support\n* @param {number} [b] - maximum support\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( a, b, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( a ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', a ) );\n\t\t}\n\t\topts = assign( {}, a );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from an arcsine distribution.\n\t*\n\t* @private\n\t* @param {number} a - minimum support\n\t* @param {number} b - maximum support\n\t* @throws {TypeError} `a` must be a number\n\t* @throws {TypeError} `b` must be a number\n\t* @throws {RangeError} `a` must be less than `b`\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( a, b ) {\n\t\treturn new RandomStream( a, b, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from an arcsine distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `a` must be a number\n\t* @throws {TypeError} `b` must be a number\n\t* @throws {RangeError} `a` must be less than `b`\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( a, b, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from an arcsine distribution.\n*\n* @module @stdlib/random/streams/arcsine\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/arcsine' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/arcsine' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/arcsine' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:bernoulli' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rbern = require( './../../../base/bernoulli' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a Bernoulli distribution.\n*\n* @constructor\n* @param {Probability} p - success probability\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `p` must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 0.5, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( p, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new RandomStream( p, options );\n\t\t}\n\t\treturn new RandomStream( p );\n\t}\n\tif ( !isProbability( p ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a probability. Value: `%s`.', p ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rbern( p, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar assign = require( '@stdlib/object/assign' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a Bernoulli distribution.\n*\n* @param {Probability} p - success probability\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `p` must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 0.7, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( p, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( p, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar assign = require( '@stdlib/object/assign' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a Bernoulli distribution.\n*\n* @param {Probability} [p] - success probability\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 0.3 ) );\n* }\n*/\nfunction factory( p, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tfcn = createStream2;\n\t\topts = assign( {}, options );\n\t} else if ( nargs === 1 ) {\n\t\tif ( isProbability( p ) ) {\n\t\t\tfcn = createStream2;\n\t\t\topts = {};\n\t\t} else {\n\t\t\tif ( !isPlainObject( p ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', p ) );\n\t\t\t}\n\t\t\topts = assign( {}, p );\n\t\t\tfcn = createStream1;\n\t\t}\n\t} else {\n\t\topts = {};\n\t\tfcn = createStream1;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Bernoulli distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - success probability\n\t* @throws {TypeError} `p` must be a probability\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( p ) {\n\t\treturn new RandomStream( p, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Bernoulli distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `p` must be a probability\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( p, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a Bernoulli distribution.\n*\n* @module @stdlib/random/streams/bernoulli\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/bernoulli' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 0.2, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/bernoulli' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 0.2 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/bernoulli' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 0.2, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:beta' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rbeta = require( './../../../base/beta' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a beta distribution.\n*\n* @constructor\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( alpha, beta, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( alpha, beta, options );\n\t\t}\n\t\treturn new RandomStream( alpha, beta );\n\t}\n\tif ( !isPositiveNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositiveNumber( beta ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rbeta( alpha, beta, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar assign = require( '@stdlib/object/assign' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a beta distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( alpha, beta, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( alpha, beta, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a beta distribution.\n*\n* @param {PositiveNumber} [alpha] - first shape parameter\n* @param {PositiveNumber} [beta] - second shape parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( alpha, beta, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', alpha ) );\n\t\t}\n\t\topts = assign( {}, alpha );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a beta distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - first shape parameter\n\t* @param {PositiveNumber} beta - second shape parameter\n\t* @throws {TypeError} `alpha` must be a positive number\n\t* @throws {TypeError} `beta` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( alpha, beta ) {\n\t\treturn new RandomStream( alpha, beta, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a beta distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `alpha` must be a positive number\n\t* @throws {TypeError} `beta` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( alpha, beta, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a beta distribution.\n*\n* @module @stdlib/random/streams/beta\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/beta' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/beta' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/beta' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:betaprime' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rbetaprime = require( './../../../base/betaprime' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a beta prime distribution.\n*\n* @constructor\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( alpha, beta, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( alpha, beta, options );\n\t\t}\n\t\treturn new RandomStream( alpha, beta );\n\t}\n\tif ( !isPositiveNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositiveNumber( beta ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rbetaprime( alpha, beta, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar assign = require( '@stdlib/object/assign' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a beta prime distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( alpha, beta, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( alpha, beta, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a beta prime distribution.\n*\n* @param {PositiveNumber} [alpha] - first shape parameter\n* @param {PositiveNumber} [beta] - second shape parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( alpha, beta, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', alpha ) );\n\t\t}\n\t\topts = assign( {}, alpha );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a beta prime distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - first shape parameter\n\t* @param {PositiveNumber} beta - second shape parameter\n\t* @throws {TypeError} `alpha` must be a positive number\n\t* @throws {TypeError} `beta` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( alpha, beta ) {\n\t\treturn new RandomStream( alpha, beta, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a beta prime distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `alpha` must be a positive number\n\t* @throws {TypeError} `beta` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( alpha, beta, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a beta prime distribution.\n*\n* @module @stdlib/random/streams/betaprime\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/betaprime' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/betaprime' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/betaprime' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:binomial' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rbinom = require( './../../../base/binomial' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a binomial distribution.\n*\n* @constructor\n* @param {PositiveInteger} n - number of trials\n* @param {Probability} p - success probability\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `n` must be a positive integer\n* @throws {TypeError} `p` must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 20, 0.2, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( n, p, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( n, p, options );\n\t\t}\n\t\treturn new RandomStream( n, p );\n\t}\n\tif ( !isPositiveInteger( n ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', n ) );\n\t}\n\tif ( !isProbability( p ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a probability. Value: `%s`.', p ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rbinom( n, p, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a binomial distribution.\n*\n* @param {PositiveInteger} n - number of trials\n* @param {Probability} p - success probability\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `n` must be a positive integer\n* @throws {TypeError} `p` must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 20, 0.1, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( n, p, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isPlainObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( n, p, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a binomial distribution.\n*\n* @param {PositiveInteger} [n] - number of trials\n* @param {Probability} [p] - second shape parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 20, 0.5 ) );\n* }\n*/\nfunction factory( n, p, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( n ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', n ) );\n\t\t}\n\t\topts = assign( {}, n );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a binomial distribution.\n\t*\n\t* @private\n\t* @param {PositiveInteger} n - number of trials\n\t* @param {Probability} p - success probability\n\t* @throws {TypeError} `n` must be a positive integer\n\t* @throws {TypeError} `p` must be a positive probability\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( n, p ) {\n\t\treturn new RandomStream( n, p, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a binomial distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `n` must be a positive integer\n\t* @throws {TypeError} `p` must be a probability\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( n, p, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a binomial distribution.\n*\n* @module @stdlib/random/streams/binomial\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/binomial' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 20, 0.4, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/binomial' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 20, 0.4 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/binomial' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 20, 0.4, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:box-muller' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar randn = require( './../../../base/box-muller' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a standard normal distribution using the Box-Muller transform.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 0 ) {\n\t\t\treturn new RandomStream( options );\n\t\t}\n\t\treturn new RandomStream();\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 0 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', randn( opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a standard normal distribution using the Box-Muller transform.\n*\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a standard normal distribution using the Box-Muller transform.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a standard normal distribution using the Box-Muller transform.\n\t*\n\t* @private\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream() {\n\t\treturn new RandomStream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a standard normal distribution using the Box-Muller transform.\n*\n* @module @stdlib/random/streams/box-muller\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/box-muller' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/box-muller' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/box-muller' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:cauchy' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rcauchy = require( './../../../base/cauchy' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a Cauchy distribution.\n*\n* @constructor\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `x0` must be a number\n* @throws {TypeError} `gamma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( x0, gamma, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( x0, gamma, options );\n\t\t}\n\t\treturn new RandomStream( x0, gamma );\n\t}\n\tif ( !isNumber( x0 ) || isnan( x0 ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', x0 ) );\n\t}\n\tif ( !isPositiveNumber( gamma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', gamma ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rcauchy( x0, gamma, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a Cauchy distribution.\n*\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `gamma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( x0, gamma, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( x0, gamma, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a Cauchy distribution.\n*\n* @param {number} [x0] - location parameter\n* @param {PositiveNumber} [gamma] - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( x0, gamma, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( x0 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', x0 ) );\n\t\t}\n\t\topts = assign( {}, x0 );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Cauchy distribution.\n\t*\n\t* @private\n\t* @param {number} x0 - location parameter\n\t* @param {PositiveNumber} gamma - scale parameter\n\t* @throws {TypeError} `gamma` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( x0, gamma ) {\n\t\treturn new RandomStream( x0, gamma, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Cauchy distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `gamma` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( x0, gamma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a Cauchy distribution.\n*\n* @module @stdlib/random/streams/cauchy\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/cauchy' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/cauchy' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/cauchy' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:chi' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rchi = require( './../../../base/chi' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a chi distribution.\n*\n* @constructor\n* @param {PositiveNumber} k - degrees of freedom\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( k, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new RandomStream( k, options );\n\t\t}\n\t\treturn new RandomStream( k );\n\t}\n\tif ( !isPositiveNumber( k ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', k ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rchi( k, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a chi distribution.\n*\n* @param {PositiveNumber} k - degrees of freedom\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( k, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( k, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a chi distribution.\n*\n* @param {PositiveNumber} [k] - degrees of freedom\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 3.0 ) );\n* }\n*/\nfunction factory( k, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tfcn = createStream2;\n\t\topts = assign( {}, options );\n\t} else if ( nargs === 1 ) {\n\t\tif ( isPositive( k ) ) {\n\t\t\tfcn = createStream2;\n\t\t\topts = {};\n\t\t} else {\n\t\t\tif ( !isPlainObject( k ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', k ) );\n\t\t\t}\n\t\t\topts = assign( {}, k );\n\t\t\tfcn = createStream1;\n\t\t}\n\t} else {\n\t\topts = {};\n\t\tfcn = createStream1;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a chi distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} k - degrees of freedom\n\t* @throws {TypeError} `k` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( k ) {\n\t\treturn new RandomStream( k, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a chi distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `k` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( k, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a chi distribution.\n*\n* @module @stdlib/random/streams/chi\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/chi' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/chi' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/chi' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:chisquare' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rchisquare = require( './../../../base/chisquare' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a chi-square distribution.\n*\n* @constructor\n* @param {PositiveNumber} k - degrees of freedom\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( k, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new RandomStream( k, options );\n\t\t}\n\t\treturn new RandomStream( k );\n\t}\n\tif ( !isPositiveNumber( k ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', k ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rchisquare( k, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a chi-square distribution.\n*\n* @param {PositiveNumber} k - degrees of freedom\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( k, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, opts );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( k, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a chi-square distribution.\n*\n* @param {PositiveNumber} [k] - degrees of freedom\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 3.0 ) );\n* }\n*/\nfunction factory( k, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tfcn = createStream2;\n\t\topts = assign( {}, options);\n\t} else if ( nargs === 1 ) {\n\t\tif ( isPositive( k ) ) {\n\t\t\tfcn = createStream2;\n\t\t\topts = {};\n\t\t} else {\n\t\t\tif ( !isPlainObject( k ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', k ) );\n\t\t\t}\n\t\t\topts = assign( {}, k );\n\t\t\tfcn = createStream1;\n\t\t}\n\t} else {\n\t\topts = {};\n\t\tfcn = createStream1;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a chi-square distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} k - degrees of freedom\n\t* @throws {TypeError} `k` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( k ) {\n\t\treturn new RandomStream( k, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a chi-square distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `k` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( k, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a chi-square distribution.\n*\n* @module @stdlib/random/streams/chisquare\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/chisquare' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/chisquare' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/chisquare' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:cosine' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rcosine = require( './../../../base/cosine' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a raised cosine distribution.\n*\n* @constructor\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( mu, s, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( mu, s, options );\n\t\t}\n\t\treturn new RandomStream( mu, s );\n\t}\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositiveNumber( s ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', s ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rcosine( mu, s, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a raised cosine distribution.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( mu, s, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( mu, s, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a raised cosine distribution.\n*\n* @param {number} [mu] - location parameter\n* @param {PositiveNumber} [s] - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( mu, s, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', mu ) );\n\t\t}\n\t\topts = assign( {}, mu );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a raised cosine distribution.\n\t*\n\t* @private\n\t* @param {number} mu - location parameter\n\t* @param {PositiveNumber} s - scale parameter\n\t* @throws {TypeError} `s` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( mu, s ) {\n\t\treturn new RandomStream( mu, s, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a raised cosine distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `s` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( mu, s, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a raised cosine distribution.\n*\n* @module @stdlib/random/streams/cosine\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/cosine' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/cosine' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/cosine' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:discrete-uniform' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rduniform = require( './../../../base/discrete-uniform' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a discrete uniform distribution.\n*\n* @constructor\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `a` must be an integer\n* @throws {TypeError} `b` must be an integer\n* @throws {RangeError} `a` must be less than or equal to `b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2, 5, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( a, b, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( a, b, options );\n\t\t}\n\t\treturn new RandomStream( a, b );\n\t}\n\tif ( !isInteger( a ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', a ) );\n\t}\n\tif ( !isInteger( b ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', b ) );\n\t}\n\tif ( a > b ) {\n\t\tthrow new RangeError( format( 'invalid argument. Minimum support must be less than or equal to maximum support. Value: `[%d, %d]`.', a, b ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rduniform( a, b, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a discrete uniform distribution.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `a` must be an integer\n* @throws {TypeError} `b` must be an integer\n* @throws {RangeError} `a` must be less than or equal to `b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2, 5, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( a, b, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( a, b, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a discrete uniform distribution.\n*\n* @param {integer} [a] - minimum support\n* @param {integer} [b] - maximum support\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2, 5 ) );\n* }\n*/\nfunction factory( a, b, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( a ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', a ) );\n\t\t}\n\t\topts = assign( {}, a );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a discrete uniform distribution.\n\t*\n\t* @private\n\t* @param {integer} a - minimum support\n\t* @param {integer} b - maximum support\n\t* @throws {TypeError} `a` must be an integer\n\t* @throws {TypeError} `b` must be an integer\n\t* @throws {RangeError} `a` must be less than or equal to `b`\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( a, b ) {\n\t\treturn new RandomStream( a, b, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a discrete uniform distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `a` must be an integer\n\t* @throws {TypeError} `b` must be an integer\n\t* @throws {RangeError} `a` must be less than or equal to `b`\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( a, b, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a discrete uniform distribution.\n*\n* @module @stdlib/random/streams/discrete-uniform\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/discrete-uniform' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2, 5, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/discrete-uniform' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2, 5 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/discrete-uniform' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2, 5, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:erlang' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rerlang = require( './../../../base/erlang' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from an Erlang distribution.\n*\n* @constructor\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `k` must be a positive integer\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( k, lambda, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( k, lambda, options );\n\t\t}\n\t\treturn new RandomStream( k, lambda );\n\t}\n\tif ( !isPositiveInteger( k ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', k ) );\n\t}\n\tif ( !isPositiveNumber( lambda ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', lambda ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rerlang( k, lambda, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from an Erlang distribution.\n*\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `k` must be a positive integer\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( k, lambda, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( k, lambda, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from an Erlang distribution.\n*\n* @param {PositiveInteger} [k] - shape parameter\n* @param {PositiveNumber} [lambda] - rate parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2, 5.0 ) );\n* }\n*/\nfunction factory( k, lambda, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( k ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', k ) );\n\t\t}\n\t\topts = assign( {}, k );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from an Erlang distribution.\n\t*\n\t* @private\n\t* @param {PositiveInteger} k - shape parameter\n\t* @param {PositiveNumber} lambda - rate parameter\n\t* @throws {TypeError} `k` must be a positive integer\n\t* @throws {TypeError} `lambda` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( k, lambda ) {\n\t\treturn new RandomStream( k, lambda, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from an Erlang distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `k` must be a positive integer\n\t* @throws {TypeError} `lambda` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( k, lambda, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from an Erlang distribution.\n*\n* @module @stdlib/random/streams/erlang\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/erlang' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/erlang' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/erlang' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:exponential' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rexponential = require( './../../../base/exponential' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from an exponential distribution.\n*\n* @constructor\n* @param {PositiveNumber} lambda - rate parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( lambda, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new RandomStream( lambda, options );\n\t\t}\n\t\treturn new RandomStream( lambda );\n\t}\n\tif ( !isPositiveNumber( lambda ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', lambda ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rexponential( lambda, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from an exponential distribution.\n*\n* @param {PositiveNumber} lambda - rate parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( lambda, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( lambda, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from an exponential distribution.\n*\n* @param {PositiveNumber} [lambda] - rate parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 3.0 ) );\n* }\n*/\nfunction factory( lambda, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tfcn = createStream2;\n\t\topts = assign( {}, options );\n\t} else if ( nargs === 1 ) {\n\t\tif ( isPositive( lambda ) ) {\n\t\t\tfcn = createStream2;\n\t\t\topts = {};\n\t\t} else {\n\t\t\tif ( !isPlainObject( lambda ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', lambda ) );\n\t\t\t}\n\t\t\topts = assign( {}, lambda );\n\t\t\tfcn = createStream1;\n\t\t}\n\t} else {\n\t\topts = {};\n\t\tfcn = createStream1;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from an exponential distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} lambda - rate parameter\n\t* @throws {TypeError} `lambda` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( lambda ) {\n\t\treturn new RandomStream( lambda, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from an exponential distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `lambda` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( lambda, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from an exponential distribution.\n*\n* @module @stdlib/random/streams/exponential\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/exponential' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/exponential' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/exponential' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:f' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rf = require( './../../../base/f' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from an F distribution.\n*\n* @constructor\n* @param {PositiveNumber} d1 - degrees of freedom\n* @param {PositiveNumber} d2 - degrees of freedom\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `d1` must be a positive number\n* @throws {TypeError} `d2` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( d1, d2, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( d1, d2, options );\n\t\t}\n\t\treturn new RandomStream( d1, d2 );\n\t}\n\tif ( !isPositiveNumber( d1 ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', d1 ) );\n\t}\n\tif ( !isPositiveNumber( d2 ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', d2 ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rf( d1, d2, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from an F distribution.\n*\n* @param {PositiveNumber} d1 - degrees of freedom\n* @param {PositiveNumber} d2 - degrees of freedom\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `d1` must be a positive number\n* @throws {TypeError} `d2` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( d1, d2, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( d1, d2, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from an F distribution.\n*\n* @param {PositiveNumber} [d1] - degrees of freedom\n* @param {PositiveNumber} [d2] - degrees of freedom\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( d1, d2, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( d1 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', d1 ) );\n\t\t}\n\t\topts = assign( {}, d1 );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from an F distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} d1 - degrees of freedom\n\t* @param {PositiveNumber} d2 - degrees of freedom\n\t* @throws {TypeError} `d1` must be a positive number\n\t* @throws {TypeError} `d2` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( d1, d2 ) {\n\t\treturn new RandomStream( d1, d2, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from an F distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `d1` must be a positive number\n\t* @throws {TypeError} `d2` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( d1, d2, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from an F distribution.\n*\n* @module @stdlib/random/streams/f\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/f' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/f' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/f' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:frechet' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rfrechet = require( './../../../base/frechet' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a Fr\u00E9chet distribution.\n*\n* @constructor\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [s] - scale parameter\n* @param {number} [m] - location parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} `m` must be a number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, 1.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( alpha, s, m, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 3 ) {\n\t\t\treturn new RandomStream( alpha, s, m, options );\n\t\t}\n\t\treturn new RandomStream( alpha, s, m );\n\t}\n\tif ( !isPositiveNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number and not NaN. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositiveNumber( s ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number and not NaN. Value: `%s`.', s ) );\n\t}\n\tif ( !isNumber( m ) || isnan( m ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a number. Value: `%s`.', m ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rfrechet( alpha, s, m, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a Fr\u00E9chet distribution.\n*\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [s] - scale parameter\n* @param {number} [m] - location parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} `m` must be a number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 5.0, -1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( alpha, s, m, options ) {\n\tvar opts;\n\tif ( arguments.length > 3 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( alpha, s, m, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a Fr\u00E9chet distribution.\n*\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [s] - scale parameter\n* @param {number} [m] - location parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0, 0.0 ) );\n* }\n*/\nfunction factory( alpha, s, m, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', alpha ) );\n\t\t}\n\t\topts = assign( {}, alpha );\n\t} else if ( nargs > 3 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 3 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Fr\u00E9chet distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - shape parameter\n\t* @param {PositiveNumber} s - scale parameter\n\t* @param {number} m - location parameter\n\t* @throws {TypeError} `alpha` must be a positive number\n\t* @throws {TypeError} `s` must be a positive number\n\t* @throws {TypeError} `m` must be a number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( alpha, s, m ) {\n\t\treturn new RandomStream( alpha, s, m, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Fr\u00E9chet distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `alpha` must be a positive number\n\t* @throws {TypeError} `s` must be a positive number\n\t* @throws {TypeError} `m` must be a number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( alpha, s, m, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a Fr\u00E9chet distribution.\n*\n* @module @stdlib/random/streams/frechet\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/frechet' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 5.0, 3.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/frechet' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0, -2.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/frechet' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 5.0, 0.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:gamma' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rgamma = require( './../../../base/gamma' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a gamma distribution.\n*\n* @constructor\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( alpha, beta, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( alpha, beta, options );\n\t\t}\n\t\treturn new RandomStream( alpha, beta );\n\t}\n\tif ( !isPositiveNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositiveNumber( beta ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rgamma( alpha, beta, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( alpha, beta, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( alpha, beta, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a gamma distribution.\n*\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [beta] - rate parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( alpha, beta, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', alpha ) );\n\t\t}\n\t\topts = assign( {}, alpha );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a gamma distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - shape parameter\n\t* @param {PositiveNumber} beta - rate parameter\n\t* @throws {TypeError} `alpha` must be a positive number\n\t* @throws {TypeError} `beta` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( alpha, beta ) {\n\t\treturn new RandomStream( alpha, beta, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a gamma distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `alpha` must be a positive number\n\t* @throws {TypeError} `beta` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( alpha, beta, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a gamma distribution.\n*\n* @module @stdlib/random/streams/gamma\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/gamma' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/gamma' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/gamma' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:geometric' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rgeom = require( './../../../base/geometric' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a geometric distribution.\n*\n* @constructor\n* @param {Probability} p - success probability\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `p` must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 0.5, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( p, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new RandomStream( p, options );\n\t\t}\n\t\treturn new RandomStream( p );\n\t}\n\tif ( !isProbability( p ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a probability. Value: `%s`.', p ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rgeom( p, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a geometric distribution.\n*\n* @param {Probability} p - success probability\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `p` must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 0.7, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( p, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( p, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a geometric distribution.\n*\n* @param {Probability} [p] - success probability\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 0.3 ) );\n* }\n*/\nfunction factory( p, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tfcn = createStream2;\n\t\topts = assign( {}, options );\n\t} else if ( nargs === 1 ) {\n\t\tif ( isProbability( p ) ) {\n\t\t\tfcn = createStream2;\n\t\t\topts = {};\n\t\t} else {\n\t\t\tif ( !isPlainObject( p ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', p ) );\n\t\t\t}\n\t\t\topts = assign( {}, p );\n\t\t\tfcn = createStream1;\n\t\t}\n\t} else {\n\t\topts = {};\n\t\tfcn = createStream1;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a geometric distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - success probability\n\t* @throws {TypeError} `p` must be a probability\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( p ) {\n\t\treturn new RandomStream( p, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a geometric distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `p` must be a probability\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( p, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a geometric distribution.\n*\n* @module @stdlib/random/streams/geometric\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/geometric' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 0.2, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/geometric' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 0.2 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/geometric' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 0.2, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:gumbel' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rgumbel = require( './../../../base/gumbel' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a Gumbel distribution.\n*\n* @constructor\n* @param {number} mu - mean\n* @param {PositiveNumber} beta - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( mu, beta, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( mu, beta, options );\n\t\t}\n\t\treturn new RandomStream( mu, beta );\n\t}\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositiveNumber( beta ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rgumbel( mu, beta, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a Gumbel distribution.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} beta - scale parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( mu, beta, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( mu, beta, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a Gumbel distribution.\n*\n* @param {number} [mu] - mean\n* @param {PositiveNumber} [beta] - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( mu, beta, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', mu ) );\n\t\t}\n\t\topts = assign( {}, mu );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Gumbel distribution.\n\t*\n\t* @private\n\t* @param {number} mu - mean\n\t* @param {PositiveNumber} beta - scale parameter\n\t* @throws {TypeError} `mu` must be a number\n\t* @throws {TypeError} `beta` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( mu, beta ) {\n\t\treturn new RandomStream( mu, beta, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Gumbel distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `mu` must be a number\n\t* @throws {TypeError} `beta` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( mu, beta, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a Gumbel distribution.\n*\n* @module @stdlib/random/streams/gumbel\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/gumbel' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/gumbel' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/gumbel' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:hypergeometric' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rhypergeom = require( './../../../base/hypergeometric' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a hypergeometric distribution.\n*\n* @constructor\n* @param {NonNegativeInteger} [N] - population size\n* @param {NonNegativeInteger} [K] - subpopulation size\n* @param {NonNegativeInteger} [n] - number of draws\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `N` must be a nonnegative integer\n* @throws {TypeError} `K` must be a nonnegative integer\n* @throws {TypeError} `n` must be a nonnegative integer\n* @throws {RangeError} `n` must be less than or equal to `N`\n* @throws {RangeError} `K` must be less than or equal to `N`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 20, 10, 7, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( N, K, n, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 3 ) {\n\t\t\treturn new RandomStream( N, K, n, options );\n\t\t}\n\t\treturn new RandomStream( N, K, n );\n\t}\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', N ) );\n\t}\n\tif ( !isNonNegativeInteger( K ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', K ) );\n\t}\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%s`.', n ) );\n\t}\n\tif ( n > N ) {\n\t\tthrow new RangeError( 'invalid argument. Third argument must be less than or equal to the first argument.' );\n\t}\n\tif ( K > N ) {\n\t\tthrow new RangeError( 'invalid argument. Second argument must be less than or equal to the first argument.' );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rhypergeom( N, K, n, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a hypergeometric distribution.\n*\n* @param {NonNegativeInteger} [N] - population size\n* @param {NonNegativeInteger} [K] - subpopulation size\n* @param {NonNegativeInteger} [n] - number of draws\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `N` must be a nonnegative integer\n* @throws {TypeError} `K` must be a nonnegative integer\n* @throws {TypeError} `n` must be a nonnegative integer\n* @throws {RangeError} `n` must be less than or equal to `N`\n* @throws {RangeError} `K` must be less than or equal to `N`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 20, 10, 7, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( N, K, n, options ) {\n\tvar opts;\n\tif ( arguments.length > 3 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( N, K, n, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a hypergeometric distribution.\n*\n* @param {NonNegativeInteger} [N] - population size\n* @param {NonNegativeInteger} [K] - subpopulation size\n* @param {NonNegativeInteger} [n] - number of draws\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 5, 3, 2 ) );\n* }\n*/\nfunction factory( N, K, n, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( N ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', N ) );\n\t\t}\n\t\topts = assign( {}, N );\n\t} else if ( nargs > 3 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 3 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a hypergeometric distribution.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} N - population size\n\t* @param {NonNegativeInteger} K - subpopulation size\n\t* @param {NonNegativeInteger} n - number of draws\n\t* @throws {TypeError} `N` must be a nonnegative integer\n\t* @throws {TypeError} `K` must be a nonnegative integer\n\t* @throws {TypeError} `n` must be a nonnegative integer\n\t* @throws {RangeError} `n` must be less than or equal to `N`\n\t* @throws {RangeError} `K` must be less than or equal to `N`\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( N, K, n ) {\n\t\treturn new RandomStream( N, K, n, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a hypergeometric distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `N` must be a nonnegative integer\n\t* @throws {TypeError} `K` must be a nonnegative integer\n\t* @throws {TypeError} `n` must be a nonnegative integer\n\t* @throws {RangeError} `n` must be less than or equal to `N`\n\t* @throws {RangeError} `K` must be less than or equal to `N`\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( N, K, n, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a hypergeometric distribution.\n*\n* @module @stdlib/random/streams/hypergeometric\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/hypergeometric' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 5, 3, 2, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/hypergeometric' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 5, 3, 2 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/hypergeometric' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 5, 3, 2, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:improved-ziggurat' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar randn = require( './../../../base/improved-ziggurat' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a standard normal distribution using the Improved Ziggurat algorithm.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 0 ) {\n\t\t\treturn new RandomStream( options );\n\t\t}\n\t\treturn new RandomStream();\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 0 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', randn( opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a standard normal distribution using the Improved Ziggurat algorithm.\n*\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a standard normal distribution using the Improved Ziggurat algorithm.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a standard normal distribution using the Improved Ziggurat algorithm.\n\t*\n\t* @private\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream() {\n\t\treturn new RandomStream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a standard normal distribution using the Improved Ziggurat algorithm.\n*\n* @module @stdlib/random/streams/improved-ziggurat\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/improved-ziggurat' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/improved-ziggurat' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/improved-ziggurat' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:invgamma' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rinvgamma = require( './../../../base/invgamma' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from an inverse gamma distribution.\n*\n* @constructor\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( alpha, beta, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( alpha, beta, options );\n\t\t}\n\t\treturn new RandomStream( alpha, beta );\n\t}\n\tif ( !isPositiveNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositiveNumber( beta ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rinvgamma( alpha, beta, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from an inverse gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( alpha, beta, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( alpha, beta, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from an inverse gamma distribution.\n*\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [beta] - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( alpha, beta, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', alpha ) );\n\t\t}\n\t\topts = assign( {}, alpha );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from an inverse gamma distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - shape parameter\n\t* @param {PositiveNumber} beta - scale parameter\n\t* @throws {TypeError} `alpha` must be a positive number\n\t* @throws {TypeError} `beta` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( alpha, beta ) {\n\t\treturn new RandomStream( alpha, beta, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from an inverse gamma distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `alpha` must be a positive number\n\t* @throws {TypeError} `beta` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( alpha, beta, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from an inverse gamma distribution.\n*\n* @module @stdlib/random/streams/invgamma\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/invgamma' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/invgamma' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/invgamma' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:kumaraswamy' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rkumaraswamy = require( './../../../base/kumaraswamy' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a Kumaraswamy's double bounded distribution.\n*\n* @constructor\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `a` must be a positive number\n* @throws {TypeError} `b` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( a, b, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( a, b, options );\n\t\t}\n\t\treturn new RandomStream( a, b );\n\t}\n\tif ( !isPositiveNumber( a ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', a ) );\n\t}\n\tif ( !isPositiveNumber( b ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', b ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rkumaraswamy( a, b, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a Kumaraswamy's double bounded distribution.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `a` must be a positive number\n* @throws {TypeError} `b` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( a, b, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( a, b, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a Kumaraswamy's double bounded distribution.\n*\n* @param {PositiveNumber} [a] - first shape parameter\n* @param {PositiveNumber} [b] - second shape parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( a, b, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( a ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', a ) );\n\t\t}\n\t\topts = assign( {}, a );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Kumaraswamy's double bounded distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} a - first shape parameter\n\t* @param {PositiveNumber} b - second shape parameter\n\t* @throws {TypeError} `a` must be a positive number\n\t* @throws {TypeError} `b` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( a, b ) {\n\t\treturn new RandomStream( a, b, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Kumaraswamy's double bounded distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `a` must be a positive number\n\t* @throws {TypeError} `b` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( a, b, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a Kumaraswamy's double bounded distribution.\n*\n* @module @stdlib/random/streams/kumaraswamy\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/kumaraswamy' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/kumaraswamy' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/kumaraswamy' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:laplace' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rlaplace = require( './../../../base/laplace' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar format = require( '@stdlib/string/format' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a Laplace (double exponential) distribution.\n*\n* @constructor\n* @param {number} mu - mean\n* @param {PositiveNumber} b - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `b` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( mu, b, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( mu, b, options );\n\t\t}\n\t\treturn new RandomStream( mu, b );\n\t}\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositiveNumber( b ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', b ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rlaplace( mu, b, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a Laplace (double exponential) distribution.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} b - scale parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `b` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( mu, b, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( mu, b, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a Laplace (double exponential) distribution.\n*\n* @param {number} [mu] - mean\n* @param {PositiveNumber} [b] - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( mu, b, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', mu ) );\n\t\t}\n\t\topts = assign( {}, mu );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Laplace (double exponential) distribution.\n\t*\n\t* @private\n\t* @param {number} mu - mean\n\t* @param {PositiveNumber} b - scale parameter\n\t* @throws {TypeError} `mu` must be a number\n\t* @throws {TypeError} `b` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( mu, b ) {\n\t\treturn new RandomStream( mu, b, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Laplace (double exponential) distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `mu` must be a number\n\t* @throws {TypeError} `b` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( mu, b, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a Laplace (double exponential) distribution.\n*\n* @module @stdlib/random/streams/laplace\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/laplace' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/laplace' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/laplace' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:levy' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rlevy = require( './../../../base/levy' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a L\u00E9vy distribution.\n*\n* @constructor\n* @param {number} mu - mean\n* @param {PositiveNumber} c - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `c` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( mu, c, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( mu, c, options );\n\t\t}\n\t\treturn new RandomStream( mu, c );\n\t}\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositiveNumber( c ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', c ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rlevy( mu, c, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a L\u00E9vy distribution.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} c - scale parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `c` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( mu, c, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( mu, c, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a L\u00E9vy distribution.\n*\n* @param {number} [mu] - mean\n* @param {PositiveNumber} [c] - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( mu, c, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', mu ) );\n\t\t}\n\t\topts = assign( {}, mu );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a L\u00E9vy distribution.\n\t*\n\t* @private\n\t* @param {number} mu - mean\n\t* @param {PositiveNumber} c - scale parameter\n\t* @throws {TypeError} `mu` must be a number\n\t* @throws {TypeError} `c` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( mu, c ) {\n\t\treturn new RandomStream( mu, c, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a L\u00E9vy distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `mu` must be a number\n\t* @throws {TypeError} `c` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( mu, c, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a L\u00E9vy distribution.\n*\n* @module @stdlib/random/streams/levy\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/levy' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/levy' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/levy' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:logistic' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rlogistic = require( './../../../base/logistic' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a logistic distribution.\n*\n* @constructor\n* @param {number} mu - mean\n* @param {PositiveNumber} s - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( mu, s, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( mu, s, options );\n\t\t}\n\t\treturn new RandomStream( mu, s );\n\t}\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositiveNumber( s ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', s ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rlogistic( mu, s, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a logistic distribution.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} s - scale parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `s` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( mu, s, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( mu, s, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a logistic distribution.\n*\n* @param {number} [mu] - mean\n* @param {PositiveNumber} [s] - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( mu, s, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', mu ) );\n\t\t}\n\t\topts = assign( {}, mu );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a logistic distribution.\n\t*\n\t* @private\n\t* @param {number} mu - mean\n\t* @param {PositiveNumber} s - scale parameter\n\t* @throws {TypeError} `mu` must be a number\n\t* @throws {TypeError} `s` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( mu, s ) {\n\t\treturn new RandomStream( mu, s, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a logistic distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `mu` must be a number\n\t* @throws {TypeError} `s` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( mu, s, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a logistic distribution.\n*\n* @module @stdlib/random/streams/logistic\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/logistic' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/logistic' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/logistic' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:lognormal' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rlognormal = require( './../../../base/lognormal' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a lognormal distribution.\n*\n* @constructor\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( mu, sigma, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( mu, sigma, options );\n\t\t}\n\t\treturn new RandomStream( mu, sigma );\n\t}\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rlognormal( mu, sigma, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a lognormal distribution.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( mu, sigma, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( mu, sigma, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a lognormal distribution.\n*\n* @param {number} [mu] - location parameter\n* @param {PositiveNumber} [sigma] - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( mu, sigma, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', mu ) );\n\t\t}\n\t\topts = assign( {}, mu );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a lognormal distribution.\n\t*\n\t* @private\n\t* @param {number} mu - location parameter\n\t* @param {PositiveNumber} sigma - scale parameter\n\t* @throws {TypeError} `mu` must be a number\n\t* @throws {TypeError} `sigma` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( mu, sigma ) {\n\t\treturn new RandomStream( mu, sigma, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a lognormal distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `mu` must be a number\n\t* @throws {TypeError} `sigma` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( mu, sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a lognormal distribution.\n*\n* @module @stdlib/random/streams/lognormal\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/lognormal' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 0.0, 2.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/lognormal' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 0.0, 2.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/lognormal' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 0.0, 2.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308,\n\t\"normalized\": false\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {boolean} [options.normalized] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'normalized' ) ) {\n\t\topts.normalized = options.normalized;\n\t\tif ( !isBoolean( opts.normalized ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'normalized', opts.normalized ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:minstd' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar minstd = require( './../../../base/minstd' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {PRNGSeedMINSTD} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {PositiveInteger} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {PositiveInteger} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {PositiveInteger} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {PRNGStateMINSTD} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMINSTD} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers via a linear congruential pseudorandom number generator (LCG) based on Park and Miller.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( options ) {\n\tvar prng;\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 0 ) {\n\t\t\treturn new RandomStream( options );\n\t\t}\n\t\treturn new RandomStream();\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 0 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tprng = minstd( opts );\n\tif ( opts.normalized ) {\n\t\tprng = prng.normalized;\n\t}\n\tsetNonEnumerableReadOnly( this, '_prng', prng );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {PRNGSeedMINSTD}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {PRNGStateMINSTD}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers via a linear congruential pseudorandom number generator (LCG) based on Park and Miller.\n*\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers via a linear congruential pseudorandom number generator (LCG) based on Park and Miller.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers via a linear congruential pseudorandom number generator (LCG) based on Park and Miller.\n\t*\n\t* @private\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream() {\n\t\treturn new RandomStream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers via a linear congruential pseudorandom number generator (LCG) based on Park and Miller.\n*\n* @module @stdlib/random/streams/minstd\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/minstd' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/minstd' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/minstd' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308,\n\t\"normalized\": false\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {boolean} [options.normalized] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'normalized' ) ) {\n\t\topts.normalized = options.normalized;\n\t\tif ( !isBoolean( opts.normalized ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'normalized', opts.normalized ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:minstd-shuffle' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar minstd = require( './../../../base/minstd-shuffle' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {PRNGSeedMINSTD} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {PositiveInteger} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {PositiveInteger} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {PositiveInteger} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {PRNGStateMINSTD} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMINSTD} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers via a linear congruential pseudorandom number generator (LCG) whose output is shuffled.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( options ) {\n\tvar prng;\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 0 ) {\n\t\t\treturn new RandomStream( options );\n\t\t}\n\t\treturn new RandomStream();\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 0 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tprng = minstd( opts );\n\tif ( opts.normalized ) {\n\t\tprng = prng.normalized;\n\t}\n\tsetNonEnumerableReadOnly( this, '_prng', prng );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {PRNGSeedMINSTD}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {PRNGStateMINSTD}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers via a linear congruential pseudorandom number generator (LCG) whose output is shuffled.\n*\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers via a linear congruential pseudorandom number generator (LCG) whose output is shuffled.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers via a linear congruential pseudorandom number generator (LCG) whose output is shuffled.\n\t*\n\t* @private\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream() {\n\t\treturn new RandomStream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers via a linear congruential pseudorandom number generator (LCG) whose output is shuffled.\n*\n* @module @stdlib/random/streams/minstd-shuffle\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/minstd-shuffle' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/minstd-shuffle' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/minstd-shuffle' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308,\n\t\"normalized\": false\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {boolean} [options.normalized] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'normalized' ) ) {\n\t\topts.normalized = options.normalized;\n\t\tif ( !isBoolean( opts.normalized ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'normalized', opts.normalized ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:mt19937' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar mt19937 = require( './../../../base/mt19937' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {PRNGSeedMT19937} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {PositiveInteger} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {PositiveInteger} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {PositiveInteger} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {PRNGStateMT19937} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers via a 32-bit Mersenne Twister pseudorandom number generator.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( options ) {\n\tvar prng;\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 0 ) {\n\t\t\treturn new RandomStream( options );\n\t\t}\n\t\treturn new RandomStream();\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 0 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tprng = mt19937( opts );\n\tif ( opts.normalized ) {\n\t\tprng = prng.normalized;\n\t}\n\tsetNonEnumerableReadOnly( this, '_prng', prng );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {PRNGSeedMT19937}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {PRNGStateMT19937}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers via a 32-bit Mersenne Twister pseudorandom number generator.\n*\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers via a 32-bit Mersenne Twister pseudorandom number generator.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {boolean} [options.normalized=false] - boolean indicating whether to return pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers via a 32-bit Mersenne Twister pseudorandom number generator.\n\t*\n\t* @private\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream() {\n\t\treturn new RandomStream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers via a 32-bit Mersenne Twister pseudorandom number generator.\n*\n* @module @stdlib/random/streams/mt19937\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/mt19937' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/mt19937' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/mt19937' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:negative-binomial' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rnbinom = require( './../../../base/negative-binomial' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a binomial distribution.\n*\n* @constructor\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `r` must be a positive number\n* @throws {TypeError} `p` must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 20.0, 0.2, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( r, p, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( r, p, options );\n\t\t}\n\t\treturn new RandomStream( r, p );\n\t}\n\tif ( !isPositiveNumber( r ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', r ) );\n\t}\n\tif ( !isProbability( p ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a probability. Value: `%s`.', p ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rnbinom( r, p, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a negative binomial distribution.\n*\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `r` must be a positive number\n* @throws {TypeError} `p` must be a probability\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 20.0, 0.1, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( r, p, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isPlainObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( r, p, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a negative binomial distribution.\n*\n* @param {PositiveNumber} [r] - number of successes until experiment is stopped\n* @param {Probability} [p] - second shape parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 20.0, 0.5 ) );\n* }\n*/\nfunction factory( r, p, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( r ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', r ) );\n\t\t}\n\t\topts = assign( {}, r );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a negative binomial distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} r - number of trials\n\t* @param {Probability} p - success probability\n\t* @throws {TypeError} `r` must be a positive number\n\t* @throws {TypeError} `p` must be a positive probability\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( r, p ) {\n\t\treturn new RandomStream( r, p, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a negative binomial distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `r` must be a positive number\n\t* @throws {TypeError} `p` must be a probability\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( r, p, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a negative binomial distribution.\n*\n* @module @stdlib/random/streams/negative-binomial\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/negative-binomial' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 20.0, 0.4, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/negative-binomial' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 20.0, 0.4 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/negative-binomial' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 20.0, 0.4, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:normal' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rnorm = require( './../../../base/normal' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a normal distribution.\n*\n* @constructor\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( mu, sigma, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( mu, sigma, options );\n\t\t}\n\t\treturn new RandomStream( mu, sigma );\n\t}\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rnorm( mu, sigma, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a normal distribution.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( mu, sigma, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( mu, sigma, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a normal distribution.\n*\n* @param {number} [mu] - mean\n* @param {PositiveNumber} [sigma] - standard deviation\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( mu, sigma, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', mu ) );\n\t\t}\n\t\topts = assign( {}, mu );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a normal distribution.\n\t*\n\t* @private\n\t* @param {number} mu - mean\n\t* @param {PositiveNumber} sigma - standard deviation\n\t* @throws {TypeError} `mu` must be a number\n\t* @throws {TypeError} `sigma` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( mu, sigma ) {\n\t\treturn new RandomStream( mu, sigma, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a normal distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `mu` must be a number\n\t* @throws {TypeError} `sigma` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( mu, sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a normal distribution.\n*\n* @module @stdlib/random/streams/normal\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/normal' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 0.0, 2.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/normal' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 0.0, 2.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/normal' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 0.0, 2.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:pareto1' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rpareto1 = require( './../../../base/pareto-type1' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a Pareto (Type I) distribution.\n*\n* @constructor\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( alpha, beta, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( alpha, beta, options );\n\t\t}\n\t\treturn new RandomStream( alpha, beta );\n\t}\n\tif ( !isPositiveNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', alpha ) );\n\t}\n\tif ( !isPositiveNumber( beta ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', beta ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rpareto1( alpha, beta, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a Pareto (Type I) distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( alpha, beta, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isPlainObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( alpha, beta, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a Pareto (Type I) distribution.\n*\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [beta] - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( alpha, beta, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', alpha ) );\n\t\t}\n\t\topts = assign( {}, alpha );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Pareto (Type I) distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - shape parameter\n\t* @param {PositiveNumber} beta - scale parameter\n\t* @throws {TypeError} `alpha` must be a positive number\n\t* @throws {TypeError} `beta` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( alpha, beta ) {\n\t\treturn new RandomStream( alpha, beta, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Pareto (Type I) distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `alpha` must be a positive number\n\t* @throws {TypeError} `beta` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( alpha, beta, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a Pareto (Type I) distribution.\n*\n* @module @stdlib/random/streams/pareto-type1\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/pareto-type1' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/pareto-type1' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/pareto-type1' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:poisson' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rpoisson = require( './../../../base/poisson' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar format = require( '@stdlib/string/format' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a Poisson distribution.\n*\n* @constructor\n* @param {PositiveNumber} lambda - mean\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( lambda, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new RandomStream( lambda, options );\n\t\t}\n\t\treturn new RandomStream( lambda );\n\t}\n\tif ( !isPositiveNumber( lambda ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', lambda ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rpoisson( lambda, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a Poisson distribution.\n*\n* @param {PositiveNumber} lambda - mean\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( lambda, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( lambda, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a Poisson distribution.\n*\n* @param {PositiveNumber} [lambda] - mean\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 3.0 ) );\n* }\n*/\nfunction factory( lambda, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tfcn = createStream2;\n\t\topts = assign( {}, options );\n\t} else if ( nargs === 1 ) {\n\t\tif ( isPositive( lambda ) ) {\n\t\t\tfcn = createStream2;\n\t\t\topts = {};\n\t\t} else {\n\t\t\tif ( !isPlainObject( lambda ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', lambda ) );\n\t\t\t}\n\t\t\topts = assign( {}, lambda );\n\t\t\tfcn = createStream1;\n\t\t}\n\t} else {\n\t\topts = {};\n\t\tfcn = createStream1;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Poisson distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} lambda - mean\n\t* @throws {TypeError} `lambda` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( lambda ) {\n\t\treturn new RandomStream( lambda, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Poisson distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `lambda` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( lambda, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a Poisson distribution.\n*\n* @module @stdlib/random/streams/poisson\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/poisson' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/poisson' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/poisson' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308,\n\t\"name\": \"mt19937\"\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {string} [options.name] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'name' ) ) {\n\t\topts.name = options.name;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:randi' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar randi = require( './../../../base/randi' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {*} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {PositiveInteger} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {PositiveInteger} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {PositiveInteger} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {*} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {*} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers having integer values.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {string} [options.name='mt19937'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 0 ) {\n\t\t\treturn new RandomStream( options );\n\t\t}\n\t\treturn new RandomStream();\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 0 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', randi( opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {*}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {*}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers having integer values.\n*\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {string} [options.name='mt19937'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers having integer values.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {string} [options.name='mt19937'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers having integer values.\n\t*\n\t* @private\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream() {\n\t\treturn new RandomStream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers having integer values.\n*\n* @module @stdlib/random/streams/randi\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/randi' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/randi' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/randi' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308,\n\t\"name\": \"improved-ziggurat\"\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {string} [options.name] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'name' ) ) {\n\t\topts.name = options.name;\n\t}\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:randn' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar randn = require( './../../../base/randn' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a standard normal distribution.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {string} [options.name='improved-ziggurat'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 0 ) {\n\t\t\treturn new RandomStream( options );\n\t\t}\n\t\treturn new RandomStream();\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 0 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', randn( opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a standard normal distribution.\n*\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {string} [options.name='improved-ziggurat'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a standard normal distribution.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {string} [options.name='improved-ziggurat'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a standard normal distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream() {\n\t\treturn new RandomStream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers from a standard normal distribution.\n*\n* @module @stdlib/random/streams/randn\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/randn' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/randn' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/randn' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308,\n\t\"name\": \"mt19937\"\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {string} [options.name] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'name' ) ) {\n\t\topts.name = options.name;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:randu' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar randu = require( './../../../base/randu' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {*} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {PositiveInteger} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {PositiveInteger} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {PositiveInteger} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {*} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {*} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of uniformly distributed pseudorandom numbers between `0` and `1`.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {string} [options.name='mt19937'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 0 ) {\n\t\t\treturn new RandomStream( options );\n\t\t}\n\t\treturn new RandomStream();\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 0 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', randu( opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {*}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {*}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {PositiveInteger}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating uniformly distributed pseudorandom numbers between `0` and `1`.\n*\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {string} [options.name='mt19937'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate uniformly distributed pseudorandom numbers between `0` and `1`.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {Function} [options.name='mt19937'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns a readable stream for generating uniformly distributed pseudorandom numbers between `0` and `1`.\n\t*\n\t* @private\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream() {\n\t\treturn new RandomStream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating uniformly distributed pseudorandom numbers between `0` and `1`.\n*\n* @module @stdlib/random/streams/randu\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/randu' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/randu' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/randu' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:rayleigh' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rrayleigh = require( './../../../base/rayleigh' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a Rayleigh distribution.\n*\n* @constructor\n* @param {PositiveNumber} sigma - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( sigma, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new RandomStream( sigma, options );\n\t\t}\n\t\treturn new RandomStream( sigma );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rrayleigh( sigma, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a Rayleigh distribution.\n*\n* @param {PositiveNumber} sigma - scale parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( sigma, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( sigma, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a Rayleigh distribution.\n*\n* @param {PositiveNumber} [sigma] - scale parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 3.0 ) );\n* }\n*/\nfunction factory( sigma, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tfcn = createStream2;\n\t\topts = assign( {}, options );\n\t} else if ( nargs === 1 ) {\n\t\tif ( isPositive( sigma ) ) {\n\t\t\tfcn = createStream2;\n\t\t\topts = {};\n\t\t} else {\n\t\t\tif ( !isPlainObject( sigma ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', sigma ) );\n\t\t\t}\n\t\t\topts = assign( {}, sigma );\n\t\t\tfcn = createStream1;\n\t\t}\n\t} else {\n\t\topts = {};\n\t\tfcn = createStream1;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Rayleigh distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} sigma - scale parameter\n\t* @throws {TypeError} `sigma` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( sigma ) {\n\t\treturn new RandomStream( sigma, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Rayleigh distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `sigma` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a Rayleigh distribution.\n*\n* @module @stdlib/random/streams/rayleigh\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/rayleigh' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/rayleigh' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/rayleigh' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:t' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rt = require( './../../../base/t' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a Student's t distribution.\n*\n* @constructor\n* @param {PositiveNumber} v - degrees of freedom\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `v` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( v, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new RandomStream( v, options );\n\t\t}\n\t\treturn new RandomStream( v );\n\t}\n\tif ( !isPositiveNumber( v ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', v ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rt( v, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a Student's t distribution.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `v` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( v, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( v, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a Student's t distribution.\n*\n* @param {PositiveNumber} [v] - degrees of freedom\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 3.0 ) );\n* }\n*/\nfunction factory( v, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tfcn = createStream2;\n\t\topts = assign( {}, options );\n\t} else if ( nargs === 1 ) {\n\t\tif ( isPositive( v ) ) {\n\t\t\tfcn = createStream2;\n\t\t\topts = {};\n\t\t} else {\n\t\t\tif ( !isPlainObject( v ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', v ) );\n\t\t\t}\n\t\t\topts = assign( {}, v );\n\t\t\tfcn = createStream1;\n\t\t}\n\t} else {\n\t\topts = {};\n\t\tfcn = createStream1;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Student's t distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} v - degrees of freedom\n\t* @throws {TypeError} `v` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( v ) {\n\t\treturn new RandomStream( v, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Student's t distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `v` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( v, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a Student's t distribution.\n*\n* @module @stdlib/random/streams/t\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/t' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/t' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/t' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:triangular' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rtriang = require( './../../../base/triangular' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a uniform distribution.\n*\n* @constructor\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} c - mode\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {TypeError} `c` must be a number\n* @throws {RangeError} arguments must satisfy `a <= c <= b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( a, b, c, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 3 ) {\n\t\t\treturn new RandomStream( a, b, c, options );\n\t\t}\n\t\treturn new RandomStream( a, b, c );\n\t}\n\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', a ) );\n\t}\n\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number and not NaN. Value: `%s`.', b ) );\n\t}\n\tif ( !isNumber( c ) || isnan( c ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a number and not NaN. Value: `%s`.', c ) );\n\t}\n\tif ( !(a <= c && c <= b) ) {\n\t\tthrow new RangeError( format( 'invalid arguments. Parameters must satisfy the following condition: %s. a: `%f`. b: `%f`. c: `%f`.', 'a <= c <= b', a, b, c ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rtriang( a, b, c, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a triangular distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} c - mode\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {TypeError} `c` must be a number\n* @throws {RangeError} arguments must satisfy `a <= c <= b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 5.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( a, b, c, options ) {\n\tvar opts;\n\tif ( arguments.length > 3 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( a, b, c, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a triangular distribution.\n*\n* @param {number} [a] - minimum support\n* @param {number} [b] - maximum support\n* @param {number} [c] - mode\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0, 4.0 ) );\n* }\n*/\nfunction factory( a, b, c, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( a ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', a ) );\n\t\t}\n\t\topts = assign( {}, a );\n\t} else if ( nargs > 3 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 3 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a triangular distribution.\n\t*\n\t* @private\n\t* @param {number} a - minimum support\n\t* @param {number} b - maximum support\n\t* @param {number} c - mode\n\t* @throws {TypeError} `a` must be a number\n\t* @throws {TypeError} `b` must be a number\n\t* @throws {TypeError} `c` must be a number\n\t* @throws {RangeError} arguments must satisfy `a <= c <= b`\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( a, b, c ) {\n\t\treturn new RandomStream( a, b, c, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a triangular distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `a` must be a number\n\t* @throws {TypeError} `b` must be a number\n\t* @throws {TypeError} `c` must be a number\n\t* @throws {RangeError} arguments must satisfy `a <= c <= b`\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( a, b, c, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a triangular distribution.\n*\n* @module @stdlib/random/streams/triangular\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/triangular' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 5.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/triangular' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/triangular' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 5.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:uniform' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar runiform = require( './../../../base/uniform' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a uniform distribution.\n*\n* @constructor\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {RangeError} `a` must be less than `b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( a, b, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( a, b, options );\n\t\t}\n\t\treturn new RandomStream( a, b );\n\t}\n\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', a ) );\n\t}\n\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number and not NaN. Value: `%s`.', b ) );\n\t}\n\tif ( a >= b ) {\n\t\tthrow new RangeError( format( 'invalid argument. Minimum support must be less than maximum support. Value: `[%f, %f]`.', a, b ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', runiform( a, b, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a uniform distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {RangeError} `a` must be less than `b`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( a, b, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( a, b, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a uniform distribution.\n*\n* @param {number} [a] - minimum support\n* @param {number} [b] - maximum support\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( a, b, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( a ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', a ) );\n\t\t}\n\t\topts = assign( {}, a );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a uniform distribution.\n\t*\n\t* @private\n\t* @param {number} a - minimum support\n\t* @param {number} b - maximum support\n\t* @throws {TypeError} `a` must be a number\n\t* @throws {TypeError} `b` must be a number\n\t* @throws {RangeError} `a` must be less than `b`\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( a, b ) {\n\t\treturn new RandomStream( a, b, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a uniform distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `a` must be a number\n\t* @throws {TypeError} `b` must be a number\n\t* @throws {RangeError} `a` must be less than `b`\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( a, b, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a uniform distribution.\n*\n* @module @stdlib/random/streams/uniform\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/uniform' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/uniform' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/uniform' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"copy\": true,\n\t\"siter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'siter' ) ) {\n\t\topts.siter = options.siter;\n\t\tif ( !isPositiveInteger( opts.siter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'siter', opts.siter ) );\n\t\t}\n\t}\n\t// Pass through options...\n\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\topts.prng = options.prng;\n\t}\n\tif ( hasOwnProp( options, 'seed' ) ) {\n\t\topts.seed = options.seed;\n\t}\n\tif ( hasOwnProp( options, 'state' ) ) {\n\t\topts.state = options.state;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'random:streams:weibull' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isError = require( '@stdlib/assert/is-error' );\nvar assign = require( '@stdlib/object/assign' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-read-write-accessor' );\nvar rweibull = require( './../../../base/weibull' ).factory;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar format = require( '@stdlib/string/format' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the PRNG seed.\n*\n* @private\n* @returns {(PRNGSeedMT19937|null)} seed\n*/\nfunction getSeed() {\n\treturn this._prng.seed; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG seed length.\n*\n* @private\n* @returns {(PositiveInteger|null)} seed length\n*/\nfunction getSeedLength() {\n\treturn this._prng.seedLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state length.\n*\n* @private\n* @returns {(PositiveInteger|null)} state length\n*/\nfunction getStateLength() {\n\treturn this._prng.stateLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the PRNG state size (in bytes).\n*\n* @private\n* @returns {(PositiveInteger|null)} state size (in bytes)\n*/\nfunction getStateSize() {\n\treturn this._prng.byteLength; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Returns the current PRNG state.\n*\n* @private\n* @returns {(PRNGStateMT19937|null)} current state\n*/\nfunction getState() {\n\treturn this._prng.state; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Sets the PRNG state.\n*\n* @private\n* @param {PRNGStateMT19937} s - generator state\n* @throws {Error} must provide a valid state\n*/\nfunction setState( s ) {\n\tthis._prng.state = s; // eslint-disable-line no-invalid-this\n}\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar r;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished generating pseudorandom numbers.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tr = this._prng();\n\n\t\tdebug( 'Generated a new pseudorandom number. Value: %d. Iter: %d.', r, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tr = r.toString();\n\t\t\tif ( this._i === 1 ) {\n\t\t\t\tr = string2buffer( r );\n\t\t\t} else {\n\t\t\t\tr = string2buffer( this._sep+r );\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( r );\n\t\tif ( this._i%this._siter === 0 ) {\n\t\t\tthis.emit( 'state', this.state );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream of pseudorandom numbers drawn from a Weibull distribution.\n*\n* @constructor\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new RandomStream( 2.0, 5.0, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction RandomStream( k, lambda, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof RandomStream ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new RandomStream( k, lambda, options );\n\t\t}\n\t\treturn new RandomStream( k, lambda );\n\t}\n\tif ( !isPositiveNumber( k ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', k ) );\n\t}\n\tif ( !isPositiveNumber( lambda ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', lambda ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the number of iterations after which to emit the underlying PRNG state:\n\tsetNonEnumerableReadOnly( this, '_siter', opts.siter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Create the underlying PRNG:\n\tsetNonEnumerableReadOnly( this, '_prng', rweibull( k, lambda, opts ) );\n\tsetNonEnumerableReadOnly( this, 'PRNG', this._prng.PRNG );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( RandomStream, Readable );\n\n/**\n* PRNG seed.\n*\n* @name seed\n* @memberof RandomStream.prototype\n* @type {(PRNGSeedMT19937|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seed', getSeed );\n\n/**\n* PRNG seed length.\n*\n* @name seedLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'seedLength', getSeedLength );\n\n/**\n* PRNG state getter/setter.\n*\n* @name state\n* @memberof RandomStream.prototype\n* @type {(PRNGStateMT19937|null)}\n* @throws {Error} must provide a valid state\n*/\nsetReadWriteAccessor( RandomStream.prototype, 'state', getState, setState );\n\n/**\n* PRNG state length.\n*\n* @name stateLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'stateLength', getStateLength );\n\n/**\n* PRNG state size (in bytes).\n*\n* @name byteLength\n* @memberof RandomStream.prototype\n* @type {(PositiveInteger|null)}\n*/\nsetReadOnlyAccessor( RandomStream.prototype, 'byteLength', getStateSize );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof RandomStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {RandomStream} Stream instance\n*/\nsetNonEnumerableReadOnly( RandomStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = RandomStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream for generating pseudorandom numbers drawn from a Weibull distribution.\n*\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {RandomStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 2.0, 1.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( k, lambda, options ) {\n\tvar opts;\n\tif ( arguments.length > 2 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new RandomStream( k, lambda, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar assign = require( '@stdlib/object/assign' );\nvar format = require( '@stdlib/string/format' );\nvar RandomStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which generate pseudorandom numbers drawn from a Weibull distribution.\n*\n* @param {PositiveNumber} [k] - scale parameter\n* @param {PositiveNumber} [lambda] - shape parameter\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before ceasing to generate additional pseudorandom numbers\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {PositiveInteger} [options.siter] - number of iterations after which to emit the PRNG state\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 5.0 ) );\n* }\n*/\nfunction factory( k, lambda, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tif ( !isPlainObject( k ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', k ) );\n\t\t}\n\t\topts = assign( {}, k );\n\t} else if ( nargs > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\tif ( nargs < 2 ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Weibull distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} k - scale parameter\n\t* @param {PositiveNumber} lambda - shape parameter\n\t* @throws {TypeError} `k` must be a positive number\n\t* @throws {TypeError} `lambda` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream1( k, lambda ) {\n\t\treturn new RandomStream( k, lambda, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream for generating pseudorandom numbers drawn from a Weibull distribution.\n\t*\n\t* @private\n\t* @throws {TypeError} `k` must be a positive number\n\t* @throws {TypeError} `lambda` must be a positive number\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {RandomStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new RandomStream( k, lambda, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream for generating pseudorandom numbers drawn from a Weibull distribution.\n*\n* @module @stdlib/random/streams/weibull\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/weibull' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randomStream = require( '@stdlib/random/streams/weibull' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = randomStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( 2.0, 4.0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randomStream = require( '@stdlib/random/streams/weibull' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = randomStream.objectMode( 2.0, 4.0, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name arcsine\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/arcsine}\n*/\nsetReadOnly( ns, 'arcsine', require( './../../streams/arcsine' ) );\n\n/**\n* @name bernoulli\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/bernoulli}\n*/\nsetReadOnly( ns, 'bernoulli', require( './../../streams/bernoulli' ) );\n\n/**\n* @name beta\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/beta}\n*/\nsetReadOnly( ns, 'beta', require( './../../streams/beta' ) );\n\n/**\n* @name betaprime\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/betaprime}\n*/\nsetReadOnly( ns, 'betaprime', require( './../../streams/betaprime' ) );\n\n/**\n* @name binomial\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/binomial}\n*/\nsetReadOnly( ns, 'binomial', require( './../../streams/binomial' ) );\n\n/**\n* @name boxMuller\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/box-muller}\n*/\nsetReadOnly( ns, 'boxMuller', require( './../../streams/box-muller' ) );\n\n/**\n* @name cauchy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/cauchy}\n*/\nsetReadOnly( ns, 'cauchy', require( './../../streams/cauchy' ) );\n\n/**\n* @name chi\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/chi}\n*/\nsetReadOnly( ns, 'chi', require( './../../streams/chi' ) );\n\n/**\n* @name chisquare\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/chisquare}\n*/\nsetReadOnly( ns, 'chisquare', require( './../../streams/chisquare' ) );\n\n/**\n* @name cosine\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/cosine}\n*/\nsetReadOnly( ns, 'cosine', require( './../../streams/cosine' ) );\n\n/**\n* @name discreteUniform\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/discrete-uniform}\n*/\nsetReadOnly( ns, 'discreteUniform', require( './../../streams/discrete-uniform' ) );\n\n/**\n* @name erlang\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/erlang}\n*/\nsetReadOnly( ns, 'erlang', require( './../../streams/erlang' ) );\n\n/**\n* @name exponential\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/exponential}\n*/\nsetReadOnly( ns, 'exponential', require( './../../streams/exponential' ) );\n\n/**\n* @name f\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/f}\n*/\nsetReadOnly( ns, 'f', require( './../../streams/f' ) );\n\n/**\n* @name frechet\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/frechet}\n*/\nsetReadOnly( ns, 'frechet', require( './../../streams/frechet' ) );\n\n/**\n* @name gamma\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/gamma}\n*/\nsetReadOnly( ns, 'gamma', require( './../../streams/gamma' ) );\n\n/**\n* @name geometric\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/geometric}\n*/\nsetReadOnly( ns, 'geometric', require( './../../streams/geometric' ) );\n\n/**\n* @name gumbel\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/gumbel}\n*/\nsetReadOnly( ns, 'gumbel', require( './../../streams/gumbel' ) );\n\n/**\n* @name hypergeometric\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/hypergeometric}\n*/\nsetReadOnly( ns, 'hypergeometric', require( './../../streams/hypergeometric' ) );\n\n/**\n* @name improvedZiggurat\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/improved-ziggurat}\n*/\nsetReadOnly( ns, 'improvedZiggurat', require( './../../streams/improved-ziggurat' ) );\n\n/**\n* @name invgamma\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/invgamma}\n*/\nsetReadOnly( ns, 'invgamma', require( './../../streams/invgamma' ) );\n\n/**\n* @name kumaraswamy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/kumaraswamy}\n*/\nsetReadOnly( ns, 'kumaraswamy', require( './../../streams/kumaraswamy' ) );\n\n/**\n* @name laplace\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/laplace}\n*/\nsetReadOnly( ns, 'laplace', require( './../../streams/laplace' ) );\n\n/**\n* @name levy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/levy}\n*/\nsetReadOnly( ns, 'levy', require( './../../streams/levy' ) );\n\n/**\n* @name logistic\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/logistic}\n*/\nsetReadOnly( ns, 'logistic', require( './../../streams/logistic' ) );\n\n/**\n* @name lognormal\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/lognormal}\n*/\nsetReadOnly( ns, 'lognormal', require( './../../streams/lognormal' ) );\n\n/**\n* @name minstd\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/minstd}\n*/\nsetReadOnly( ns, 'minstd', require( './../../streams/minstd' ) );\n\n/**\n* @name minstdShuffle\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/minstd-shuffle}\n*/\nsetReadOnly( ns, 'minstdShuffle', require( './../../streams/minstd-shuffle' ) );\n\n/**\n* @name mt19937\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/mt19937}\n*/\nsetReadOnly( ns, 'mt19937', require( './../../streams/mt19937' ) );\n\n/**\n* @name negativeBinomial\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/negative-binomial}\n*/\nsetReadOnly( ns, 'negativeBinomial', require( './../../streams/negative-binomial' ) );\n\n/**\n* @name normal\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/normal}\n*/\nsetReadOnly( ns, 'normal', require( './../../streams/normal' ) );\n\n/**\n* @name pareto1\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/pareto-type1}\n*/\nsetReadOnly( ns, 'pareto1', require( './../../streams/pareto-type1' ) );\n\n/**\n* @name poisson\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/poisson}\n*/\nsetReadOnly( ns, 'poisson', require( './../../streams/poisson' ) );\n\n/**\n* @name randi\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/randi}\n*/\nsetReadOnly( ns, 'randi', require( './../../streams/randi' ) );\n\n/**\n* @name randn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/randn}\n*/\nsetReadOnly( ns, 'randn', require( './../../streams/randn' ) );\n\n/**\n* @name randu\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/randu}\n*/\nsetReadOnly( ns, 'randu', require( './../../streams/randu' ) );\n\n/**\n* @name rayleigh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/rayleigh}\n*/\nsetReadOnly( ns, 'rayleigh', require( './../../streams/rayleigh' ) );\n\n/**\n* @name t\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/t}\n*/\nsetReadOnly( ns, 't', require( './../../streams/t' ) );\n\n/**\n* @name triangular\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/triangular}\n*/\nsetReadOnly( ns, 'triangular', require( './../../streams/triangular' ) );\n\n/**\n* @name uniform\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/uniform}\n*/\nsetReadOnly( ns, 'uniform', require( './../../streams/uniform' ) );\n\n/**\n* @name weibull\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/streams/weibull}\n*/\nsetReadOnly( ns, 'weibull', require( './../../streams/weibull' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array/base/assert/is-accessor-array' );\nvar random = require( './../../../base/arcsine' );\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **arity**: number of function parameters.\n*     -   **fcn**: function for generating pseudorandom numbers.\n*\n* @private\n* @param {Collection} x - first parameter\n* @param {integer} sx - `x` stride length\n* @param {NonNegativeInteger} ox - starting `x` index\n* @param {Collection} y - second parameter\n* @param {integer} sy - `y` stride length\n* @param {NonNegativeInteger} oy - starting `y` index\n* @param {boolean} hasOptions - boolean indicating whether to process an options argument\n* @param {(void|Options)} options - function options\n* @returns {Object} function object\n*/\nfunction clbk( x, sx, ox, y, sy, oy, hasOptions, options ) {\n\tvar out;\n\tvar v1;\n\tvar v2;\n\n\tout = {\n\t\t'arity': 0,\n\t\t'fcn': null\n\t};\n\tif ( hasOptions ) {\n\t\tif ( sx === 0 && sy === 0 ) {\n\t\t\tif ( isAccessorArray( x ) ) {\n\t\t\t\tv1 = x.get( ox );\n\t\t\t} else {\n\t\t\t\tv1 = x[ ox ];\n\t\t\t}\n\t\t\tif ( isAccessorArray( y ) ) {\n\t\t\t\tv2 = y.get( oy );\n\t\t\t} else {\n\t\t\t\tv2 = y[ oy ];\n\t\t\t}\n\t\t\tout.fcn = random.factory( v1, v2, options );\n\t\t\treturn out;\n\t\t}\n\t\tout.fcn = random.factory( options );\n\t} else {\n\t\tout.fcn = random;\n\t}\n\tout.arity += 2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = clbk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar binary = require( '@stdlib/strided/base/binary' );\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from an arcsine distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} a - minimum support\n* @param {integer} sa - `a` stride length\n* @param {Collection} b - maximum support\n* @param {integer} sb - `b` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} minimum support must be less than maximum support\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* arcsine( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*/\nfunction arcsine( N, a, sa, b, sb, out, so, options ) {\n\tvar rand = prng( a, sa, 0, b, sb, 0, arguments.length > 7, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ a, b, out ], [ N ], [ sa, sb, so ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = arcsine;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar binary = require( '@stdlib/strided/base/binary' ).ndarray;\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from an arcsine distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} a - minimum support\n* @param {integer} sa - `a` stride length\n* @param {NonNegativeInteger} oa - starting `a` index\n* @param {Collection} b - maximum support\n* @param {integer} sb - `b` stride length\n* @param {NonNegativeInteger} ob - starting `b` index\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} minimum support must be less than maximum support\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* arcsine( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\nfunction arcsine( N, a, sa, oa, b, sb, ob, out, so, oo, options ) { // eslint-disable-line max-params\n\tvar rand = prng( a, sa, oa, b, sb, ob, arguments.length > 10, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ a, b, out ], [ N ], [ sa, sb, so ], [ oa, ob, oo ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = arcsine;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from an arcsine distribution.\n*\n* @module @stdlib/random/strided/arcsine\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var arcsine = require( '@stdlib/random/strided/arcsine' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* arcsine( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var arcsine = require( '@stdlib/random/strided/arcsine' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* arcsine.ndarray( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isMethodIn = require( '@stdlib/assert/is-method-in' );\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar noop = require( '@stdlib/utils/noop' );\nvar unary = require( '@stdlib/strided/base/unary' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns a factory function for filling strided arrays with pseudorandom values drawn from a unary PRNG.\n*\n* @param {Function} prng - unary pseudorandom value generator\n* @param {Function} prng.factory - method which returns a new unary pseudorandom value generator\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} first argument must have a `factory` method\n* @returns {Function} function which returns a function for filling strided arrays\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var exponential = require( '@stdlib/random/base/exponential' );\n*\n* var factory = createFactory( exponential );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* random( out.length, [ 2.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var exponential = require( '@stdlib/random/base/exponential' );\n*\n* var factory = createFactory( exponential );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* random.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 );\n*/\nfunction createFactory( prng ) {\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\tif ( !isMethodIn( prng, 'factory' ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have a `%s` method.', 'factory' ) );\n\t}\n\treturn factory;\n\n\t/**\n\t* Returns a function for filling strided arrays with pseudorandom values drawn from a PRNG.\n\t*\n\t* @private\n\t* @param {Options} [options] - function options\n\t* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n\t* @param {*} [options.seed] - pseudorandom value generator seed\n\t* @param {*} [options.state] - pseudorandom value generator state\n\t* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom value generator state\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {Function} function for filling strided arrays\n\t*/\n\tfunction factory() {\n\t\tvar base;\n\t\tvar opts;\n\n\t\tif ( arguments.length > 0 ) {\n\t\t\topts = arguments[ 0 ];\n\t\t\tif ( !isPlainObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tbase = prng.factory( opts );\n\t\t} else {\n\t\t\topts = {};\n\t\t\tbase = prng;\n\t\t}\n\t\tif ( opts && opts.prng ) {\n\t\t\tsetReadOnly( rand, 'seed', null );\n\t\t\tsetReadOnly( rand, 'seedLength', null );\n\t\t\tsetReadWriteAccessor( rand, 'state', constantFunction( null ), noop );\n\t\t\tsetReadOnly( rand, 'stateLength', null );\n\t\t\tsetReadOnly( rand, 'byteLength', null );\n\t\t} else {\n\t\t\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\t\t\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\t\t\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\t\t\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\t\t\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\t\t}\n\t\tsetReadOnly( rand, 'PRNG', base.PRNG );\n\t\tsetReadOnly( rand, 'ndarray', ndarray );\n\t\treturn rand;\n\n\t\t/**\n\t\t* Fills a strided array with pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} N - number of indexed elements\n\t\t* @param {Collection} param1 - PRNG parameter\n\t\t* @param {integer} sp1 - PRNG parameter stride length\n\t\t* @param {Collection} out - output array\n\t\t* @param {integer} so - output array stride length\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction rand( N, param1, sp1, out, so ) {\n\t\t\tunary( [ param1, out ], [ N ], [ sp1, so ], base );\n\t\t\treturn out;\n\t\t}\n\n\t\t/**\n\t\t* Fills a strided array with pseudorandom values drawn from a PRNG using alternative indexing semantics.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} N - number of indexed elements\n\t\t* @param {Collection} param1 - PRNG parameter\n\t\t* @param {integer} sp1 - PRNG parameter stride length\n\t\t* @param {NonNegativeInteger} op1 - PRNG parameter starting index\n\t\t* @param {Collection} out - output array\n\t\t* @param {integer} so - output array stride length\n\t\t* @param {NonNegativeInteger} oo - output array starting index\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction ndarray( N, param1, sp1, op1, out, so, oo ) {\n\t\t\tunary.ndarray( [ param1, out ], [ N ], [ sp1, so ], [ op1, oo ], base ); // eslint-disable-line max-len\n\t\t\treturn out;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} seed\n\t\t*/\n\t\tfunction getSeed() {\n\t\t\treturn rand.PRNG.seed;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} seed length\n\t\t*/\n\t\tfunction getSeedLength() {\n\t\t\treturn rand.PRNG.seedLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state length\n\t\t*/\n\t\tfunction getStateLength() {\n\t\t\treturn rand.PRNG.stateLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state size (in bytes).\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state size (in bytes)\n\t\t*/\n\t\tfunction getStateSize() {\n\t\t\treturn rand.PRNG.byteLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the current pseudorandom number generator state.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} current state\n\t\t*/\n\t\tfunction getState() {\n\t\t\treturn rand.PRNG.state;\n\t\t}\n\n\t\t/**\n\t\t* Sets the pseudorandom number generator state.\n\t\t*\n\t\t* @private\n\t\t* @param {*} s - generator state\n\t\t* @throws {Error} must provide a valid state\n\t\t*/\n\t\tfunction setState( s ) {\n\t\t\trand.PRNG.state = s;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = createFactory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a factory function for filling strided arrays with pseudorandom values drawn from a unary PRNG.\n*\n* @module @stdlib/random/strided/tools/unary-factory\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var exponential = require( '@stdlib/random/base/exponential' );\n* var unaryFactory = require( '@stdlib/random/strided/tools/unary-factory' );\n*\n* var factory = createFactory( exponential );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* random( out.length, [ 2.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var exponential = require( '@stdlib/random/base/exponential' );\n* var unaryFactory = require( '@stdlib/random/strided/tools/unary-factory' );\n*\n* var factory = createFactory( exponential );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* random.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unaryFactory = require( './../../../strided/tools/unary-factory' );\nvar base = require( './../../../base/bernoulli' );\n\n\n// MAIN //\n\n/**\n* Returns a function for filling strided arrays containing pseudorandom numbers drawn from a Bernoulli distribution.\n*\n* @name factory\n* @type {Function}\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for filling strided arrays\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var bernoulli = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* var arr = bernoulli( out.length, [ 0.5 ], 0, out, 1 );\n* // returns <Float64Array>\n*\n* var bool = ( arr === out );\n* // returns true\n*/\nvar factory = unaryFactory( base );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a Bernoulli distribution.\n*\n* @name bernoulli\n* @type {Function}\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} p - success probability\n* @param {integer} sp - `p` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* bernoulli( out.length, [ 0.5 ], 0, out, 1 );\n*/\nvar bernoulli = factory();\n\n\n// EXPORTS //\n\nmodule.exports = bernoulli;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from a Bernoulli distribution.\n*\n* @module @stdlib/random/strided/bernoulli\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var bernoulli = require( '@stdlib/random/strided/bernoulli' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* bernoulli( out.length, [ 0.5 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var bernoulli = require( '@stdlib/random/strided/bernoulli' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* bernoulli.ndarray( out.length, [ 0.5 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array/base/assert/is-accessor-array' );\nvar random = require( './../../../base/beta' );\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **arity**: number of function parameters.\n*     -   **fcn**: function for generating pseudorandom numbers.\n*\n* @private\n* @param {Collection} x - first parameter\n* @param {integer} sx - `x` stride length\n* @param {NonNegativeInteger} ox - starting `x` index\n* @param {Collection} y - second parameter\n* @param {integer} sy - `y` stride length\n* @param {NonNegativeInteger} oy - starting `y` index\n* @param {boolean} hasOptions - boolean indicating whether to process an options argument\n* @param {(void|Options)} options - function options\n* @returns {Object} function object\n*/\nfunction clbk( x, sx, ox, y, sy, oy, hasOptions, options ) {\n\tvar out;\n\tvar v1;\n\tvar v2;\n\n\tout = {\n\t\t'arity': 0,\n\t\t'fcn': null\n\t};\n\tif ( hasOptions ) {\n\t\tif ( sx === 0 && sy === 0 ) {\n\t\t\tif ( isAccessorArray( x ) ) {\n\t\t\t\tv1 = x.get( ox );\n\t\t\t} else {\n\t\t\t\tv1 = x[ ox ];\n\t\t\t}\n\t\t\tif ( isAccessorArray( y ) ) {\n\t\t\t\tv2 = y.get( oy );\n\t\t\t} else {\n\t\t\t\tv2 = y[ oy ];\n\t\t\t}\n\t\t\tout.fcn = random.factory( v1, v2, options );\n\t\t\treturn out;\n\t\t}\n\t\tout.fcn = random.factory( options );\n\t} else {\n\t\tout.fcn = random;\n\t}\n\tout.arity += 2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = clbk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar binary = require( '@stdlib/strided/base/binary' );\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a beta distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} alpha - first shape parameter\n* @param {integer} sa - `alpha` stride length\n* @param {Collection} beta - second shape parameter\n* @param {integer} sb - `beta` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* beta( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*/\nfunction beta( N, alpha, sa, beta, sb, out, so, options ) {\n\tvar rand = prng( alpha, sa, 0, beta, sb, 0, arguments.length > 7, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ alpha, beta, out ], [ N ], [ sa, sb, so ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = beta;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar binary = require( '@stdlib/strided/base/binary' ).ndarray;\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a beta distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} alpha - first shape parameter\n* @param {integer} sa - `alpha` stride length\n* @param {NonNegativeInteger} oa - starting `alpha` index\n* @param {Collection} beta - second shape parameter\n* @param {integer} sb - `beta` stride length\n* @param {NonNegativeInteger} ob - starting `beta` index\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* beta( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\nfunction beta( N, alpha, sa, oa, beta, sb, ob, out, so, oo, options ) { // eslint-disable-line max-params\n\tvar rand = prng( alpha, sa, oa, beta, sb, ob, arguments.length > 10, options ); // eslint-disable-line max-len\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ alpha, beta, out ], [ N ], [ sa, sb, so ], [ oa, ob, oo ], rand.fcn ); // eslint-disable-line max-len\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = beta;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from a beta distribution.\n*\n* @module @stdlib/random/strided/beta\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var beta = require( '@stdlib/random/strided/beta' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* beta( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var beta = require( '@stdlib/random/strided/beta' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* beta.ndarray( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array/base/assert/is-accessor-array' );\nvar random = require( './../../../base/betaprime' );\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **arity**: number of function parameters.\n*     -   **fcn**: function for generating pseudorandom numbers.\n*\n* @private\n* @param {Collection} x - first parameter\n* @param {integer} sx - `x` stride length\n* @param {NonNegativeInteger} ox - starting `x` index\n* @param {Collection} y - second parameter\n* @param {integer} sy - `y` stride length\n* @param {NonNegativeInteger} oy - starting `y` index\n* @param {boolean} hasOptions - boolean indicating whether to process an options argument\n* @param {(void|Options)} options - function options\n* @returns {Object} function object\n*/\nfunction clbk( x, sx, ox, y, sy, oy, hasOptions, options ) {\n\tvar out;\n\tvar v1;\n\tvar v2;\n\n\tout = {\n\t\t'arity': 0,\n\t\t'fcn': null\n\t};\n\tif ( hasOptions ) {\n\t\tif ( sx === 0 && sy === 0 ) {\n\t\t\tif ( isAccessorArray( x ) ) {\n\t\t\t\tv1 = x.get( ox );\n\t\t\t} else {\n\t\t\t\tv1 = x[ ox ];\n\t\t\t}\n\t\t\tif ( isAccessorArray( y ) ) {\n\t\t\t\tv2 = y.get( oy );\n\t\t\t} else {\n\t\t\t\tv2 = y[ oy ];\n\t\t\t}\n\t\t\tout.fcn = random.factory( v1, v2, options );\n\t\t\treturn out;\n\t\t}\n\t\tout.fcn = random.factory( options );\n\t} else {\n\t\tout.fcn = random;\n\t}\n\tout.arity += 2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = clbk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar binary = require( '@stdlib/strided/base/binary' );\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a beta prime distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} alpha - first shape parameter\n* @param {integer} sa - `alpha` stride length\n* @param {Collection} beta - second shape parameter\n* @param {integer} sb - `beta` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* betaprime( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*/\nfunction betaprime( N, alpha, sa, beta, sb, out, so, options ) {\n\tvar rand = prng( alpha, sa, 0, beta, sb, 0, arguments.length > 7, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ alpha, beta, out ], [ N ], [ sa, sb, so ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = betaprime;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar binary = require( '@stdlib/strided/base/binary' ).ndarray;\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a beta prime distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} alpha - first shape parameter\n* @param {integer} sa - `alpha` stride length\n* @param {NonNegativeInteger} oa - starting `alpha` index\n* @param {Collection} beta - second shape parameter\n* @param {integer} sb - `beta` stride length\n* @param {NonNegativeInteger} ob - starting `beta` index\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* betaprime( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\nfunction betaprime( N, alpha, sa, oa, beta, sb, ob, out, so, oo, options ) { // eslint-disable-line max-params\n\tvar rand = prng( alpha, sa, oa, beta, sb, ob, arguments.length > 10, options ); // eslint-disable-line max-len\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ alpha, beta, out ], [ N ], [ sa, sb, so ], [ oa, ob, oo ], rand.fcn ); // eslint-disable-line max-len\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = betaprime;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from a beta prime distribution.\n*\n* @module @stdlib/random/strided/betaprime\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var betaprime = require( '@stdlib/random/strided/betaprime' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* betaprime( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var betaprime = require( '@stdlib/random/strided/betaprime' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* betaprime.ndarray( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unaryFactory = require( './../../../strided/tools/unary-factory' );\nvar base = require( './../../../base/chi' );\n\n\n// MAIN //\n\n/**\n* Returns a function for filling strided arrays containing pseudorandom numbers drawn from a chi distribution.\n*\n* @name factory\n* @type {Function}\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for filling strided arrays\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var chi = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* var arr = chi( out.length, [ 2.0 ], 0, out, 1 );\n* // returns <Float64Array>\n*\n* var bool = ( arr === out );\n* // returns true\n*/\nvar factory = unaryFactory( base );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a chi distribution.\n*\n* @name chi\n* @type {Function}\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} k - degrees of freedom\n* @param {integer} sk - `k` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* chi( out.length, [ 2.0 ], 0, out, 1 );\n*/\nvar chi = factory();\n\n\n// EXPORTS //\n\nmodule.exports = chi;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from a chi distribution.\n*\n* @module @stdlib/random/strided/chi\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var chi = require( '@stdlib/random/strided/chi' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* chi( out.length, [ 2.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var chi = require( '@stdlib/random/strided/chi' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* chi.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unaryFactory = require( './../../../strided/tools/unary-factory' );\nvar base = require( './../../../base/chisquare' );\n\n\n// MAIN //\n\n/**\n* Returns a function for filling strided arrays containing pseudorandom numbers drawn from a chi-square distribution.\n*\n* @name factory\n* @type {Function}\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for filling strided arrays\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var chisquare = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* var arr = chisquare( out.length, [ 2.0 ], 0, out, 1 );\n* // returns <Float64Array>\n*\n* var bool = ( arr === out );\n* // returns true\n*/\nvar factory = unaryFactory( base );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a chi-square distribution.\n*\n* @name chisquare\n* @type {Function}\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} k - degrees of freedom\n* @param {integer} sk - `k` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* chisquare( out.length, [ 2.0 ], 0, out, 1 );\n*/\nvar chisquare = factory();\n\n\n// EXPORTS //\n\nmodule.exports = chisquare;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from a chi-square distribution.\n*\n* @module @stdlib/random/strided/chisquare\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var chisquare = require( '@stdlib/random/strided/chisquare' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* chisquare( out.length, [ 2.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var chisquare = require( '@stdlib/random/strided/chisquare' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* chisquare.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array/base/assert/is-accessor-array' );\nvar random = require( './../../../base/cosine' );\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers.\n.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **arity**: number of function parameters.\n*     -   **fcn**: function for generating pseudorandom numbers.\n*\n* @private\n* @param {Collection} x - first parameter\n* @param {integer} sx - `x` stride length\n* @param {NonNegativeInteger} ox - starting `x` index\n* @param {Collection} y - second parameter\n* @param {integer} sy - `y` stride length\n* @param {NonNegativeInteger} oy - starting `y` index\n* @param {boolean} hasOptions - boolean indicating whether to process an options argument\n* @param {(void|Options)} options - function options\n* @returns {Object} function object\n*/\nfunction clbk( x, sx, ox, y, sy, oy, hasOptions, options ) {\n\tvar out;\n\tvar v1;\n\tvar v2;\n\n\tout = {\n\t\t'arity': 0,\n\t\t'fcn': null\n\t};\n\tif ( hasOptions ) {\n\t\tif ( sx === 0 && sy === 0 ) {\n\t\t\tif ( isAccessorArray( x ) ) {\n\t\t\t\tv1 = x.get( ox );\n\t\t\t} else {\n\t\t\t\tv1 = x[ ox ];\n\t\t\t}\n\t\t\tif ( isAccessorArray( y ) ) {\n\t\t\t\tv2 = y.get( oy );\n\t\t\t} else {\n\t\t\t\tv2 = y[ oy ];\n\t\t\t}\n\t\t\tout.fcn = random.factory( v1, v2, options );\n\t\t\treturn out;\n\t\t}\n\t\tout.fcn = random.factory( options );\n\t} else {\n\t\tout.fcn = random;\n\t}\n\tout.arity += 2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = clbk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar binary = require( '@stdlib/strided/base/binary' );\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a raised cosine distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} mu - mean\n* @param {integer} sm - `mu` stride length\n* @param {Collection} s - scale parameter\n* @param {integer} ss - `s` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* cosine( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*/\nfunction cosine( N, mu, sm, s, ss, out, so, options ) {\n\tvar rand = prng( mu, sm, 0, s, ss, 0, arguments.length > 7, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ mu, s, out ], [ N ], [ sm, ss, so ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cosine;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar binary = require( '@stdlib/strided/base/binary' ).ndarray;\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a raised cosine distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} mu - mean\n* @param {integer} sm - `mu` stride length\n* @param {NonNegativeInteger} om - starting `mu` index\n* @param {Collection} s - scale parameter\n* @param {integer} ss - `s` stride length\n* @param {NonNegativeInteger} os - starting `s` index\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* cosine( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\nfunction cosine( N, mu, sm, om, s, ss, os, out, so, oo, options ) { // eslint-disable-line max-params\n\tvar rand = prng( mu, sm, om, s, ss, os, arguments.length > 10, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ mu, s, out ], [ N ], [ sm, ss, so ], [ om, os, oo ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cosine;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from a raised cosine distribution.\n*\n* @module @stdlib/random/strided/cosine\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var cosine = require( '@stdlib/random/strided/cosine' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* cosine( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var cosine = require( '@stdlib/random/strided/cosine' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* cosine.ndarray( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array/base/assert/is-accessor-array' );\nvar random = require( './../../../base/discrete-uniform' );\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **arity**: number of function parameters.\n*     -   **fcn**: function for generating pseudorandom numbers.\n*\n* @private\n* @param {Collection} x - first parameter\n* @param {integer} sx - `x` stride length\n* @param {NonNegativeInteger} ox - starting `x` index\n* @param {Collection} y - second parameter\n* @param {integer} sy - `y` stride length\n* @param {NonNegativeInteger} oy - starting `y` index\n* @param {boolean} hasOptions - boolean indicating whether to process an options argument\n* @param {(void|Options)} options - function options\n* @returns {Object} function object\n*/\nfunction clbk( x, sx, ox, y, sy, oy, hasOptions, options ) {\n\tvar out;\n\tvar v1;\n\tvar v2;\n\n\tout = {\n\t\t'arity': 0,\n\t\t'fcn': null\n\t};\n\tif ( hasOptions ) {\n\t\tif ( sx === 0 && sy === 0 ) {\n\t\t\tif ( isAccessorArray( x ) ) {\n\t\t\t\tv1 = x.get( ox );\n\t\t\t} else {\n\t\t\t\tv1 = x[ ox ];\n\t\t\t}\n\t\t\tif ( isAccessorArray( y ) ) {\n\t\t\t\tv2 = y.get( oy );\n\t\t\t} else {\n\t\t\t\tv2 = y[ oy ];\n\t\t\t}\n\t\t\tout.fcn = random.factory( v1, v2, options );\n\t\t\treturn out;\n\t\t}\n\t\tout.fcn = random.factory( options );\n\t} else {\n\t\tout.fcn = random;\n\t}\n\tout.arity += 2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = clbk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar binary = require( '@stdlib/strided/base/binary' );\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a discrete uniform distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} a - minimum support\n* @param {integer} sa - `a` stride length\n* @param {Collection} b - maximum support\n* @param {integer} sb - `b` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} minimum support must be less than or equal to maximum support\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* discreteUniform( out.length, [ -10 ], 0, [ 10 ], 0, out, 1 );\n*/\nfunction discreteUniform( N, a, sa, b, sb, out, so, options ) {\n\tvar rand = prng( a, sa, 0, b, sb, 0, arguments.length > 7, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ a, b, out ], [ N ], [ sa, sb, so ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = discreteUniform;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar binary = require( '@stdlib/strided/base/binary' ).ndarray;\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a discrete uniform distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} a - minimum support\n* @param {integer} sa - `a` stride length\n* @param {NonNegativeInteger} oa - starting `a` index\n* @param {Collection} b - maximum support\n* @param {integer} sb - `b` stride length\n* @param {NonNegativeInteger} ob - starting `b` index\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} minimum support must be less than or equal to maximum support\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* discreteUniform( out.length, [ -10 ], 0, 0, [ 10 ], 0, 0, out, 1, 0 );\n*/\nfunction discreteUniform( N, a, sa, oa, b, sb, ob, out, so, oo, options ) { // eslint-disable-line max-params\n\tvar rand = prng( a, sa, oa, b, sb, ob, arguments.length > 10, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ a, b, out ], [ N ], [ sa, sb, so ], [ oa, ob, oo ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = discreteUniform;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from a discrete uniform distribution.\n*\n* @module @stdlib/random/strided/discrete-uniform\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var discreteUniform = require( '@stdlib/random/strided/discrete-uniform' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* discreteUniform( out.length, [ -10 ], 0, [ 10 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var discreteUniform = require( '@stdlib/random/strided/discrete-uniform' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* discreteUniform.ndarray( out.length, [ -10 ], 0, 0, [ 10 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unaryFactory = require( './../../../strided/tools/unary-factory' );\nvar base = require( './../../../base/exponential' );\n\n\n// MAIN //\n\n/**\n* Returns a function for filling strided arrays containing pseudorandom numbers drawn from an exponential distribution.\n*\n* @name factory\n* @type {Function}\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for filling strided arrays\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var exponential = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* var arr = exponential( out.length, [ 2.0 ], 0, out, 1 );\n* // returns <Float64Array>\n*\n* var bool = ( arr === out );\n* // returns true\n*/\nvar factory = unaryFactory( base );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from an exponential distribution.\n*\n* @name exponential\n* @type {Function}\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} lambda - rate parameter\n* @param {integer} sl - `lambda` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* exponential( out.length, [ 2.0 ], 0, out, 1 );\n*/\nvar exponential = factory();\n\n\n// EXPORTS //\n\nmodule.exports = exponential;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from an exponential distribution.\n*\n* @module @stdlib/random/strided/exponential\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var exponential = require( '@stdlib/random/strided/exponential' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* exponential( out.length, [ 2.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var exponential = require( '@stdlib/random/strided/exponential' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* exponential.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array/base/assert/is-accessor-array' );\nvar random = require( './../../../base/gamma' );\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **arity**: number of function parameters.\n*     -   **fcn**: function for generating pseudorandom numbers.\n*\n* @private\n* @param {Collection} x - first parameter\n* @param {integer} sx - `x` stride length\n* @param {NonNegativeInteger} ox - starting `x` index\n* @param {Collection} y - second parameter\n* @param {integer} sy - `y` stride length\n* @param {NonNegativeInteger} oy - starting `y` index\n* @param {boolean} hasOptions - boolean indicating whether to process an options argument\n* @param {(void|Options)} options - function options\n* @returns {Object} function object\n*/\nfunction clbk( x, sx, ox, y, sy, oy, hasOptions, options ) {\n\tvar out;\n\tvar v1;\n\tvar v2;\n\n\tout = {\n\t\t'arity': 0,\n\t\t'fcn': null\n\t};\n\tif ( hasOptions ) {\n\t\tif ( sx === 0 && sy === 0 ) {\n\t\t\tif ( isAccessorArray( x ) ) {\n\t\t\t\tv1 = x.get( ox );\n\t\t\t} else {\n\t\t\t\tv1 = x[ ox ];\n\t\t\t}\n\t\t\tif ( isAccessorArray( y ) ) {\n\t\t\t\tv2 = y.get( oy );\n\t\t\t} else {\n\t\t\t\tv2 = y[ oy ];\n\t\t\t}\n\t\t\tout.fcn = random.factory( v1, v2, options );\n\t\t\treturn out;\n\t\t}\n\t\tout.fcn = random.factory( options );\n\t} else {\n\t\tout.fcn = random;\n\t}\n\tout.arity += 2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = clbk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar binary = require( '@stdlib/strided/base/binary' );\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a gamma distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} alpha - shape parameter\n* @param {integer} sa - `alpha` stride length\n* @param {Collection} beta - rate parameter\n* @param {integer} sb - `beta` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* gamma( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*/\nfunction gamma( N, alpha, sa, beta, sb, out, so, options ) {\n\tvar rand = prng( alpha, sa, 0, beta, sb, 0, arguments.length > 7, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ alpha, beta, out ], [ N ], [ sa, sb, so ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gamma;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar binary = require( '@stdlib/strided/base/binary' ).ndarray;\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a gamma distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} alpha - shape parameter\n* @param {integer} sa - `alpha` stride length\n* @param {NonNegativeInteger} oa - starting `alpha` index\n* @param {Collection} beta - rate parameter\n* @param {integer} sb - `beta` stride length\n* @param {NonNegativeInteger} ob - starting `beta` index\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* gamma( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\nfunction gamma( N, alpha, sa, oa, beta, sb, ob, out, so, oo, options ) { // eslint-disable-line max-params\n\tvar rand = prng( alpha, sa, oa, beta, sb, ob, arguments.length > 10, options ); // eslint-disable-line max-len\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ alpha, beta, out ], [ N ], [ sa, sb, so ], [ oa, ob, oo ], rand.fcn ); // eslint-disable-line max-len\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gamma;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from a gamma distribution.\n*\n* @module @stdlib/random/strided/gamma\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var gamma = require( '@stdlib/random/strided/gamma' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* gamma( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var gamma = require( '@stdlib/random/strided/gamma' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* gamma.ndarray( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unaryFactory = require( './../../../strided/tools/unary-factory' );\nvar base = require( './../../../base/geometric' );\n\n\n// MAIN //\n\n/**\n* Returns a function for filling strided arrays containing pseudorandom numbers drawn from a geometric distribution.\n*\n* @name factory\n* @type {Function}\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for filling strided arrays\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* var geometric = factory();\n* // returns <Function>\n*\n* var out = new Float64Array( 10 );\n* // returns <Float64Array>\n*\n* var arr = geometric( out.length, [ 0.01 ], 0, out, 1 );\n* // returns <Float64Array>\n*\n* var bool = ( arr === out );\n* // returns true\n*/\nvar factory = unaryFactory( base );\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a geometric distribution.\n*\n* @name geometric\n* @type {Function}\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} p - success probability\n* @param {integer} sp - `p` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* geometric( out.length, [ 0.01 ], 0, out, 1 );\n*/\nvar geometric = factory();\n\n\n// EXPORTS //\n\nmodule.exports = geometric;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from a geometric distribution.\n*\n* @module @stdlib/random/strided/geometric\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var geometric = require( '@stdlib/random/strided/geometric' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* geometric( out.length, [ 0.01 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var geometric = require( '@stdlib/random/strided/geometric' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* geometric.ndarray( out.length, [ 0.01 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\", \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array/base/assert/is-accessor-array' );\nvar random = require( './../../../base/invgamma' );\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers.\n.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **arity**: number of function parameters.\n*     -   **fcn**: function for generating pseudorandom numbers.\n*\n* @private\n* @param {Collection} x - first parameter\n* @param {integer} sx - `x` stride length\n* @param {NonNegativeInteger} ox - starting `x` index\n* @param {Collection} y - second parameter\n* @param {integer} sy - `y` stride length\n* @param {NonNegativeInteger} oy - starting `y` index\n* @param {boolean} hasOptions - boolean indicating whether to process an options argument\n* @param {(void|Options)} options - function options\n* @returns {Object} function object\n*/\nfunction clbk( x, sx, ox, y, sy, oy, hasOptions, options ) {\n\tvar out;\n\tvar v1;\n\tvar v2;\n\n\tout = {\n\t\t'arity': 0,\n\t\t'fcn': null\n\t};\n\tif ( hasOptions ) {\n\t\tif ( sx === 0 && sy === 0 ) {\n\t\t\tif ( isAccessorArray( x ) ) {\n\t\t\t\tv1 = x.get( ox );\n\t\t\t} else {\n\t\t\t\tv1 = x[ ox ];\n\t\t\t}\n\t\t\tif ( isAccessorArray( y ) ) {\n\t\t\t\tv2 = y.get( oy );\n\t\t\t} else {\n\t\t\t\tv2 = y[ oy ];\n\t\t\t}\n\t\t\tout.fcn = random.factory( v1, v2, options );\n\t\t\treturn out;\n\t\t}\n\t\tout.fcn = random.factory( options );\n\t} else {\n\t\tout.fcn = random;\n\t}\n\tout.arity += 2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = clbk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar binary = require( '@stdlib/strided/base/binary' );\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from an inverse gamma distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} alpha - shape parameter\n* @param {integer} sa - `alpha` stride length\n* @param {Collection} beta - scale parameter\n* @param {integer} sb - `beta` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* invgamma( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*/\nfunction invgamma( N, alpha, sa, beta, sb, out, so, options ) {\n\tvar rand = prng( alpha, sa, 0, beta, sb, 0, arguments.length > 7, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ alpha, beta, out ], [ N ], [ sa, sb, so ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = invgamma;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar binary = require( '@stdlib/strided/base/binary' ).ndarray;\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from an inverse gamma distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} alpha - shape parameter\n* @param {integer} sa - `alpha` stride length\n* @param {NonNegativeInteger} oa - starting `alpha` index\n* @param {Collection} beta - scale parameter\n* @param {integer} sb - `beta` stride length\n* @param {NonNegativeInteger} ob - starting `beta` index\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* invgamma( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\nfunction invgamma( N, alpha, sa, oa, beta, sb, ob, out, so, oo, options ) { // eslint-disable-line max-params\n\tvar rand = prng( alpha, sa, oa, beta, sb, ob, arguments.length > 10, options ); // eslint-disable-line max-len\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ alpha, beta, out ], [ N ], [ sa, sb, so ], [ oa, ob, oo ], rand.fcn ); // eslint-disable-line max-len\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = invgamma;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from an inverse gamma distribution.\n*\n* @module @stdlib/random/strided/invgamma\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var invgamma = require( '@stdlib/random/strided/invgamma' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* invgamma( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var invgamma = require( '@stdlib/random/strided/invgamma' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* invgamma.ndarray( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array/base/assert/is-accessor-array' );\nvar random = require( './../../../base/lognormal' );\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **arity**: number of function parameters.\n*     -   **fcn**: function for generating pseudorandom numbers.\n*\n* @private\n* @param {Collection} x - first parameter\n* @param {integer} sx - `x` stride length\n* @param {NonNegativeInteger} ox - starting `x` index\n* @param {Collection} y - second parameter\n* @param {integer} sy - `y` stride length\n* @param {NonNegativeInteger} oy - starting `y` index\n* @param {boolean} hasOptions - boolean indicating whether to process an options argument\n* @param {(void|Options)} options - function options\n* @returns {Object} function object\n*/\nfunction clbk( x, sx, ox, y, sy, oy, hasOptions, options ) {\n\tvar out;\n\tvar v1;\n\tvar v2;\n\n\tout = {\n\t\t'arity': 0,\n\t\t'fcn': null\n\t};\n\tif ( hasOptions ) {\n\t\tif ( sx === 0 && sy === 0 ) {\n\t\t\tif ( isAccessorArray( x ) ) {\n\t\t\t\tv1 = x.get( ox );\n\t\t\t} else {\n\t\t\t\tv1 = x[ ox ];\n\t\t\t}\n\t\t\tif ( isAccessorArray( y ) ) {\n\t\t\t\tv2 = y.get( oy );\n\t\t\t} else {\n\t\t\t\tv2 = y[ oy ];\n\t\t\t}\n\t\t\tout.fcn = random.factory( v1, v2, options );\n\t\t\treturn out;\n\t\t}\n\t\tout.fcn = random.factory( options );\n\t} else {\n\t\tout.fcn = random;\n\t}\n\tout.arity += 2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = clbk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar binary = require( '@stdlib/strided/base/binary' );\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a lognormal distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} mu - location parameter\n* @param {integer} sm - `mu` stride length\n* @param {Collection} sigma - scale parameter\n* @param {integer} ss - `sigma` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* lognormal( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*/\nfunction lognormal( N, mu, sm, sigma, ss, out, so, options ) {\n\tvar rand = prng( mu, sm, 0, sigma, ss, 0, arguments.length > 7, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ mu, sigma, out ], [ N ], [ sm, ss, so ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = lognormal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar binary = require( '@stdlib/strided/base/binary' ).ndarray;\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a lognormal distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} mu - location parameter\n* @param {integer} sm - `mu` stride length\n* @param {NonNegativeInteger} om - starting `mu` index\n* @param {Collection} sigma - scale parameter\n* @param {integer} ss - `sigma` stride length\n* @param {NonNegativeInteger} os - starting `sigma` index\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* lognormal( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\nfunction lognormal( N, mu, sm, om, sigma, ss, os, out, so, oo, options ) { // eslint-disable-line max-params\n\tvar rand = prng( mu, sm, om, sigma, ss, os, arguments.length > 10, options ); // eslint-disable-line max-len\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ mu, sigma, out ], [ N ], [ sm, ss, so ], [ om, os, oo ], rand.fcn ); // eslint-disable-line max-len\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = lognormal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from a lognormal distribution.\n*\n* @module @stdlib/random/strided/lognormal\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var lognormal = require( '@stdlib/random/strided/lognormal' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* lognormal( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var lognormal = require( '@stdlib/random/strided/lognormal' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* lognormal.ndarray( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar random = require( './../../../base/minstd' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom integers on the interval `[1, 2147483646]`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* minstd( out.length, out, 1 );\n*/\nfunction minstd( N, out, so, options ) {\n\tvar rand;\n\tif ( arguments.length > 3 ) {\n\t\trand = random.factory( options );\n\t} else {\n\t\trand = random;\n\t}\n\tnullary( [ out ], [ N ], [ so ], rand );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minstd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar random = require( './../../../base/minstd' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom integers on the interval `[1, 2147483646]`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* minstd( out.length, out, 1, 0 );\n*/\nfunction minstd( N, out, so, oo, options ) {\n\tvar rand;\n\tif ( arguments.length > 4 ) {\n\t\trand = random.factory( options );\n\t} else {\n\t\trand = random;\n\t}\n\tnullary( [ out ], [ N ], [ so ], [ oo ], rand );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minstd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar random = require( './../../../base/minstd' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers between `0` and `1`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* minstd( out.length, out, 1 );\n*/\nfunction minstd( N, out, so, options ) {\n\tvar rand;\n\tif ( arguments.length > 3 ) {\n\t\trand = random.factory( options );\n\t} else {\n\t\trand = random;\n\t}\n\tnullary( [ out ], [ N ], [ so ], rand.normalized );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minstd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar random = require( './../../../base/minstd' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with uniformly distributed pseudorandom numbers between `0` and `1`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* minstd( out.length, out, 1, 0 );\n*/\nfunction minstd( N, out, so, oo, options ) {\n\tvar rand;\n\tif ( arguments.length > 4 ) {\n\t\trand = random.factory( options );\n\t} else {\n\t\trand = random;\n\t}\n\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.normalized );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minstd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers generated using a linear congruential pseudorandom number generator (LCG).\n*\n* @module @stdlib/random/strided/minstd\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var minstd = require( '@stdlib/random/strided/minstd' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* minstd( out.length, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var minstd = require( '@stdlib/random/strided/minstd' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* minstd.ndarray( out.length, out, 1, 0 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var minstd = require( '@stdlib/random/strided/minstd' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* minstd.normalized( out.length, out, 1 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\nvar normalized = require( './normalized.js' );\nvar ndarrayNormalized = require( './normalized.ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\nsetReadOnly( main, 'normalized', normalized );\nsetReadOnly( normalized, 'ndarray', ndarrayNormalized );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\", \"normalized\": \"main.normalized\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar random = require( './../../../base/minstd-shuffle' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom integers on the interval `[1, 2147483646]`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* minstd( out.length, out, 1 );\n*/\nfunction minstd( N, out, so, options ) {\n\tvar rand;\n\tif ( arguments.length > 3 ) {\n\t\trand = random.factory( options );\n\t} else {\n\t\trand = random;\n\t}\n\tnullary( [ out ], [ N ], [ so ], rand );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minstd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar random = require( './../../../base/minstd-shuffle' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom integers on the interval `[1, 2147483646]`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* minstd( out.length, out, 1, 0 );\n*/\nfunction minstd( N, out, so, oo, options ) {\n\tvar rand;\n\tif ( arguments.length > 4 ) {\n\t\trand = random.factory( options );\n\t} else {\n\t\trand = random;\n\t}\n\tnullary( [ out ], [ N ], [ so ], [ oo ], rand );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minstd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar random = require( './../../../base/minstd-shuffle' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers between `0` and `1`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* minstd( out.length, out, 1 );\n*/\nfunction minstd( N, out, so, options ) {\n\tvar rand;\n\tif ( arguments.length > 3 ) {\n\t\trand = random.factory( options );\n\t} else {\n\t\trand = random;\n\t}\n\tnullary( [ out ], [ N ], [ so ], rand.normalized );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minstd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar random = require( './../../../base/minstd-shuffle' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with uniformly distributed pseudorandom numbers between `0` and `1`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* minstd( out.length, out, 1, 0 );\n*/\nfunction minstd( N, out, so, oo, options ) {\n\tvar rand;\n\tif ( arguments.length > 4 ) {\n\t\trand = random.factory( options );\n\t} else {\n\t\trand = random;\n\t}\n\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.normalized );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minstd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers generated using a linear congruential pseudorandom number generator (LCG) whose output is shuffled.\n*\n* @module @stdlib/random/strided/minstd-shuffle\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var minstd = require( '@stdlib/random/strided/minstd-shuffle' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* minstd( out.length, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var minstd = require( '@stdlib/random/strided/minstd-shuffle' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* minstd.ndarray( out.length, out, 1, 0 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var minstd = require( '@stdlib/random/strided/minstd-shuffle' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* minstd.normalized( out.length, out, 1 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\nvar normalized = require( './normalized.js' );\nvar ndarrayNormalized = require( './normalized.ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\nsetReadOnly( main, 'normalized', normalized );\nsetReadOnly( normalized, 'ndarray', ndarrayNormalized );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\", \"normalized\": \"main.normalized\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar random = require( './../../../base/mt19937' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom integers on the interval `[0, 4294967295]`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* mt19937( out.length, out, 1 );\n*/\nfunction mt19937( N, out, so, options ) {\n\tvar rand;\n\tif ( arguments.length > 3 ) {\n\t\trand = random.factory( options );\n\t} else {\n\t\trand = random;\n\t}\n\tnullary( [ out ], [ N ], [ so ], rand );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mt19937;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar random = require( './../../../base/mt19937' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom integers on the interval `[0, 4294967295]`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* mt19937( out.length, out, 1, 0 );\n*/\nfunction mt19937( N, out, so, oo, options ) {\n\tvar rand;\n\tif ( arguments.length > 4 ) {\n\t\trand = random.factory( options );\n\t} else {\n\t\trand = random;\n\t}\n\tnullary( [ out ], [ N ], [ so ], [ oo ], rand );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mt19937;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar random = require( './../../../base/mt19937' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers between `0` and `1`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* mt19937( out.length, out, 1 );\n*/\nfunction mt19937( N, out, so, options ) {\n\tvar rand;\n\tif ( arguments.length > 3 ) {\n\t\trand = random.factory( options );\n\t} else {\n\t\trand = random;\n\t}\n\tnullary( [ out ], [ N ], [ so ], rand.normalized );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mt19937;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar random = require( './../../../base/mt19937' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with uniformly distributed pseudorandom numbers between `0` and `1`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* mt19937( out.length, out, 1, 0 );\n*/\nfunction mt19937( N, out, so, oo, options ) {\n\tvar rand;\n\tif ( arguments.length > 4 ) {\n\t\trand = random.factory( options );\n\t} else {\n\t\trand = random;\n\t}\n\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.normalized );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mt19937;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers generated using a 32-bit Mersenne Twister pseudorandom number generator.\n*\n* @module @stdlib/random/strided/mt19937\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var mt19937 = require( '@stdlib/random/strided/mt19937' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* mt19937( out.length, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var mt19937 = require( '@stdlib/random/strided/mt19937' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* mt19937.ndarray( out.length, out, 1, 0 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var mt19937 = require( '@stdlib/random/strided/mt19937' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* mt19937.normalized( out.length, out, 1 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\nvar normalized = require( './normalized.js' );\nvar ndarrayNormalized = require( './normalized.ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\nsetReadOnly( main, 'normalized', normalized );\nsetReadOnly( normalized, 'ndarray', ndarrayNormalized );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\", \"normalized\": \"main.normalized\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array/base/assert/is-accessor-array' );\nvar random = require( './../../../base/normal' );\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **arity**: number of function parameters.\n*     -   **fcn**: function for generating pseudorandom numbers.\n*\n* @private\n* @param {Collection} x - first parameter\n* @param {integer} sx - `x` stride length\n* @param {NonNegativeInteger} ox - starting `x` index\n* @param {Collection} y - second parameter\n* @param {integer} sy - `y` stride length\n* @param {NonNegativeInteger} oy - starting `y` index\n* @param {boolean} hasOptions - boolean indicating whether to process an options argument\n* @param {(void|Options)} options - function options\n* @returns {Object} function object\n*/\nfunction clbk( x, sx, ox, y, sy, oy, hasOptions, options ) {\n\tvar out;\n\tvar v1;\n\tvar v2;\n\n\tout = {\n\t\t'arity': 0,\n\t\t'fcn': null\n\t};\n\tif ( hasOptions ) {\n\t\tif ( sx === 0 && sy === 0 ) {\n\t\t\tif ( isAccessorArray( x ) ) {\n\t\t\t\tv1 = x.get( ox );\n\t\t\t} else {\n\t\t\t\tv1 = x[ ox ];\n\t\t\t}\n\t\t\tif ( isAccessorArray( y ) ) {\n\t\t\t\tv2 = y.get( oy );\n\t\t\t} else {\n\t\t\t\tv2 = y[ oy ];\n\t\t\t}\n\t\t\tout.fcn = random.factory( v1, v2, options );\n\t\t\treturn out;\n\t\t}\n\t\tout.fcn = random.factory( options );\n\t} else {\n\t\tout.fcn = random;\n\t}\n\tout.arity += 2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = clbk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar binary = require( '@stdlib/strided/base/binary' );\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a normal distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} mu - mean\n* @param {integer} sm - `mu` stride length\n* @param {Collection} sigma - standard deviation\n* @param {integer} ss - `sigma` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* normal( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*/\nfunction normal( N, mu, sm, sigma, ss, out, so, options ) {\n\tvar rand = prng( mu, sm, 0, sigma, ss, 0, arguments.length > 7, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ mu, sigma, out ], [ N ], [ sm, ss, so ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = normal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar binary = require( '@stdlib/strided/base/binary' ).ndarray;\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a normal distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} mu - mean\n* @param {integer} sm - `mu` stride length\n* @param {NonNegativeInteger} om - starting `mu` index\n* @param {Collection} sigma - standard deviation\n* @param {integer} ss - `sigma` stride length\n* @param {NonNegativeInteger} os - starting `sigma` index\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* normal( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\nfunction normal( N, mu, sm, om, sigma, ss, os, out, so, oo, options ) { // eslint-disable-line max-params\n\tvar rand = prng( mu, sm, om, sigma, ss, os, arguments.length > 10, options ); // eslint-disable-line max-len\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ mu, sigma, out ], [ N ], [ sm, ss, so ], [ om, os, oo ], rand.fcn ); // eslint-disable-line max-len\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = normal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from a normal distribution.\n*\n* @module @stdlib/random/strided/normal\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var normal = require( '@stdlib/random/strided/normal' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* normal( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var normal = require( '@stdlib/random/strided/normal' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* normal.ndarray( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar random = require( './../../../base/randu' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with uniformly distributed pseudorandom numbers between `0` and `1`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {string} [options.name='mt19937'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* randu( out.length, out, 1 );\n*/\nfunction randu( N, out, so, options ) {\n\tvar rand;\n\tif ( arguments.length > 3 ) {\n\t\trand = random.factory( options );\n\t} else {\n\t\trand = random;\n\t}\n\tnullary( [ out ], [ N ], [ so ], rand );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = randu;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar random = require( './../../../base/randu' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with uniformly distributed pseudorandom numbers between `0` and `1`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {string} [options.name='mt19937'] - name of a supported pseudorandom number generator (PRNG), which will serve as the underlying source of pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* randu( out.length, out, 1, 0 );\n*/\nfunction randu( N, out, so, oo, options ) {\n\tvar rand;\n\tif ( arguments.length > 4 ) {\n\t\trand = random.factory( options );\n\t} else {\n\t\trand = random;\n\t}\n\tnullary( [ out ], [ N ], [ so ], [ oo ], rand );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = randu;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with uniformly distributed pseudorandom numbers between `0` and `1`.\n*\n* @module @stdlib/random/strided/randu\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/strided/randu' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* randu( out.length, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/strided/randu' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* randu.ndarray( out.length, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array/base/assert/is-accessor-array' );\nvar random = require( './../../../base/uniform' );\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **arity**: number of function parameters.\n*     -   **fcn**: function for generating pseudorandom numbers.\n*\n* @private\n* @param {Collection} x - first parameter\n* @param {integer} sx - `x` stride length\n* @param {NonNegativeInteger} ox - starting `x` index\n* @param {Collection} y - second parameter\n* @param {integer} sy - `y` stride length\n* @param {NonNegativeInteger} oy - starting `y` index\n* @param {boolean} hasOptions - boolean indicating whether to process an options argument\n* @param {(void|Options)} options - function options\n* @returns {Object} function object\n*/\nfunction clbk( x, sx, ox, y, sy, oy, hasOptions, options ) {\n\tvar out;\n\tvar v1;\n\tvar v2;\n\n\tout = {\n\t\t'arity': 0,\n\t\t'fcn': null\n\t};\n\tif ( hasOptions ) {\n\t\tif ( sx === 0 && sy === 0 ) {\n\t\t\tif ( isAccessorArray( x ) ) {\n\t\t\t\tv1 = x.get( ox );\n\t\t\t} else {\n\t\t\t\tv1 = x[ ox ];\n\t\t\t}\n\t\t\tif ( isAccessorArray( y ) ) {\n\t\t\t\tv2 = y.get( oy );\n\t\t\t} else {\n\t\t\t\tv2 = y[ oy ];\n\t\t\t}\n\t\t\tout.fcn = random.factory( v1, v2, options );\n\t\t\treturn out;\n\t\t}\n\t\tout.fcn = random.factory( options );\n\t} else {\n\t\tout.fcn = random;\n\t}\n\tout.arity += 2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = clbk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar binary = require( '@stdlib/strided/base/binary' );\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a continuous uniform distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} a - minimum support\n* @param {integer} sa - `a` stride length\n* @param {Collection} b - maximum support\n* @param {integer} sb - `b` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} minimum support must be less than maximum support\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* uniform( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*/\nfunction uniform( N, a, sa, b, sb, out, so, options ) {\n\tvar rand = prng( a, sa, 0, b, sb, 0, arguments.length > 7, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ a, b, out ], [ N ], [ sa, sb, so ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = uniform;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar binary = require( '@stdlib/strided/base/binary' ).ndarray;\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a continuous uniform distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} a - minimum support\n* @param {integer} sa - `a` stride length\n* @param {NonNegativeInteger} oa - starting `a` index\n* @param {Collection} b - maximum support\n* @param {integer} sb - `b` stride length\n* @param {NonNegativeInteger} ob - starting `b` index\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} minimum support must be less than maximum support\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* uniform( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\nfunction uniform( N, a, sa, oa, b, sb, ob, out, so, oo, options ) { // eslint-disable-line max-params\n\tvar rand = prng( a, sa, oa, b, sb, ob, arguments.length > 10, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ a, b, out ], [ N ], [ sa, sb, so ], [ oa, ob, oo ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = uniform;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from a continuous uniform distribution.\n*\n* @module @stdlib/random/strided/uniform\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var uniform = require( '@stdlib/random/strided/uniform' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* uniform( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var uniform = require( '@stdlib/random/strided/uniform' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* uniform.ndarray( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array/base/assert/is-accessor-array' );\nvar random = require( './../../../base/weibull' );\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **arity**: number of function parameters.\n*     -   **fcn**: function for generating pseudorandom numbers.\n*\n* @private\n* @param {Collection} x - first parameter\n* @param {integer} sx - `x` stride length\n* @param {NonNegativeInteger} ox - starting `x` index\n* @param {Collection} y - second parameter\n* @param {integer} sy - `y` stride length\n* @param {NonNegativeInteger} oy - starting `y` index\n* @param {boolean} hasOptions - boolean indicating whether to process an options argument\n* @param {(void|Options)} options - function options\n* @returns {Object} function object\n*/\nfunction clbk( x, sx, ox, y, sy, oy, hasOptions, options ) {\n\tvar out;\n\tvar v1;\n\tvar v2;\n\n\tout = {\n\t\t'arity': 0,\n\t\t'fcn': null\n\t};\n\tif ( hasOptions ) {\n\t\tif ( sx === 0 && sy === 0 ) {\n\t\t\tif ( isAccessorArray( x ) ) {\n\t\t\t\tv1 = x.get( ox );\n\t\t\t} else {\n\t\t\t\tv1 = x[ ox ];\n\t\t\t}\n\t\t\tif ( isAccessorArray( y ) ) {\n\t\t\t\tv2 = y.get( oy );\n\t\t\t} else {\n\t\t\t\tv2 = y[ oy ];\n\t\t\t}\n\t\t\tout.fcn = random.factory( v1, v2, options );\n\t\t\treturn out;\n\t\t}\n\t\tout.fcn = random.factory( options );\n\t} else {\n\t\tout.fcn = random;\n\t}\n\tout.arity += 2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = clbk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' );\nvar binary = require( '@stdlib/strided/base/binary' );\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a Weibull distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} k - scale parameter\n* @param {integer} sk - `k` stride length\n* @param {Collection} lambda - shape parameter\n* @param {integer} sl - `lambda` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* weibull( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*/\nfunction weibull( N, k, sk, lambda, sl, out, so, options ) {\n\tvar rand = prng( k, sk, 0, lambda, sl, 0, arguments.length > 7, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ k, lambda, out ], [ N ], [ sk, sl, so ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = weibull;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided/base/nullary' ).ndarray;\nvar binary = require( '@stdlib/strided/base/binary' ).ndarray;\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from a Weibull distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} k - scale parameter\n* @param {integer} sk - `k` stride length\n* @param {NonNegativeInteger} ok - starting `k` index\n* @param {Collection} lambda - shape parameter\n* @param {integer} sl - `lambda` stride length\n* @param {NonNegativeInteger} ol - starting `lambda` index\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* weibull( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\nfunction weibull( N, k, sk, ok, lambda, sl, ol, out, so, oo, options ) { // eslint-disable-line max-params\n\tvar rand = prng( k, sk, ok, lambda, sl, ol, arguments.length > 10, options ); // eslint-disable-line max-len\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ k, lambda, out ], [ N ], [ sk, sl, so ], [ ok, ol, oo ], rand.fcn ); // eslint-disable-line max-len\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = weibull;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from a Weibull distribution.\n*\n* @module @stdlib/random/strided/weibull\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var weibull = require( '@stdlib/random/strided/weibull' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* weibull( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var weibull = require( '@stdlib/random/strided/weibull' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* weibull.ndarray( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name arcsine\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/arcsine}\n*/\nsetReadOnly( ns, 'arcsine', require( './../../strided/arcsine' ) );\n\n/**\n* @name bernoulli\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/bernoulli}\n*/\nsetReadOnly( ns, 'bernoulli', require( './../../strided/bernoulli' ) );\n\n/**\n* @name beta\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/beta}\n*/\nsetReadOnly( ns, 'beta', require( './../../strided/beta' ) );\n\n/**\n* @name betaprime\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/betaprime}\n*/\nsetReadOnly( ns, 'betaprime', require( './../../strided/betaprime' ) );\n\n/**\n* @name chi\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/chi}\n*/\nsetReadOnly( ns, 'chi', require( './../../strided/chi' ) );\n\n/**\n* @name chisquare\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/chisquare}\n*/\nsetReadOnly( ns, 'chisquare', require( './../../strided/chisquare' ) );\n\n/**\n* @name cosine\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/cosine}\n*/\nsetReadOnly( ns, 'cosine', require( './../../strided/cosine' ) );\n\n/**\n* @name discreteUniform\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/discrete-uniform}\n*/\nsetReadOnly( ns, 'discreteUniform', require( './../../strided/discrete-uniform' ) );\n\n/**\n* @name exponential\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/exponential}\n*/\nsetReadOnly( ns, 'exponential', require( './../../strided/exponential' ) );\n\n/**\n* @name gamma\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/gamma}\n*/\nsetReadOnly( ns, 'gamma', require( './../../strided/gamma' ) );\n\n/**\n* @name geometric\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/geometric}\n*/\nsetReadOnly( ns, 'geometric', require( './../../strided/geometric' ) );\n\n/**\n* @name invgamma\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/invgamma}\n*/\nsetReadOnly( ns, 'invgamma', require( './../../strided/invgamma' ) );\n\n/**\n* @name lognormal\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/lognormal}\n*/\nsetReadOnly( ns, 'lognormal', require( './../../strided/lognormal' ) );\n\n/**\n* @name minstd\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/minstd}\n*/\nsetReadOnly( ns, 'minstd', require( './../../strided/minstd' ) );\n\n/**\n* @name minstdShuffle\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/minstd-shuffle}\n*/\nsetReadOnly( ns, 'minstdShuffle', require( './../../strided/minstd-shuffle' ) );\n\n/**\n* @name mt19937\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/mt19937}\n*/\nsetReadOnly( ns, 'mt19937', require( './../../strided/mt19937' ) );\n\n/**\n* @name normal\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/normal}\n*/\nsetReadOnly( ns, 'normal', require( './../../strided/normal' ) );\n\n/**\n* @name randu\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/randu}\n*/\nsetReadOnly( ns, 'randu', require( './../../strided/randu' ) );\n\n/**\n* @name uniform\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/uniform}\n*/\nsetReadOnly( ns, 'uniform', require( './../../strided/uniform' ) );\n\n/**\n* @name weibull\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/strided/weibull}\n*/\nsetReadOnly( ns, 'weibull', require( './../../strided/weibull' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name array\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/random/array}\n*/\nsetReadOnly( ns, 'array', require( './../array' ) );\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/random/base}\n*/\nsetReadOnly( ns, 'base', require( './../base' ) );\n\n/**\n* @name iterators\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/random/iter}\n*/\nsetReadOnly( ns, 'iterators', require( './../iter' ) );\n\n/**\n* @name sample\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/sample}\n*/\nsetReadOnly( ns, 'sample', require( './../sample' ) );\n\n/**\n* @name shuffle\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/shuffle}\n*/\nsetReadOnly( ns, 'shuffle', require( './../shuffle' ) );\n\n/**\n* @name streams\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/random/streams}\n*/\nsetReadOnly( ns, 'streams', require( './../streams' ) );\n\n/**\n* @name strided\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/random/strided}\n*/\nsetReadOnly( ns, 'strided', require( './../strided' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "contains", "format", "validate", "opts", "dtypes", "options", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isNonNegativeInteger", "isFunction", "isStringArray", "isCollection", "contains", "filledBy", "binary", "ctors", "format", "validate", "Random", "prng", "dtypes", "dtype", "len", "param1", "param2", "options", "ctor", "opts", "out", "err", "dt", "wrapper", "require_lib", "__commonJSMin", "exports", "module", "main", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "contains", "format", "validate", "opts", "dtypes", "options", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isNonNegativeInteger", "isFunction", "isStringArray", "isCollection", "contains", "filledBy", "nullary", "ctors", "format", "validate", "Random", "prng", "dtypes", "dtype", "len", "options", "ctor", "opts", "out", "err", "dt", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadWriteAccessor", "setReadOnlyAccessor", "setReadOnly", "isStringArray", "isFunction", "isMethodIn", "hasOwnProp", "contains", "constantFunction", "noop", "BinaryRandom", "NullaryRandom", "format", "createFactory", "prng", "dtypes", "dtype", "isValidDataType", "factory", "Random", "random", "param1", "param2", "assign", "nargs", "base", "opts", "rand", "dt", "rand1", "rand2", "assign1", "assign2", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "len", "options", "out", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_rand_uint32", "__commonJSMin", "exports", "module", "UINT32_MAX", "floor", "MAX", "randuint32", "v", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "hasOwnProp", "isObject", "isCollection", "isUint32Array", "isBoolean", "isPositiveInteger", "FLOAT64_MAX_SAFE_INTEGER", "UINT32_MAX", "Uint32Array", "max", "umul", "gcopy", "typedarray2json", "format", "randuint32", "N", "M", "MAX_SEED", "SEED_ARRAY_INIT_STATE", "UPPER_MASK", "LOWER_MASK", "KNUTH_MULTIPLIER", "MAGIC_MULTIPLIER_1", "MAGIC_MULTIPLIER_2", "TEMPERING_COEFFICIENT_1", "TEMPERING_COEFFICIENT_2", "MATRIX_A", "MAG01", "FLOAT64_NORMALIZATION_CONSTANT", "TWO_26", "TWO_32", "ONE", "MAX_NORMALIZED", "STATE_ARRAY_VERSION", "NUM_STATE_SECTIONS", "STATE_SECTION_OFFSET", "OTHER_SECTION_OFFSET", "SEED_SECTION_OFFSET", "STATE_FIXED_LENGTH", "verifyState", "state", "FLG", "s1", "createState", "s", "initState", "seed", "i", "j", "k", "twist", "w", "factory", "options", "STATE", "opts", "slen", "err", "mt19937", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "normalized", "len", "out", "r", "x", "require_main", "__commonJSMin", "exports", "module", "factory", "randuint32", "mt19937", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isNumber", "format", "isnan", "validate", "a", "b", "require_arcsine", "__commonJSMin", "exports", "module", "pow", "sin", "HALF_PI", "arcsine", "rand", "a", "b", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "validate", "arcsine0", "factory", "opts", "rand", "prng", "err", "a", "b", "arcsine2", "arcsine1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "arcsine", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "arcsine", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "contains", "format", "validate", "opts", "dtypes", "options", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isNonNegativeInteger", "isFunction", "isStringArray", "isCollection", "contains", "filledBy", "unary", "ctors", "format", "validate", "Random", "prng", "dtypes", "dtype", "len", "param1", "options", "ctor", "opts", "out", "err", "dt", "wrapper", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadWriteAccessor", "setReadOnlyAccessor", "setReadOnly", "isStringArray", "isFunction", "isMethodIn", "isPlainObject", "hasOwnProp", "contains", "constantFunction", "noop", "UnaryRandom", "NullaryRandom", "format", "createFactory", "prng", "dtypes", "dtype", "isValidDataType", "factory", "Random", "random", "param1", "assign", "nargs", "base", "opts", "rand", "dt", "rand1", "rand2", "assign1", "assign2", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "len", "options", "out", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isProbability", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "factory", "opts", "rand", "prng", "p", "bernoulli2", "bernoulli1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "bernoulli", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "unaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "bernoulli", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_coords_array", "__commonJSMin", "exports", "module", "sqrt", "exp", "ln", "V", "coordsArray", "N", "rTail", "X", "f", "i", "require_ratio_array", "__commonJSMin", "exports", "module", "ratioArray", "X", "R", "i", "require_sample_tail", "__commonJSMin", "exports", "module", "ln", "sampleTail", "rand", "rTail", "isNegative", "x", "y", "require_improved_ziggurat", "__commonJSMin", "exports", "module", "abs", "exp", "coordsArray", "ratioArray", "sampleTail", "NUM_BLOCKS", "START_RIGHT_TAIL", "X", "R", "LAST_7_BITS_MASK", "wrap", "randu", "randi", "randn", "f0", "f1", "x2", "x", "u", "i", "j", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isFunction", "isObject", "isBoolean", "hasOwnProp", "isUint32Array", "mt19937", "constantFunction", "noop", "floor", "UINT32_MAX", "typedarray2json", "format", "improvedZiggurat", "factory", "options", "randu", "randi", "randn", "opts", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "randn", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isPositive", "format", "validate", "alpha", "beta", "require_standard_gamma", "__commonJSMin", "exports", "module", "ln", "sqrt", "pow", "ONE_THIRD", "standardGamma", "randu", "randn", "alpha", "flg", "x2", "v0", "v1", "c", "d", "x", "s", "u", "v", "require_sample1", "__commonJSMin", "exports", "module", "pow", "ln", "sample", "randu", "randn", "alpha", "flg", "s4", "A", "s", "t", "u", "x", "y", "require_sample2", "__commonJSMin", "exports", "module", "pow", "ln", "sample", "randu", "randn", "alpha", "beta", "sigma", "flg", "mu", "A", "B", "C", "L", "s", "u", "x", "y", "require_sample3", "__commonJSMin", "exports", "module", "exp", "pow", "ln", "sample", "rand", "alpha", "beta", "lx", "ly", "xy", "v", "x", "y", "require_beta", "__commonJSMin", "exports", "module", "standardGamma", "sample1", "sample2", "sample3", "sample", "randu", "randn", "alpha", "beta", "ga", "gb", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isBoolean", "isFunction", "hasOwnProp", "constantFunction", "noop", "randn", "randu", "isnan", "gcopy", "Uint32Array", "isUint32Array", "assign", "typedarray2json", "format", "validate", "beta0", "factory", "STATE", "rnorm", "alpha", "beta", "opts", "rand", "prng", "FLG", "err", "beta2", "beta1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "beta", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "beta", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isPositive", "format", "validate", "alpha", "beta", "require_gamma", "__commonJSMin", "exports", "module", "ln", "gamma", "randu", "randn", "beta", "d", "c", "flg", "x2", "v0", "v1", "x", "u", "v", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isUint32Array", "isBoolean", "isFunction", "hasOwnProp", "constantFunction", "noop", "randn", "randu", "isnan", "sqrt", "pow", "gcopy", "Uint32Array", "typedarray2json", "assign", "format", "validate", "gamma0", "ONE_THIRD", "factory", "STATE", "alpha", "rnorm", "beta", "opts", "rand", "prng", "FLG", "err", "c", "d", "gamma2", "gamma1a", "gamma1b", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "gamma", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isPositive", "format", "validate", "alpha", "beta", "require_betaprime", "__commonJSMin", "exports", "module", "sample", "rgamma", "alpha", "beta", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "constantFunction", "noop", "gammaFactory", "isnan", "typedarray2json", "format", "validate", "betaprime0", "factory", "rgamma", "alpha", "beta", "opts", "rand", "prng", "err", "betaprime2", "betaprime1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "betaprime", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "betaprime", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isPositiveInteger", "isProbability", "format", "validate", "n", "p", "require_sample1", "__commonJSMin", "exports", "module", "sample", "rand", "n", "p", "sum", "i", "require_correction", "__commonJSMin", "exports", "module", "pow", "ONE_12", "ONE_360", "ONE_1260", "correction", "k", "v", "require_sample2", "__commonJSMin", "exports", "module", "floor", "sign", "sqrt", "abs", "ln", "correction", "ONE_SIXTH", "sample", "rand", "n", "p", "alpha", "urvr", "snpq", "npq", "rho", "tmp", "nm", "nr", "us", "km", "nk", "vr", "a", "b", "c", "f", "h", "i", "k", "m", "q", "r", "t", "u", "v", "x", "require_binomial", "__commonJSMin", "exports", "module", "sample1", "sample2", "sample", "rand", "n", "p", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "isnan", "isPositiveInteger", "isProbability", "randu", "typedarray2json", "format", "validate", "binomial0", "factory", "opts", "rand", "prng", "err", "p", "binomial2", "binomial1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "n", "require_main", "__commonJSMin", "exports", "module", "factory", "binomial", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "binomial", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isNumber", "isPositive", "format", "isnan", "validate", "x0", "gamma", "require_cauchy", "__commonJSMin", "exports", "module", "tan", "PI", "cauchy", "randn", "x0", "gamma", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "isnan", "randn", "typedarray2json", "format", "validate", "cauchy0", "factory", "gamma", "rnorm", "opts", "rand", "prng", "err", "x0", "cauchy2", "cauchy1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "cauchy", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "cauchy", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isPositive", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "isnan", "gamma", "typedarray2json", "format", "factory", "rgamma", "rand", "opts", "prng", "k", "chisquare2", "chisquare1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "chisquare", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isPositive", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "isnan", "chisquare", "typedarray2json", "sqrt", "format", "factory", "rchisq", "rand", "opts", "prng", "k", "chi2", "chi1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "chi", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "unaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "chi", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "unaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "chisquare", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isNumber", "isPositive", "format", "isnan", "validate", "mu", "s", "require_cosine", "__commonJSMin", "exports", "module", "quantile", "sample", "rand", "mu", "s", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "validate", "cosine0", "factory", "opts", "rand", "prng", "err", "mu", "s", "cosine2", "cosine1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "cosine", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "cosine", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isInteger", "format", "isnan", "validate", "a", "b", "require_discrete_uniform", "__commonJSMin", "exports", "module", "MAX_SAFE_INTEGER", "floor", "discreteUniform", "rand", "a", "b", "result", "RANGE", "range", "limit", "bsize", "mult", "MIN", "MAX", "inc", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randi", "isnan", "isInteger", "typedarray2json", "format", "validate", "discreteUniform0", "factory", "opts", "rand", "prng", "err", "a", "b", "discreteUniform2", "discreteUniform1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "discreteUniform", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "discreteUniform", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isPositive", "isPositiveInteger", "format", "validate", "k", "lambda", "require_erlang", "__commonJSMin", "exports", "module", "ln", "erlang", "rand", "k", "lambda", "prod", "i", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "isPositiveInteger", "typedarray2json", "format", "validate", "erlang0", "factory", "lambda", "rand", "opts", "prng", "err", "k", "erlang2", "erlang1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "erlang", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "erlang", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_exponential", "__commonJSMin", "exports", "module", "ln", "exponential", "rand", "lambda", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isPositive", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "exponential0", "factory", "lambda", "opts", "rand", "prng", "exponential2", "exponential1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "exponential", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "unaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "exponential", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isPositive", "format", "validate", "d1", "d2", "require_f", "__commonJSMin", "exports", "module", "f", "rchisq", "d1", "d2", "x1", "x2", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "chisquare", "isnan", "typedarray2json", "format", "validate", "f0", "factory", "rchisq", "opts", "rand", "prng", "err", "d1", "d2", "f2", "f1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "f", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "f", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "contains", "format", "validate", "opts", "dtypes", "options", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isNonNegativeInteger", "isFunction", "isStringArray", "isCollection", "contains", "filledBy", "ternary", "ctors", "format", "validate", "Random", "prng", "dtypes", "dtype", "len", "param1", "param2", "param3", "options", "ctor", "opts", "out", "err", "dt", "wrapper", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadWriteAccessor", "setReadOnlyAccessor", "setReadOnly", "isStringArray", "isFunction", "isMethodIn", "hasOwnProp", "contains", "constantFunction", "noop", "TernaryRandom", "NullaryRandom", "format", "createFactory", "prng", "dtypes", "dtype", "isValidDataType", "factory", "Random", "random", "param1", "param2", "param3", "assign", "nargs", "base", "opts", "rand", "dt", "rand1", "rand2", "assign1", "assign2", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "len", "options", "out", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_validate", "__commonJSMin", "exports", "module", "isPositiveNumber", "isNumber", "isnan", "format", "validate", "alpha", "s", "m", "require_frechet", "__commonJSMin", "exports", "module", "pow", "ln", "frechet", "rand", "alpha", "s", "m", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "validate", "frechet0", "factory", "alpha", "opts", "rand", "prng", "err", "s", "m", "frechet2", "frechet1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "frechet", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "ternaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "frechet", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "gamma", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_geometric", "__commonJSMin", "exports", "module", "floor", "ln", "geometric", "rand", "p", "u", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isProbability", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "geometric0", "factory", "opts", "rand", "prng", "p", "geometric2", "geometric1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "geometric", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "unaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "geometric", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isNumber", "isPositive", "format", "isnan", "validate", "mu", "beta", "require_gumbel", "__commonJSMin", "exports", "module", "ln", "gumbel", "rand", "mu", "beta", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "validate", "gumbel0", "factory", "beta", "opts", "rand", "prng", "err", "mu", "gumbel2", "gumbel1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "gumbel", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "gumbel", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "format", "validate", "N", "K", "n", "require_hin", "__commonJSMin", "exports", "module", "factorial", "hin", "rand", "n1", "n2", "k", "p", "u", "x", "require_hypergeometric", "__commonJSMin", "exports", "module", "hin", "hypergeometric", "rand", "N", "K", "n", "n1", "n2", "k", "x", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isNonNegativeInteger", "PINF", "typedarray2json", "format", "validate", "hypergeometric0", "factory", "opts", "rand", "prng", "err", "N", "K", "n", "hypergeometric2", "hypergeometric1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "hypergeometric", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "ternaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "hypergeometric", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isPositive", "format", "validate", "alpha", "beta", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "gamma", "isnan", "typedarray2json", "format", "validate", "factory", "rgamma", "alpha", "beta", "opts", "rand", "prng", "err", "invgamma2", "invgamma1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "invgamma", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "invgamma", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isPositive", "format", "validate", "a", "b", "require_kumaraswamy", "__commonJSMin", "exports", "module", "pow", "sample", "rand", "a", "b", "u", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "validate", "kumaraswamy0", "factory", "opts", "rand", "prng", "err", "a", "b", "kumaraswamy2", "kumaraswamy1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "kumaraswamy", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "kumaraswamy", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isNumber", "isPositive", "format", "isnan", "validate", "mu", "b", "require_laplace", "__commonJSMin", "exports", "module", "sign", "abs", "ln", "laplace", "rand", "mu", "b", "u", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "validate", "laplace0", "factory", "opts", "rand", "prng", "err", "mu", "b", "laplace2", "laplace1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "laplace", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "laplace", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isNumber", "isPositive", "format", "isnan", "validate", "mu", "c", "require_levy", "__commonJSMin", "exports", "module", "normalQuantile", "levy", "rand", "mu", "c", "z", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "validate", "levy0", "factory", "opts", "rand", "prng", "err", "mu", "c", "levy2", "levy1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "levy", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "levy", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isNumber", "isPositive", "isnan", "format", "validate", "mu", "s", "require_logistic", "__commonJSMin", "exports", "module", "ln", "logistic", "rand", "mu", "s", "u", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "validate", "logistic0", "factory", "opts", "rand", "prng", "err", "mu", "s", "logistic2", "logistic1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "logistic", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "logistic", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isNumber", "isPositive", "format", "isnan", "validate", "mu", "sigma", "require_lognormal", "__commonJSMin", "exports", "module", "exp", "lognormal", "randn", "mu", "sigma", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randn", "isnan", "typedarray2json", "format", "validate", "lognormal0", "factory", "sigma", "rnorm", "opts", "rand", "prng", "err", "mu", "lognormal2", "lognormal1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "lognormal", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "lognormal", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_rand_int32", "__commonJSMin", "exports", "module", "INT32_MAX", "floor", "MAX", "randint32", "v", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "hasOwnProp", "isObject", "isBoolean", "isCollection", "isPositiveInteger", "isInt32Array", "format", "INT32_MAX", "Int32Array", "gcopy", "typedarray2json", "randint32", "NORMALIZATION_CONSTANT", "MAX_SEED", "A", "STATE_ARRAY_VERSION", "NUM_STATE_SECTIONS", "STATE_SECTION_OFFSET", "SEED_SECTION_OFFSET", "STATE_FIXED_LENGTH", "verifyState", "state", "FLG", "s1", "factory", "options", "STATE", "opts", "seed", "slen", "err", "minstd", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "normalized", "len", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "randint32", "minstd", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "fdtypes", "rdtypes", "isObject", "hasOwnProp", "format", "RDTYPES", "FDTYPES", "validate", "opts", "options", "mode", "require_factory", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "base", "ctors", "filledBy", "nullary", "format", "defaults", "validate", "factory", "options", "nargs", "opts", "rand", "prng", "err", "minstd", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "normalized", "len", "ctor", "out", "dt", "o", "s", "require_main", "__commonJSMin", "exports", "module", "factory", "minstd", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_create_table", "__commonJSMin", "exports", "module", "isnan", "NUM_WARMUPS", "createTable", "rand", "table", "N", "v", "i", "require_rand_int32", "__commonJSMin", "exports", "module", "INT32_MAX", "floor", "MAX", "randint32", "v", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "hasOwnProp", "isObject", "isBoolean", "isCollection", "isPositiveInteger", "isInt32Array", "gcopy", "floor", "Int32Array", "INT32_MAX", "typedarray2json", "format", "createTable", "randint32", "NORMALIZATION_CONSTANT", "MAX_SEED", "A", "TABLE_LENGTH", "STATE_ARRAY_VERSION", "NUM_STATE_SECTIONS", "TABLE_SECTION_OFFSET", "STATE_SECTION_OFFSET", "SEED_SECTION_OFFSET", "STATE_FIXED_LENGTH", "SHUFFLE_STATE", "PRNG_STATE", "verifyState", "state", "FLG", "s1", "factory", "options", "STATE", "opts", "seed", "slen", "err", "minstd", "minstdShuffle", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "normalized", "len", "s", "out", "i", "require_main", "__commonJSMin", "exports", "module", "factory", "randint32", "minstd", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "fdtypes", "rdtypes", "isObject", "hasOwnProp", "format", "RDTYPES", "FDTYPES", "validate", "opts", "options", "mode", "require_factory", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "base", "ctors", "filledBy", "nullary", "format", "defaults", "validate", "factory", "options", "nargs", "opts", "rand", "prng", "err", "minstd", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "normalized", "len", "ctor", "out", "dt", "o", "s", "require_main", "__commonJSMin", "exports", "module", "factory", "minstd", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "fdtypes", "rdtypes", "isObject", "hasOwnProp", "format", "RDTYPES", "FDTYPES", "validate", "opts", "options", "mode", "require_factory", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "base", "ctors", "filledBy", "nullary", "format", "defaults", "validate", "factory", "options", "nargs", "opts", "rand", "prng", "err", "mt19937", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "normalized", "len", "ctor", "out", "dt", "o", "s", "require_main", "__commonJSMin", "exports", "module", "factory", "mt19937", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_knuth", "__commonJSMin", "exports", "module", "exp", "poisson", "rand", "lambda", "p", "k", "require_rejection", "__commonJSMin", "exports", "module", "factorialln", "floor", "sign", "sqrt", "abs", "ln", "LN_SQRT_TWO_PI", "ONE_12", "ONE_360", "poisson", "rand", "lambda", "slambda", "ainv", "urvr", "us", "vr", "a", "b", "k", "u", "v", "require_poisson", "__commonJSMin", "exports", "module", "knuth", "rejection", "poisson", "rand", "lambda", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isPositive", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "poisson0", "factory", "lambda", "opts", "rand", "prng", "poisson2", "poisson1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "poisson", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isPositive", "isNumber", "format", "isnan", "validate", "p", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "hasOwnProp", "isObject", "isUint32Array", "isBoolean", "isFunction", "constantFunction", "noop", "isnan", "poisson", "gamma", "gcopy", "Uint32Array", "assign", "typedarray2json", "format", "validate", "factory", "rgamma", "STATE", "rpois", "opts", "prng", "rand", "FLG", "err", "p", "r", "negativeBinomial2", "negativeBinomial1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "negativeBinomial", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "negativeBinomial", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isNumber", "isPositive", "format", "isnan", "validate", "mu", "sigma", "require_normal", "__commonJSMin", "exports", "module", "normal", "rand", "mu", "sigma", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randn", "isnan", "typedarray2json", "format", "validate", "normal0", "factory", "sigma", "rnorm", "opts", "rand", "prng", "err", "mu", "normal2", "normal1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "normal", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "normal", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isPositive", "format", "validate", "alpha", "beta", "require_pareto", "__commonJSMin", "exports", "module", "pow", "pareto", "rand", "alpha", "beta", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "validate", "pareto0", "factory", "alpha", "beta", "opts", "rand", "prng", "err", "pareto2", "pareto1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "pareto1", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "pareto1", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "unaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "poisson", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_prngs", "__commonJSMin", "exports", "module", "minstd", "minstdShuffle", "mt19937", "prngs", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isBoolean", "hasOwnProp", "typedarray2json", "format", "defaults", "PRNGS", "factory", "options", "opts", "rand", "prng", "uniform", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "randu", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "dtypes", "isObject", "hasOwnProp", "format", "DTYPES", "validate", "opts", "options", "require_factory", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "base", "ctors", "filledBy", "nullary", "format", "defaults", "validate", "factory", "options", "nargs", "opts", "rand", "prng", "err", "randu", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "len", "ctor", "out", "dt", "o", "s", "require_main", "__commonJSMin", "exports", "module", "factory", "randu", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_rayleigh", "__commonJSMin", "exports", "module", "sqrt", "ln", "rayleigh", "rand", "sigma", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isPositive", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "rayleigh0", "factory", "sigma", "opts", "rand", "prng", "rayleigh2", "rayleigh1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "rayleigh", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "unaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "rayleigh", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "hasOwnProp", "isPositive", "isObject", "isUint32Array", "isBoolean", "isnan", "isFunction", "constantFunction", "noop", "chisquare", "randn", "gcopy", "Uint32Array", "assign", "typedarray2json", "format", "sqrt", "factory", "rchisq", "STATE", "rnorm", "rand", "opts", "prng", "FLG", "v", "t2", "t1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "t", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "unaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "t", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isNumber", "format", "isnan", "validate", "a", "b", "c", "require_triangular", "__commonJSMin", "exports", "module", "sqrt", "triangular", "rand", "a", "b", "c", "fc", "x", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "validate", "triangular0", "factory", "opts", "rand", "prng", "err", "a", "b", "c", "triangular2", "triangular1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "triangular", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "ternaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "triangular", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isNumber", "format", "isnan", "validate", "a", "b", "require_uniform", "__commonJSMin", "exports", "module", "uniform", "rand", "a", "b", "r", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "validate", "uniform0", "factory", "opts", "rand", "prng", "err", "a", "b", "uniform2", "uniform1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "uniform", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "uniform", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_validate", "__commonJSMin", "exports", "module", "isPositive", "format", "validate", "k", "lambda", "require_weibull", "__commonJSMin", "exports", "module", "pow", "ln", "weibull", "rand", "k", "lambda", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "hasOwnProp", "constantFunction", "noop", "randu", "isnan", "typedarray2json", "format", "validate", "weibull0", "factory", "lambda", "opts", "rand", "prng", "err", "k", "weibull2", "weibull1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "weibull", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "binaryFactory", "dtypes", "defaults", "base", "DTYPES", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "weibull", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_randn", "__commonJSMin", "exports", "module", "sqrt", "ln", "sin", "cos", "TWO_PI", "wrap", "rand", "flg", "r", "randn", "u1", "u2", "a", "b", "require_min", "__commonJSMin", "exports", "module", "sqrt", "ln", "cos", "PI", "COS_PI", "getMin", "min", "a", "require_max", "__commonJSMin", "exports", "module", "sqrt", "ln", "cos", "TWO_PI", "getMax", "min", "a", "b", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isFunction", "isBoolean", "hasOwnProp", "isUint32Array", "mt19937", "constantFunction", "noop", "typedarray2json", "format", "randn0", "getMin", "getMax", "factory", "options", "randu", "randn", "rand", "opts", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "randn", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_prngs", "__commonJSMin", "exports", "module", "minstd", "minstdShuffle", "mt19937", "prngs", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isBoolean", "hasOwnProp", "typedarray2json", "format", "defaults", "PRNGS", "factory", "options", "opts", "rand", "prng", "randi", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "randi", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_prngs", "__commonJSMin", "exports", "module", "boxMuller", "improvedZiggurat", "prngs", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isBoolean", "hasOwnProp", "constantFunction", "format", "noop", "typedarray2json", "defaults", "PRNGS", "factory", "options", "opts", "rand", "prng", "normal", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "normal", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_prngs", "__commonJSMin", "exports", "module", "prng0", "prng1", "prng2", "prng3", "prng4", "prng5", "prng6", "prng7", "prng8", "prng9", "prng10", "prng11", "prng12", "prng13", "prng14", "prng15", "prng16", "prng17", "prng18", "prng19", "prng20", "prng21", "prng22", "prng23", "prng24", "prng25", "prng26", "prng27", "prng28", "prng29", "prng30", "prng31", "prng32", "prng33", "prng34", "prng35", "prng36", "prng37", "prng38", "prng39", "prng40", "prngs", "require_main", "__commonJSMin", "exports", "module", "isString", "isObject", "isArray", "contains", "Int32Array", "Uint32Array", "table", "TYPED_ARRAY_CTORS", "PRNG_WRAPPERS", "reviveBasePRNG", "key", "value", "factory", "opts", "args", "ctor", "tmp", "error", "require_lib", "__commonJSMin", "exports", "module", "main", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "random", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isNumber", "isnan", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rarcsine", "iteratorSymbol", "format", "iterator", "a", "b", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isProbability", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rbern", "iteratorSymbol", "format", "iterator", "p", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositiveNumber", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rbeta", "iteratorSymbol", "format", "iterator", "alpha", "beta", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositiveNumber", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rbetaprime", "iteratorSymbol", "format", "iterator", "alpha", "beta", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isProbability", "isObject", "isPositiveInteger", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rbinom", "iteratorSymbol", "format", "iterator", "n", "p", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rnorm", "iteratorSymbol", "format", "iterator", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isNumber", "isnan", "isObject", "isNonNegativeInteger", "isPositive", "hasOwnProp", "MAX_VALUE", "rcauchy", "iteratorSymbol", "format", "iterator", "x0", "gamma", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositive", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rchi", "iteratorSymbol", "format", "iterator", "k", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositive", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rchisq", "iteratorSymbol", "format", "iterator", "k", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isNumber", "isnan", "isObject", "isNonNegativeInteger", "isPositive", "hasOwnProp", "MAX_VALUE", "rcosine", "iteratorSymbol", "format", "iterator", "mu", "s", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isInteger", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "runif", "iteratorSymbol", "format", "iterator", "a", "b", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositiveNumber", "isObject", "isNonNegativeInteger", "isPositiveInteger", "hasOwnProp", "MAX_VALUE", "rerlang", "iteratorSymbol", "format", "iterator", "k", "lambda", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositive", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rexp", "iteratorSymbol", "format", "iterator", "lambda", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositiveNumber", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rf", "iteratorSymbol", "format", "iterator", "d1", "d2", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositiveNumber", "isObject", "isNumber", "isnan", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rfrechet", "iteratorSymbol", "format", "iterator", "alpha", "s", "m", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositiveNumber", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rgamma", "iteratorSymbol", "format", "iterator", "alpha", "beta", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isProbability", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rgeom", "iteratorSymbol", "format", "iterator", "p", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isNumber", "isnan", "isObject", "isNonNegativeInteger", "isPositive", "hasOwnProp", "MAX_VALUE", "rgumbel", "iteratorSymbol", "format", "iterator", "mu", "beta", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rhypergeom", "iteratorSymbol", "format", "iterator", "N", "K", "n", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rnorm", "iteratorSymbol", "format", "iterator", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositiveNumber", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rinvgamma", "iteratorSymbol", "format", "iterator", "alpha", "beta", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositiveNumber", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rkumaraswamy", "iteratorSymbol", "format", "iterator", "a", "b", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isNumber", "isnan", "isObject", "isNonNegativeInteger", "isPositive", "hasOwnProp", "MAX_VALUE", "rlaplace", "iteratorSymbol", "format", "iterator", "mu", "b", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isNumber", "isnan", "isObject", "isNonNegativeInteger", "isPositive", "hasOwnProp", "MAX_VALUE", "rlevy", "iteratorSymbol", "format", "iterator", "mu", "c", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isNumber", "isnan", "isObject", "isNonNegativeInteger", "isPositive", "hasOwnProp", "MAX_VALUE", "rlogis", "iteratorSymbol", "format", "iterator", "mu", "s", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isNumber", "isnan", "isObject", "isNonNegativeInteger", "isPositive", "hasOwnProp", "MAX_VALUE", "rlognorm", "iteratorSymbol", "format", "iterator", "mu", "sigma", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "assign", "isObject", "isBoolean", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "minstd", "iteratorSymbol", "format", "iterator", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "assign", "isObject", "isBoolean", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "minstd", "iteratorSymbol", "format", "iterator", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "assign", "isObject", "isBoolean", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "mt19937", "iteratorSymbol", "format", "iterator", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isProbability", "isObject", "isPositiveNumber", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rnbinom", "iteratorSymbol", "format", "iterator", "p", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isNumber", "isnan", "isObject", "isNonNegativeInteger", "isPositive", "hasOwnProp", "MAX_VALUE", "rnorm", "iteratorSymbol", "format", "iterator", "mu", "sigma", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositiveNumber", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rpareto", "iteratorSymbol", "format", "iterator", "alpha", "beta", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositive", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rpois", "iteratorSymbol", "format", "iterator", "lambda", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "assign", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "randi", "iteratorSymbol", "format", "iterator", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "randn", "iteratorSymbol", "format", "iterator", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "assign", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "randu", "iteratorSymbol", "format", "iterator", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositive", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rrayleigh", "iteratorSymbol", "format", "iterator", "sigma", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositive", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rt", "iteratorSymbol", "format", "iterator", "v", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isNumber", "isnan", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rtriangular", "iteratorSymbol", "format", "iterator", "a", "b", "c", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isNumber", "isnan", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "runif", "iteratorSymbol", "format", "iterator", "a", "b", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "constantFunction", "noop", "assign", "isPositiveNumber", "isObject", "isNonNegativeInteger", "hasOwnProp", "MAX_VALUE", "rweibull", "iteratorSymbol", "format", "iterator", "k", "lambda", "options", "opts", "iter", "rand", "FLG", "i", "next", "end", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "factory", "value", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_discrete_uniform", "__commonJSMin", "exports", "module", "floor", "discreteUniform", "x", "size", "rand", "pos", "out", "N", "i", "require_renormalizing", "__commonJSMin", "exports", "module", "renormalizing", "x", "size", "rand", "probabilities", "probs", "psum", "out", "N", "i", "j", "k", "u", "require_fisher_yates", "__commonJSMin", "exports", "module", "floor", "slice", "fisherYates", "x", "size", "rand", "tmp", "N", "i", "j", "require_vose", "__commonJSMin", "exports", "module", "floor", "vose", "x", "size", "rand", "probabilities", "small", "large", "probs", "alias", "out", "N", "p", "g", "i", "l", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "isUnityProbabilityArray", "hasOwnProp", "isBoolean", "isObject", "format", "validate", "opts", "options", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "isArrayLike", "isTypedArrayLike", "isString", "format", "randu", "copy", "discreteUniform", "renormalizing", "fisherYates", "vose", "defaults", "validate", "slice", "factory", "config", "pool", "conf", "rand", "err", "fcn", "sample1", "sample2", "x", "options", "replace", "xcopy", "probs", "opts", "size", "mutate", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "sample", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "hasOwnProp", "isString", "isObject", "indexOf", "format", "COPY_OPTIONS", "validate", "opts", "options", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "isArrayLike", "isTypedArrayLike", "isString", "deepCopy", "floor", "randu", "format", "defaults", "validate", "factory", "config", "conf", "rand", "err", "shuffle", "arr", "options", "strflg", "level", "copy", "opts", "out", "tmp", "N", "i", "j", "require_main", "__commonJSMin", "exports", "module", "factory", "shuffle", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isNumber", "isnan", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rarcsine", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "a", "b", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "format", "assign", "RandomStream", "objectMode", "a", "b", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "a", "b", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isProbability", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rbern", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "p", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "format", "assign", "RandomStream", "objectMode", "p", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "isProbability", "format", "assign", "RandomStream", "factory", "p", "options", "nargs", "opts", "fcn", "createStream2", "createStream1", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rbeta", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "alpha", "beta", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "format", "assign", "RandomStream", "objectMode", "alpha", "beta", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "alpha", "beta", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rbetaprime", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "alpha", "beta", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "format", "assign", "RandomStream", "objectMode", "alpha", "beta", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "alpha", "beta", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isPlainObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveInteger", "isProbability", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rbinom", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "n", "p", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "objectMode", "n", "p", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "n", "p", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "randn", "string2buffer", "nextTick", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "options", "opts", "createStream", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isNumber", "isnan", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rcauchy", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "x0", "gamma", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "x0", "gamma", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "x0", "gamma", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rchi", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "k", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "k", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "isPositive", "assign", "format", "RandomStream", "factory", "k", "options", "nargs", "opts", "fcn", "createStream2", "createStream1", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rchisquare", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "k", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "k", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPositive", "isPlainObject", "assign", "format", "RandomStream", "factory", "k", "options", "nargs", "opts", "fcn", "createStream2", "createStream1", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isNumber", "isnan", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rcosine", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "mu", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "mu", "s", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "mu", "s", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isInteger", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rduniform", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "a", "b", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "a", "b", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "a", "b", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveInteger", "isPositiveNumber", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rerlang", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "k", "lambda", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "k", "lambda", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "k", "lambda", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rexponential", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "lambda", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "lambda", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPositive", "isPlainObject", "assign", "format", "RandomStream", "factory", "lambda", "options", "nargs", "opts", "fcn", "createStream2", "createStream1", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rf", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "d1", "d2", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "d1", "d2", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "d1", "d2", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isNumber", "isnan", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rfrechet", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "alpha", "m", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "alpha", "s", "m", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "alpha", "s", "m", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rgamma", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "alpha", "beta", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "alpha", "beta", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "alpha", "beta", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isProbability", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rgeom", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "p", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "p", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isProbability", "isPlainObject", "assign", "format", "RandomStream", "factory", "p", "options", "nargs", "opts", "fcn", "createStream2", "createStream1", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isNumber", "isnan", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rgumbel", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "mu", "beta", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "mu", "beta", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "mu", "beta", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isNonNegativeInteger", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rhypergeom", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "N", "K", "n", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "N", "K", "n", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "N", "K", "n", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "randn", "string2buffer", "nextTick", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "options", "opts", "createStream", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rinvgamma", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "alpha", "beta", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "alpha", "beta", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "alpha", "beta", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rkumaraswamy", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "a", "b", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "a", "b", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "a", "b", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isNumber", "isnan", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rlaplace", "string2buffer", "format", "nextTick", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "mu", "b", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "mu", "b", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "mu", "b", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isNumber", "isnan", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rlevy", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "mu", "c", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "mu", "c", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "mu", "c", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isNumber", "isnan", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rlogistic", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "mu", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "mu", "s", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "mu", "s", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isNumber", "isnan", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rlognormal", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "mu", "sigma", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "mu", "sigma", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "mu", "sigma", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "minstd", "string2buffer", "nextTick", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "options", "prng", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "options", "opts", "createStream", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "minstd", "string2buffer", "nextTick", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "options", "prng", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "options", "opts", "createStream", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "mt19937", "string2buffer", "nextTick", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "options", "prng", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "options", "opts", "createStream", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isPlainObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isProbability", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rnbinom", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "p", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "objectMode", "p", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "p", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "r", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isNumber", "isnan", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rnorm", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "mu", "sigma", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "mu", "sigma", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "mu", "sigma", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isPlainObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rpareto1", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "alpha", "beta", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "objectMode", "alpha", "beta", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "alpha", "beta", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rpoisson", "string2buffer", "format", "nextTick", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "lambda", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "lambda", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPositive", "isPlainObject", "assign", "format", "RandomStream", "factory", "lambda", "options", "nargs", "opts", "fcn", "createStream2", "createStream1", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "randi", "string2buffer", "nextTick", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "options", "opts", "createStream", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "randn", "string2buffer", "nextTick", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "options", "opts", "createStream", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "randu", "string2buffer", "nextTick", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "options", "opts", "createStream", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rrayleigh", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "sigma", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "sigma", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPositive", "isPlainObject", "assign", "format", "RandomStream", "factory", "sigma", "options", "nargs", "opts", "fcn", "createStream2", "createStream1", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rt", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "v", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "v", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPositive", "isPlainObject", "assign", "format", "RandomStream", "factory", "v", "options", "nargs", "opts", "fcn", "createStream2", "createStream1", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isNumber", "isnan", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rtriang", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "a", "b", "c", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "a", "b", "c", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "a", "b", "c", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isNumber", "isnan", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "runiform", "string2buffer", "nextTick", "format", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "a", "b", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "a", "b", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "a", "b", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isPositiveInteger", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isPositiveNumber", "isError", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "rweibull", "string2buffer", "format", "nextTick", "DEFAULTS", "validate", "debug", "getSeed", "getSeedLength", "getStateLength", "getStateSize", "getState", "setState", "s", "read", "FLG", "r", "destroy", "error", "self", "close", "RandomStream", "k", "lambda", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "assign", "format", "RandomStream", "objectMode", "k", "lambda", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isPlainObject", "assign", "format", "RandomStream", "factory", "k", "lambda", "options", "nargs", "opts", "fcn", "createStream1", "createStream2", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "objectMode", "factory", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_prng", "__commonJSMin", "exports", "module", "isAccessorArray", "random", "clbk", "x", "sx", "ox", "y", "sy", "oy", "hasOptions", "options", "out", "v1", "v2", "require_main", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "arcsine", "N", "a", "sa", "b", "sb", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "arcsine", "N", "a", "sa", "oa", "b", "sb", "ob", "out", "so", "oo", "options", "rand", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "ndarray", "require_main", "__commonJSMin", "exports", "module", "setReadWriteAccessor", "setReadOnlyAccessor", "setReadOnly", "isFunction", "isMethodIn", "isPlainObject", "constantFunction", "noop", "unary", "format", "createFactory", "prng", "factory", "base", "opts", "rand", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "ndarray", "N", "param1", "sp1", "out", "so", "op1", "oo", "s", "require_lib", "__commonJSMin", "exports", "module", "main", "require_factory", "__commonJSMin", "exports", "module", "unaryFactory", "base", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "bernoulli", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_prng", "__commonJSMin", "exports", "module", "isAccessorArray", "random", "clbk", "x", "sx", "ox", "y", "sy", "oy", "hasOptions", "options", "out", "v1", "v2", "require_main", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "beta", "N", "alpha", "sa", "sb", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "beta", "N", "alpha", "sa", "oa", "sb", "ob", "out", "so", "oo", "options", "rand", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "ndarray", "require_prng", "__commonJSMin", "exports", "module", "isAccessorArray", "random", "clbk", "x", "sx", "ox", "y", "sy", "oy", "hasOptions", "options", "out", "v1", "v2", "require_main", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "betaprime", "N", "alpha", "sa", "beta", "sb", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "betaprime", "N", "alpha", "sa", "oa", "beta", "sb", "ob", "out", "so", "oo", "options", "rand", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "ndarray", "require_factory", "__commonJSMin", "exports", "module", "unaryFactory", "base", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "chi", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_factory", "__commonJSMin", "exports", "module", "unaryFactory", "base", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "chisquare", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_prng", "__commonJSMin", "exports", "module", "isAccessorArray", "random", "clbk", "x", "sx", "ox", "y", "sy", "oy", "hasOptions", "options", "out", "v1", "v2", "require_main", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "cosine", "N", "mu", "sm", "s", "ss", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "cosine", "N", "mu", "sm", "om", "s", "ss", "os", "out", "so", "oo", "options", "rand", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "ndarray", "require_prng", "__commonJSMin", "exports", "module", "isAccessorArray", "random", "clbk", "x", "sx", "ox", "y", "sy", "oy", "hasOptions", "options", "out", "v1", "v2", "require_main", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "discreteUniform", "N", "a", "sa", "b", "sb", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "discreteUniform", "N", "a", "sa", "oa", "b", "sb", "ob", "out", "so", "oo", "options", "rand", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "ndarray", "require_factory", "__commonJSMin", "exports", "module", "unaryFactory", "base", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "exponential", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_prng", "__commonJSMin", "exports", "module", "isAccessorArray", "random", "clbk", "x", "sx", "ox", "y", "sy", "oy", "hasOptions", "options", "out", "v1", "v2", "require_main", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "gamma", "N", "alpha", "sa", "beta", "sb", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "gamma", "N", "alpha", "sa", "oa", "beta", "sb", "ob", "out", "so", "oo", "options", "rand", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "ndarray", "require_factory", "__commonJSMin", "exports", "module", "unaryFactory", "base", "factory", "require_main", "__commonJSMin", "exports", "module", "factory", "geometric", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "factory", "require_prng", "__commonJSMin", "exports", "module", "isAccessorArray", "random", "clbk", "x", "sx", "ox", "y", "sy", "oy", "hasOptions", "options", "out", "v1", "v2", "require_main", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "invgamma", "N", "alpha", "sa", "beta", "sb", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "invgamma", "N", "alpha", "sa", "oa", "beta", "sb", "ob", "out", "so", "oo", "options", "rand", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "ndarray", "require_prng", "__commonJSMin", "exports", "module", "isAccessorArray", "random", "clbk", "x", "sx", "ox", "y", "sy", "oy", "hasOptions", "options", "out", "v1", "v2", "require_main", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "lognormal", "N", "mu", "sm", "sigma", "ss", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "lognormal", "N", "mu", "sm", "om", "sigma", "ss", "os", "out", "so", "oo", "options", "rand", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "ndarray", "require_main", "__commonJSMin", "exports", "module", "nullary", "random", "minstd", "N", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "random", "minstd", "N", "out", "so", "oo", "options", "rand", "require_normalized", "__commonJSMin", "exports", "module", "nullary", "random", "minstd", "N", "out", "so", "options", "rand", "require_normalized_ndarray", "__commonJSMin", "exports", "module", "nullary", "random", "minstd", "N", "out", "so", "oo", "options", "rand", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "ndarray", "normalized", "ndarrayNormalized", "require_main", "__commonJSMin", "exports", "module", "nullary", "random", "minstd", "N", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "random", "minstd", "N", "out", "so", "oo", "options", "rand", "require_normalized", "__commonJSMin", "exports", "module", "nullary", "random", "minstd", "N", "out", "so", "options", "rand", "require_normalized_ndarray", "__commonJSMin", "exports", "module", "nullary", "random", "minstd", "N", "out", "so", "oo", "options", "rand", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "ndarray", "normalized", "ndarrayNormalized", "require_main", "__commonJSMin", "exports", "module", "nullary", "random", "mt19937", "N", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "random", "mt19937", "N", "out", "so", "oo", "options", "rand", "require_normalized", "__commonJSMin", "exports", "module", "nullary", "random", "mt19937", "N", "out", "so", "options", "rand", "require_normalized_ndarray", "__commonJSMin", "exports", "module", "nullary", "random", "mt19937", "N", "out", "so", "oo", "options", "rand", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "ndarray", "normalized", "ndarrayNormalized", "require_prng", "__commonJSMin", "exports", "module", "isAccessorArray", "random", "clbk", "x", "sx", "ox", "y", "sy", "oy", "hasOptions", "options", "out", "v1", "v2", "require_main", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "normal", "N", "mu", "sm", "sigma", "ss", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "normal", "N", "mu", "sm", "om", "sigma", "ss", "os", "out", "so", "oo", "options", "rand", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "ndarray", "require_main", "__commonJSMin", "exports", "module", "nullary", "random", "randu", "N", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "random", "randu", "N", "out", "so", "oo", "options", "rand", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "ndarray", "require_prng", "__commonJSMin", "exports", "module", "isAccessorArray", "random", "clbk", "x", "sx", "ox", "y", "sy", "oy", "hasOptions", "options", "out", "v1", "v2", "require_main", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "uniform", "N", "a", "sa", "b", "sb", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "uniform", "N", "a", "sa", "oa", "b", "sb", "ob", "out", "so", "oo", "options", "rand", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "ndarray", "require_prng", "__commonJSMin", "exports", "module", "isAccessorArray", "random", "clbk", "x", "sx", "ox", "y", "sy", "oy", "hasOptions", "options", "out", "v1", "v2", "require_main", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "weibull", "N", "k", "sk", "lambda", "sl", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "binary", "prng", "weibull", "N", "k", "sk", "ok", "lambda", "sl", "ol", "out", "so", "oo", "options", "rand", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "ndarray", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "setReadOnly", "ns"]
}
